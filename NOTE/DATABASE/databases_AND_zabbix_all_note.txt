ip  172.40.50.117    vnc 7000

庞丽静  静静

panglj@tedu.cn

1903   13   402

学生

不迟到 不早退  认证听讲  专心做实验

第三阶段 （数据库管理员  DBA ）     （运维工程师 DBA）
1  RDBMS---MYSQL     2 NOsql---Redis  3 监控与安全

RDBMS1---day01
一、搭建数据库服务器
	1.1 相关概念
	1.2 在50主机部署mysql数据库服务      练习到 11：35
		解包
		安装软件包
		启动mysqld服务
		查看服务进程和端口
		查看初始登陆密码
		使用初始密码登陆
		修改登陆密码
		断开连接
		使用修改后的密码登陆
		修改密码策略
		根据新密码策略设置密码
		使用新密码登陆

]# tar -xvf  mysql-5.7.17.tar
]# ls *.rpm
]# yum -y  install mysql-community-*.rpm
]# systemctl  start mysqld
]# ls  /var/lib/mysql
]# systemctl  enable mysqld
]# netstat  -utnlp  | grep  :3306
]# ps -C  mysqld

		]# grep  password  /var/log/mysqld.log
		]# mysql -hlocalhost -uroot -p'f<tbekh-d8Y!'
		mysql> alter user  root@"localhost" identified by "123qqq...A";
		mysql> exit

]# mysql  -uroot -p123qqq...A
mysql> show variables like "%password%";
mysql> set global validate_password_length=6;
mysql> set global validate_password_policy=0;
mysql> alter user  root@"localhost" identified by "tarena";
mysql> exit

	]# mysql  -uroot -ptarena
	]# vim /etc/my.cnf
		[mysqld]
		validate_password_length=6
		validate_password_policy=0
	:wq

二、数据库服务的基本使用
	2.1 连接方式
	2.2 数据存储流程 ?
	2.3 mysql管理环境 (SQL命令)

练习25分钟到 13：55
	2.4 库管理命令 （创建新库 查看已有的库 切换库 删除库 库名命名规则）
	2.5 表管理命令 （查看已有的表  创建新表 查看表结构 查看表记录）
	2.6 记录管理命令（查看已有记录 插入新记录 修改记录 删除记录）

设置表记录可以写中文
		]# LANG="zh_CN.UTF-8"
mysql> create table db1.学生表(
   姓名 char(10),
   家庭地址 char(20)
   ) DEFAULT CHARSET=utf8;

mysql> insert into db1.学生表 values("张三丰","武当山");
mysql> insert into db1.学生表 values("张四丰","武台山");
mysql> select  * from  db1.学生表;


三、MySQL数据类型
	3.1 字符类型  char   varchar

	3.2 数值类型  练习到 15：35
		整数类型  tinyint  smallint int  bigint
		浮点类型  float  double
mysql> create table db1.t5 (name char(10), level  tinyint );
mysql> insert into  db1.t5 values ("zbj",-1);
mysql> insert into  db1.t5 values ("zbj",-129);
mysql> insert into  db1.t5 values ("zbj",198);

mysql> create table db1.t6 (name char(10), level  tinyint unsigned);
mysql> insert into  db1.t6 values ("zbj",-1);
mysql> insert into  db1.t6 values ("zbj",0);
mysql> insert into  db1.t6 values ("zbj",256);
mysql> insert into  db1.t6 values ("zbj",25);
mysql> insert into  db1.t6 values ("zbj",25.22);
mysql> insert into  db1.t6 values ("zbj",25.52);

mysql> create  table db1.t3(pay float , id double);
mysql> insert into db1.t3 values(9999.23,9999.77);

mysql> create  table db1.t4( pay float(5,2) , id double(4,2) );
mysql> insert into db1.t4 values(9999.23,9999.77);

mysql> create table  db1.t7(stu_num int , name char(5) ,
       age tinyint ,pay float ,money float(7,2) );

mysql> desc  db1.t7 ;
				练习到 15：45

	3.3 日期时间类型
		年    日期   时间   日期时间
		year  date   time   datetime/ timestamp

create table db1.t8(      休息到 16：15
name  char(15),
your_s    year,
birthday  date,
up_class  time,
party  datetime
);

desc  db1.t8 ;

insert into  db1.t8  values
("bob",1990,20191120,083000,20190607203000);

当year类型 使用2位数赋值时：
01~69视为  2001~2069
70~99视为  1970~1999
insert into  db1.t8  values
("tom",77,20191120,083000,20190607203000);

select  * from  db1.t8 ;

当未给timestamp字段赋值时，自动以当前系统时间赋值，而datetime 值为 NULL (空)

create table  db1.t9(  练习到 16:30
meetting  datetime,
party	  timestamp
) ;

insert into  db1.t9 values (20190606162000,20190606162000);

insert into  db1.t9(meetting) values (20180707093000);

insert into  db1.t9(party) values (20160707093000);

select  *  from  db1.t9;

可以使用时间函数给字段赋值

mysql> insert into db1.t8 values
( "jack" , year(now()) , date(now()) , curtime() , now()  );

	3.4 枚举类型
	enum 单选
	set  多选

create table db1.t10 (
 name  char(10),
 sex   enum("boy","girl","no"),
 likes set("eat","game","piao","du","film")
);


mysql> desc db1.t10;

insert into  db1.t10 values ("jack","man","a,b,c");
insert into  db1.t10 values ("jack","boy","eat,piao");

select  * from  db1.t10 ;

RDBMS1_day01 内容总结
一、搭建的mysql数据库服务器：什么是数据库？ 数据库服务软件？
			        mysql优点？ 应用场景？ LAMP / LNMP
			      安装mysql软件 启动服务  使用初始密码登陆
				修改登陆密码  设置密码策略

二、基本使用？ 把数据库存储到mysql服务器上的步骤 ？
	       连接方式？
	       库的基本管理命令 表的基本管理命令  记录管理
		SQL命令使用规则

三、数据类型： 字符  数值  日期时间  枚举



+++++++++RDBMS1_day02
一、表结构
	2.1 约束条件
		作用：限制给表字段赋值
		查看字段的约束条件： desc 库.表；
		约束条件包括那些：
				 是否允许为空 (null)    not null
				 键值
				 默认值  default 值
				 额外设置

mysql> create table db1.t21(
    -> name char(10) not null,
    -> age  tinyint  unsigned  default  25,
    -> sex  enum("m","w") not null  default "w"
    -> );
mysql> insert into  db1.t21(name)values("jerry");
mysql> insert into  db1.t21    values("bob",29,"m");

mysql> insert into  db1.t21    values(null,null,null);

mysql> insert into  db1.t21    values("null",null,null);
ERROR 1048 (23000): Column 'sex' cannot be null
mysql>

mysql> insert into  db1.t21    values("null",null,"m");
mysql> select  * from  db1.t21;


	2.2 修改表结构
		命令格式  alter  table  库.表 执行动作;
		执行动作包括如下：
	        		add  添加新字段
mysql> alter table db1.t10  add  email  varchar(50) default "stu@tedu.cn" ;
mysql> alter table  db1.t10 add  stu_num char(9) first;
mysql> alter table db1.t10  add  age  tinyint  unsigned  not null default 19  after name;

练习到 10：25

				drop 删除已有字段
mysql> alter table db1.t10 drop email ,drop stu_num ;

				modify  修改字段类型
注意：修改的字段类型与已经存储的数据冲突时，不允许修改类型

mysql> alter table db1.t10  modify  name varchar(15)   default  "" ;


mysql> alter table db1.t10
           modify age tinyint unsigned not null default 19 after sex;

				change  修改字段名
mysql> alter table  db1.t10
           change likes loves set('eat','game','piao','du','film') ;
				rename  修改表名

mysql> alter table db1.t10 rename db1.classinfo;

		休息到 11：15
二、MySQL 键值
	键值类型：
		普通索引 index  ***
		唯一索引 unique
		主    键 primary  key ***
		外    键 foreign  key ***
		全文索引 fulltext

	作用：约束如何给字段赋值

	普通索引（index）
		什么是索引（索引介绍）
		为什么要使用索引（索引优点与缺点）
		使用索引：
			 使用规则 ？
			 查看 desc  库.表  key
			      show   index  from  表名 \G;

			 创建索引:
				建表时创建索引字段
					create  table db1.t22(
						class  char(9),
						name  char(15),
						age int,
						index(name),index(age)
					 );

					desc  db1.t22;

				        show index  from  db1.t22\G;

				在已有表里创建索引字段
					mysql> create index xixi
							on  stuinfo(name);

			 删除索引:
				mysql> drop  index  name on t22;

	2.2 主    键 primary  key
			作用：限制字段赋值
			使用规则？
			使用主键：
				1 创建主键
					1.1 建表时创建主键
mysql> create table  db1.t23(
    -> name char(10) primary key,
    -> age int,
    -> pay float(7,2)
    -> );

mysql> desc  db1.t23 ;
mysql> insert into  db1.t23 values(null,19,28800.88);
mysql> insert into  db1.t23 values("bob",19,28800.88);
mysql> insert into  db1.t23 values("bob",29,38800.88);

					1.2 在已有表里添加主键
		mysql> select  * from  db1.classinfo;
		mysql> delete from  db1.classinfo;
		mysql> alter table  db1.classinfo add  primary key(name);
		mysql> desc  db1.classinfo;

练习到 14：45

				2 创建复合主键
				    约束方式： 主键字段的值不可以同时重复
	PRI       PRI
	clientip  serport  status
 	1.1.1.1   22        yes
	1.1.1.1   22        yes

create table db1.t24(
clientip  char(15),
serport	  int,
status    enum("yes","no"),
primary key(clientip,serport)
);

mysql> insert into db1.t24 values ("1.1.1.1",22,"yes");
mysql> insert into db1.t24 values ("1.1.1.1",22,"no");
mysql> insert into db1.t24 values ("1.1.1.1",22,"yes");
mysql> insert into db1.t24 values ("1.1.1.1",25,"yes");
mysql> insert into db1.t24 values ("1.1.1.1",25,"no");
mysql> insert into db1.t24 values ("2.1.1.1",25,"no");

				3 primary key与auto_increment连用
						自增长
						赋值时 字段的值字段加1

 id  name  age sex
 1   bob   19  boy
 2  tom   21  boy
 3  jerry  25  boy
 4  lucy   18  girl

create table  db1.t25(
 id int primary key  auto_increment,
 name char(15),
 age tinyint ,
 sex enum("boy","girl")
);

mysql> desc db1.t25 ;

mysql> insert into  db1.t25(name,age,sex)values("bob",19,"boy");

mysql> insert into  db1.t25(name,age,sex)values("tom",21,"boy");

mysql> select  * from  db1.t25;

mysql> insert into db1.t25 values (6,"bob",19,"girl");
mysql> select  * from  db1.t25;

mysql> insert into  db1.t25(name,age,sex)values("jack",27,"boy");
mysql> select  * from  db1.t25;

mysql> delete from   db1.t25;
mysql> select  * from db1.t25;

mysql> insert into  db1.t25(name,age,sex)values("jack",27,"boy");
mysql> select  * from db1.t25;

				4 删除主键
				mysql> alter table db1.t23 drop  primary key;

				mysql> alter table  db1.t24 drop primary key;

			mysql> alter table  db1.t25  modify id int;
			mysql> alter table  db1.t25 drop  primary key;


	2.3 外    键 foreign  key
			作用：限制给字段赋值，插入记录时，
				     字段值在另一个表字段值范围内选择。

			使用规则:
				1 表存储引擎必须是innodb
				2 字段类型要一致
				3 被参照字段必须要是键值类型的某一种，通常是p					rimary key

			命令格式：

			create table 库.表（
				字段列表，
   foreign   key(字段名)  references  表名(字段名)
   on  update  cascade
   on  delete    cascade
   )engine=innodb;


yg 员工表
	编号 姓名
 	1    bob
	2    tom
 	3    bob

create table db1.yg(
yg_id int  primary key auto_increment,
name  char(20)
)engine=innodb;

insert into db1.yg(name)values("bob");
insert into db1.yg(name)values("tom");
insert into db1.yg(name)values("bob");
select  * from  db1.yg;
gz 工资表
	编号 工资
	 1   30000
	 2   50000

create table db1.gz(
gz_id int,
pay  float(7,2),
foreign key(gz_id) references yg(yg_id)
on  update  cascade on delete cascade
)engine=innodb;

mysql> desc db1.gz;
mysql> show create table db1.gz\G;
mysql> select  * from  db1.gz;

			测试外键：
mysql> insert into db1.gz values(4,50000);

ERROR 1452 (23000): Cannot add or update a child row: a foreign key constraint fails (`db1`.`gz`, CONSTRAINT `gz_ibfk_1` FOREIGN KEY (`gz_id`) REFERENCES `yg` (`yg_id`) ON DELETE CASCADE ON UPDATE CASCADE)


mysql> insert into db1.gz values(1,50000);

mysql> insert into db1.gz values(2,45000);

mysql> insert into db1.gz values(3,35000);

mysql> select  * from db1.gz;

					练习 到 17：52

mysql> update db1.yg  set yg_id=4 where yg_id=3;
mysql> select  * from  db1.yg;
mysql> select  * from  db1.gz;


mysql> delete from db1.yg where yg_id=1;
mysql> select  * from  db1.yg;
mysql> select  * from  db1.gz;

mysql> delete from db1.gz;
mysql> alter table db1.gz add primary key(gz_id);

		删除外键
			mysql> show create table db1.gz\G;
			mysql> alter table db1.gz drop foreign key gz_ibfk_1;


		50  51 52 53

		前任信息表
		婚宴邀请表 （邀请人必须在前任信息表里选）
++++++++RDBMS1_DAY02 学习内容
1 约束条件 ： 作用？ 包括那些？ 约束条件相关的命令 ？

2 修改表结构： 命令格式 ？ 执行动作有那些？

3 mysql键值 ： 键值类型 ？  普通索引的使用？ 主键的使用 ？ 外键的使用？


++++++++RDBMS1_DAY03
一、数据导入导出

	修改搜索路径
	]# mkdir  /myload
	]# chown  mysql  /myload
	]# vim  /etc/my.cnf
     		[mysqld]
     		secure_file_priv="/myload“
	:wq
	]# systemctl  restart mysqld

	mysql> show  variables  like  “secure_file_priv”;  查看



	1.1 数据导入：
		作用？把系统文件的内容存储到数据的表里
		命令格式？
		mysql>
		load  data  infile   "目录名/文件名"
into   table  库名.表名
fields terminated   by   "分隔符"
lines  terminated  by   "\n";


		注意事项？
			字段分隔符要与文件一致
			表字段类型和字段个数要与文件匹配
			导入数据时指定文件的绝对路径

		操作步骤？
			create database db3;
			create table db3.user(
				name char(50),
				password  char(1),
				uid int,
				gid int,
				comment  char(150),
				homedir char(50),
				shell	char(50)
			);

			desc db3.user;

			select  * from db3.user;

			]# cp /etc/passwd  /myload/

mysql> load data infile "/myload/passwd" into table db3.user
       fields terminated by ":" lines terminated by "\n" ;
mysql> select  * from  db3.user;
mysql> alter table  db3.user
    -> add
    -> id  int primary key auto_increment first;
mysql> select  * from  db3.user;
mysql> select  * from  db3.user where id=1;        （10:30 上课）


	1.2 数据导出 :
		作用：把表记录存储到系统文件里

		命令格式：
			格式1：
			mysql>  select命令   into   outfile   “目录名/文件";

			格式2：
			mysql>  select命令   into   outfile   “目录名/文件"
				fields   terminated   by   “分隔符”;


			格式3：
			mysql>  select命令   into   outfile   “目录名/文件"
				fields   terminated   by   “分隔符”
				lines	  terminated   by   “分隔符” ;


		注意事项：
			导出数据行数由SQL查询决定。
			导出的是表记录，不包括字段名。
			自动创建存储数据的文件。
			存储数据文件，具有唯一性。


		例子：

		mysql> select  * from  db3.user  into outfile "/myload/user1.txt";

		mysql> select  * from  db3.user  where id<=3   into outfile "/myload/user2.txt" fields   terminated   by "###";


		mysql> select  name,uid,shell from  db3.user  where id<=3   into outfile "/myload/user3.txt" fields   terminated   by "#"  lines terminated   by "???";

		]# ls /myload
		]# vim /myload/user1.txt
		]# vim /myload/user2.txt
		]# vim /myload/user3.txt
						练习到 10：57



二、管理表记录 （db3.user）

		2.1 添加记录
			格式1 添加1条记录，给所有字段赋值
				  insert   into   库.表名  values (字段值列表)；
mysql> insert into  user
	values (22,"bob","x",3000,3000,"test user","/home/bob","/bin/bash");

			格式2：添加N条记录，给所有字段赋值
				insert   into   库.表名  values (字段值列表), (字段值列表);

mysql> insert into  user
values
(23,"lucy","x",3001,3000,"test user","/home/bob","/bin/bash"),
(24,"tom","x",3002,3000,"test user","/home/bob","/bin/bash"),
(25,"jack","x",3003,3000,"test user","/home/bob","/bin/bash");

			格式3：添加1条记录，给指定字段赋值
				insert   into  表名 (字段名列表) values (字段值列表);

mysql> insert into user(name,uid)values("jerry","4000");

			格式4：添加N条记录，给指定字段赋值
				insert   into  表名 (字段名列表)
					values (字段值列表),(字段值列表);

mysql> insert into user(name,uid)values("mack","4001"),("lili",4002),("dachui",4003);

			注意事项：
				字段值要与字段类型相匹配。
				字符类型的字段，要用 ””号括起来。
				依次给所有字段赋值时，字段名可以省略。
				只给部分字段赋值时，必须明确写出对应的字段名称。
				没有赋值的字段使用默认值或自增长赋值。



		2.2 查看记录
			格式1：查看所有记录
			      select   字段1,字段N  from  库名.表名;

			格式2  条件查询
			      select  字段1,字段N  from  库名.表名 where 条件表达式;

			注意事项：
				*表示所有字段
				查看当前库表记录时库名可以省略
				字段列表决定显示列个数
				条件决定显示行的个数

mysql> select  id , name , shell from user;
mysql> select  * from user;

mysql> select  id , name , shell from user where name="adm";

mysql> select * from user where id<=5;

		2.3 修改记录
			格式1，批量更新
				update  库名.表名 set  字段名=值 , 字段名=值 , 字段名=值;

			格式2，条件匹配更新
				update  库名.表名 set  字段名=值 , 字段名=值 , 字段名=值
					where 匹配条件;

			注意事项:
			字段值要与字段类型相匹配
			对于字符类型的字段，值要用双引号括起来
			若不使用where限定条件，会更新所有记录字段值
			限定条件时，只更新匹配条件的记录的字段值

mysql> update user set  password="A" , comment="student user" ;
mysql> update user set password="x" where name="root";

		2.4 删除记录
			格式1，条件匹配删除
					delete    from   库名.表名  where  条件表达式;

			格式2，删除所有记录
					delete    from   库名.表名;

			注意事项:
				不加条件删除表中的所有行

mysql> delete from user where id>21;
mysql> delete from user ;

三、匹配条件
	3.1 基本匹配条件(适用于select \ update \delete)
		3.1.1 数值比较 >  >=  <  <=  =  !=
				mysql> select  * from user where uid=3;
				mysql> select  * from user where id<=5;
				mysql> select name,uid,gid from user
						where uid=gid ;

				mysql> select name,uid,gid from user
						where uid!=gid ;

		3.1.2 字符比较  =    !=
				mysql> select name,shell from user
						where shell != "/bin/bash";
				mysql> select name,shell from user
						where name = "adm";
		3.1.3 范围内比较
			in  (值列表) 	在…里…
			not  in  (值列表)	不在…里…
			between 数字 and  数字	在…之间…

			mysql> select name from user
			where  name in ("mysql","apache","adm","sync");

			mysql> select name,uid from user
					where  uid in (3,5,7,9);

			mysql> select name,shell from user
			where  shell not in ("/bin/bash","/sbin/nologin");

			mysql> select name,uid from  user
				where  uid between 50 and 100;

		3.1.4 逻辑比较(多个判断条件)
			逻辑与  and  或 && (多个判断条件必须同时成立)
			逻辑或  or   或 || (多个判断条件，某个成立即可)
			逻辑非  取反 ！ 或 not
mysql> select  * from user
       where  name="root" and  uid=1  and shell="abc" ;

mysql> select  * from user  where name="root" or  uid=1  or shell="abc";

mysql> select  * from user
     where name="root" &&  uid=0  &&  shell="/bin/bash";

		3.1.5 空/非空
		     is null  / is not null

mysql> insert into user(name) values(null);
mysql> select id from  user where name is null ;
mysql> select id from  user where name is not null ;
							练习到14：40

		3.1.6 去掉重复数据 distinct

		mysql> select  shell from user where uid>=100;
		mysql> select distinct shell from user where uid>=100;
		mysql> select distinct shell from user ;

	休息到15：15

	3.2 高级匹配条件(适用于select \ update \delete)
		3.2.1 模糊匹配
		where 字段名  like   '通配符'
			_      表示1个字符
			%     表示0~n个字符

mysql> select name from user where  name like '____';
mysql> select name from user where  name like '__%__';
mysql> select name from user where  name like '%a%';
mysql> select name from user where  name like 'a%';

		3.2.2 正则匹配
			where 字段名  regexp   '正则表达式'
			正则符号 ^ $ . * [] |

mysql> select name from user where name regexp  '^r|y$';

mysql> select name from user where name regexp  '^r.*y$';

mysql> select name,uid from user where uid regexp  '^....$';

mysql> insert into user(name)values("yaya9"),("7yaya"),("ya8ya");
mysql> select name,uid from user where name regexp  '[0-9]';

		3.2.3 四则计算  + - * / %
mysql> select name , uid , gid ,  uid+gid  zh from user where  name="bin";
mysql> select name , uid , gid ,  uid+gid  zh from user ;

mysql> update user set gid=gid+1 ;

mysql> alter table user add  age tinyint unsigned default 19 after name;
mysql> select name,age, 2019-age  your_s from user where name="root";


		3.2.4 提高优先级 ()
			mysql> select name , uid , gid ,  (uid+gid)/2  pjz from user where name="adm";


	3.3 操作查询结果(适用于select)
		3.3.1 聚集函数(MySQL内置数据统计命令)
			avg(字段名)			//统计字段平均值
			sum(字段名) 			//统计字段之和
			min(字段名) 			//统计字段最小值
			max(字段名) 			//统计字段最大值
			count(字段名) 			//统计字段值个数

			mysql> select min(uid) from user;
			mysql> select max(uid) from user;
			mysql> select avg(uid) from user;
			mysql> select sum(uid) from user;

mysql> select count(name) from  user where shell != "/bin/bash";
mysql> select count(name) from  user;

mysql> select * from  user ;
mysql> select count(*) from  user ;

		3.3.2 查询结果排序
			SQL查询   order   by   字段名   [ asc | desc ];

mysql> select name,uid from user
        where uid >=10  and uid <= 500 ;

mysql> select name,uid from user
	where uid >=10  and uid <= 500 order by uid

mysql> select name,uid from user
	where uid >=10  and uid <= 500 order by uid desc ;

		3.3.2 查询结果分组
			SQL查询  group   by   字段名;

mysql> select shell from user  where uid <=500;
mysql> select shell from user  where uid <=500 group by  shell;

mysql> select gid  from user ;
mysql> select gid  from user  group by  gid;

		3.3.3 查询结果过滤
			SQL查询   having   条件表达式;

mysql> select name from  user where id<=20  ;
mysql> select name from  user where id<=20  having name="adm";

		3.3.4 限制查询结果显示行数
			SQL查询  limit  数字; 	//显示查询结果前多少条记录
		SQL查询  limit  数字1,数字2; //显示指定范围内的查询记录
		数字1  起始行 （0 表示第1行  ）
		数字2  总行数


mysql> select id,name,password from  user where id<=20;
mysql> select id,name,password from  user where id<=20 limit 10;
mysql> select id,name,password from  user where id<=20 limit  5;

mysql> select name,uid from user where id<=10;
mysql> select name,uid from user where id<=10 limit 0,2;
mysql> select name,uid from user where id<=10 limit 1,3;

		练习到 17：10
		休息到 17：25

四、MySQL管理工具
	在192.168.4.50 上安装图形软件phpMyAdmin
	# yum  -y  install  httpd  php  php-mysql
	# systemctl start httpd
	# systemctl  enabled  httpd

	# tar  -zxvf  phpMyAdmin-2.11.11-all-languages.tar.gz
	# mv  phpMyAdmin-2.11.11-all-languages  /var/www/html/phpmyadmin

	# cd /var/www/html/phpmyadmin/
	# cp  config.sample.inc.php   config.inc.php  //创建主配置文件

	# vim  config.inc.php
	17   $cfg[‘blowfish_secret’] = ‘plj123’;  //cookies参数
	31   $cfg[‘Servers’][$i][‘host’] = ‘localhost’; //数据库服务器IP地址

	访问软件管理数据库服务
	http://192.168.4.50/phpmyadmin
	用户名 root
	密  码
++++++++++RDBMS1_DAY04++++++++++++++
一、用户授权
	1.1 用户授权： 在数据库服务器上添加新的连接用户，默认只允许数据库管理员本机登陆

	1.2 命令：
	    mysql> grant  权限列表  on   库名  to  用户名@”客户端地址” identified  by  “密码” with  grant  options ;

		休息到11：16
	例子：
mysql> grant   all    on     *.*     to     mydba@"%"  identified by "123qqq...A"
    -> with grant option;


mysql> grant select on  db3.user to admin@"192.168.4.%" identified by "123qqq...A";


mysql> grant select , update , insert ,delete on db3.* to admin2@"localhost"
    -> identified by "123qqq...A";


	1.3 在客户端使用授权连接数据库服务器
		]# mysql -h数据库服务器ip地址  -u授权用户名 -p密码
		]# mysql -h192.168.4.50  -uadmin  -p123qqq...A
		mysql> show grants;
+-------------------------------------------------------+
| Grants for admin@192.168.4.%                          |
+-------------------------------------------------------+
| GRANT USAGE ON *.* TO 'admin'@'192.168.4.%'           |
| GRANT SELECT ON `db3`.`user` TO 'admin'@'192.168.4.%' |
+-------------------------------------------------------+
2 rows in set (0.00 sec)
		mysql> delete from  db3.user;
ERROR 1142 (42000): DELETE command denied to user 'admin'@'192.168.4.51' for table 'user'
mysql>
mysql> update db3.user set password="A";
ERROR 1142 (42000): UPDATE command denied to user 'admin'@'192.168.4.51' for table 'user'
mysql>
mysql> select * from db3.user limit 1;
+----+------+------+----------+------+------+--------------+---------+-----------+
| id | name | age  | password | uid  | gid  | comment      | homedir | shell     |
+----+------+------+----------+------+------+--------------+---------+-----------+
|  1 | root |   19 | x        |    0 |    0 | student user | /root   | /bin/bash |
+----+------+------+----------+------+------+--------------+---------+-----------+
1 row in set (0.00 sec)


	1.4 相关命令
		select user(); //显示登录用户名及客户端地址
		show grants;   //用户显示自身访问权限
		show  grants   for  用户名@“客户端地址”;  //管理员查看已有授权用户权限
		set  password=password(“密码”); //授权用户连接后修改连接密码
		set   password   for 用户名@“客户端地址”= password(“密码”)； //管理员重置授权用户连接密码
		drop user 用户名@“客户端地址”; //删除授权用户


	1.5 授权库: mysql库 记录授权信息，主要表如下：
			user表    	//记录已有的授权用户及权限
			db表       	//记录已有授权用户对数据库的访问权限
			tables_priv表   //记录已有授权用户对表的访问权限
			columns_priv表  //记录已有授权用户对字段的访问权限


			mysql> desc mysql.user;
			mysql> select host,user from mysql.user;
			mysql> show  grants for mydba@"%";


			mysql> desc mysql.db;
			mysql> select host,user,db from mysql.db;
			mysql> select  * from mysql.db
				 where db="db3" and user="admin2" and host="localhost"\G;
			mysql> show grants for  admin2@"localhost";
			mysql> update mysql.db set Drop_priv="Y"
				where db="db3" and user="admin2" and host="localhost";
			mysql> flush privileges; //重新加载表记录
			mysql> show grants for  admin2@"localhost";


			mysql> desc mysql.tables_priv;
			mysql> select host,user,db,Table_name from mysql.tables_priv;

			mysql> select * from mysql.tables_priv
					where Table_name="user" and db="db3"\G;

			mysql> show grants for admin@"192.168.4.%";


			mysql> desc mysql.columns_priv;
			mysql> select  * from  mysql.columns_priv;
			mysql> grant select ,update(name,password) on  db3.user
					to admin3@"localhost" identified by "123qqq...A" ;

			mysql> select  * from  mysql.columns_priv;

			]# mysql -uadmin3  -p123qqq...A
			mysql> show  grants;
			mysql> update  db3.user set age=18;
			mysql> update  db3.user set password="F";
			mysql> select  password from db3.user;


	1.6 撤销权限：删除授权用户的权限
		1.6.1 命令：
			mysql> revoke  权限列表  on  库名.表   from  用户名@"客户端地址";

		例子：
			mysql> select host,user from mysql.user;
			mysql> show grants for mydba@"%";

			mysql> revoke grant option on *.* from mydba@"%";
			mysql> show grants for mydba@"%";

			mysql> revoke delete,update on  *.* from mydba@"%";
			mysql> show grants for mydba@"%";


			mysql> revoke all on  *.* from mydba@"%";
			mysql> show grants for mydba@"%";

			mysql> drop user  mydba@"%";

	1.7 root密码
		1.7.1 恢复数据库管理员本机登陆密码
			1. 停止MySQL服务程序
			   ]# systemctl  stop  mysqld
			2. 跳过授权表启动MySQL服务程序
			   ]# vim /etc/my.cnf
				[mysqld]
				skip-grant-tables
				#validate_password_length=6
				#validate_password_policy=0
			   ：wq
			   ]# systemctl  start  mysqld
			3. 修改root密码
			   ]# mysql
			   mysql> update mysql.user
		set  authentication_string=password("123qqq...A")
		where user="root" and host="localhost";
			  mysql> flush privileges;
			  mysql> exit
			4. 正常方式重启MySQL服务程序
			  ]# vim /etc/my.cnf
                                [mysqld]
                                #skip-grant-tables
                        	validate_password_length=6
				validate_password_policy=0
                           ：wq
                           ]# systemctl  restart  mysqld
			5、使用修改后的密码登陆
			   ]# mysql -uroot -p123qqq...A

		1.7.2  重置root密码
			 ]# mysqladmin  -uroot -p  password "123456"
			 Enter password:123qqq...A

			 ]# mysql -uroot -p123456
			 mysql>
			练习到  15：45   休息到 16：00
二 数据完全备份
	2.1 数据备份相关概念 ？
			数据备份方式
			数据备份策略
	物理备份 50
		 ]# cp -r /var/lib/mysql /root/mysql.bak
		 ]# scp -r /root/mysql.bak root@192.168.4.51:/tmp/

	物理恢复 51
	]# systemctl  stop mysqld
  	]# ls /var/lib/mysql
  	]# rm -rf /var/lib/mysql
  	]# cp -r /tmp/mysql.bak /var/lib/mysql
  	]# ls /var/lib/mysql
  	]# ls -ld /var/lib/mysql
  	]# chown  -R mysql:mysql /var/lib/mysql
  	]# ls -ld /var/lib/mysql
  	]# ls -l /var/lib/mysql
  	]# systemctl  start mysqld
  	]# mysql -uroot -p123456
	mysql> show databases;
	mysql> select  * from db3.user;
	mysql> use db1;
	mysql> show tables;
				练习到16：30

	完全备份
		命令
		]#mysqldump   -uroot    -p密码    库名  >  目录/xxx.sql

		192.68.4.50:
		]# mysqldump -uroot -p123456 -A > allbak.sql
  		]# ls *.sql
  		]# mysqldump -uroot -p123456 db3 > db3.sql
 		]# ls *.sql
  		]# vim db3.sql
  		]# scp db3.sql  root@192.168.4.51:/tmp/
  		]# scp db3.sql  root@192.168.4.52:/tmp/

	完全恢复
		命令
		]#mysql  -uroot    -p密码    库名    <   目录/xxx.sql

		192.168.4.52:
		mysql>create database db3;

		]#mysql  -uroot    -p密码 db3 < /tmp/db3.sql
		mysql> select  * from db3.user;

							休息到 17：15
三、增量备份
		3.1 binlog日志的使用
			3.1.1 binlog日志介绍（binlog日志是什么）


			3.1.2 启用binlog日志

				]# vim /etc/my.cnf
			   	[mysqld]
			   	log-bin
			   	server_id=50
				:wq

				]# systemctl restart mysqld


				]# ls /var/lib/mysql/*-bin.*
			3.1.3  手动生成新的日志文件：
				 1. systemctl  restart  mysqld

     				 2. mysql> flush logs;
         				或
        			     ]# mysql -uroot  -p密码  -e ‘flush log’

      				 3. mysqldump -uroot -p123456  --flush-logs db3  > /db3.sql

			3.1.4 清理日志
				删除指定编号之前的binlog日志文件
				mysql>  purge  master  logs  to "host50-bin.000004";

				删除所有binlog日志，重建新日志
				mysql> reset master;

			3.1.5 启用日志时，自定义日志文件存储目录和文件名
			      ]# vim /etc/my.cnf
				[mysqld]
					#log-bin
					log-bin=/mylog/db50
					server_id=50
				:wq
				]# mkdir /mylog
				]# chown  mysql /mylog
				]# systemctl restart mysqld
				]# ls /mylog/db50.*

	192.168.4.50:
		]# mysqldump  -uroot -p123456 db3 user > /root/db3_user.sql

		mysql> show master status;
		mysql> insert into db3.user(name)values("xixi");
		mysql> insert into db3.user(name)values("xixi");
		mysql> insert into db3.user(name)values("xixi");
		mysql> insert into db3.user(name)values("xixi");
		mysql> insert into db3.user(name)values("xixi");
		mysql> show master status;

		]# scp /mylog/db50.000001 root@192.168.4.51:/tmp/

		3.2 恢复数据 (使用binlog日志恢复数据)
			3.2.1 日志格式 （日志如何区分记录的多条SQL命令）
				查看日志当前记录格式
				 mysql> show variables like "%binlog%";
				 mysql>show variables like "binlog_format";

				 修改日志格式  10:32
				  ]# vim /etc/my.cnf
					[mysqld]
					binlog_format="mixed"
				   :wq
				   ]# systemctl  restart mysqld
				   ]# mysql -uroot -p123456
mysql> show variables like "binlog_format";
+---------------+-------+
| Variable_name | Value |
+---------------+-------+
| binlog_format | MIXED |
+---------------+-------+
1 row in set (0.01 sec)

mysql> show master status;
+-------------+----------+--------------+------------------+-------------------+
| File        | Position | Binlog_Do_DB | Binlog_Ignore_DB | Executed_Gtid_Set |
+-------------+----------+--------------+------------------+-------------------+
| db50.000002 |      154 |              |                  |                   |
+-------------+----------+--------------+------------------+-------------------+
1 row in set (0.00 sec)

mysql>

			日志如何区分记录的多条SQL命令
			偏移量
			时间点

			命令]# mysqlbinlog 【选项】 日志文件 | mysql -uroot -p密码
			选项
			--start-datetime=“yyyy-mm-dd hh:mm:ss”	起始时间
			--stop-datetime="yyyy-mm-dd hh:mm:ss"	结束时间
			--start-position=数字	起始偏移量
			--stop-position=数字 	结束偏移量
	192.168.4.50:
		]# mysqlbinlog --start-position=1404 --stop-position=2094 /mylog/db50.000002 | mysql -uroot -p123456

	192.168.4.51:
		]# mysqlbinlog /tmp/db50.000001
		]# mysqlbinlog /tmp/db50.000001 | mysql -uroot  -p123456
		mysql> select  count(*) from db3.user;
		mysql> select  name from db3.user;

		]# mysqlbinlog  --start-position=1087 --stop-position=2094 /tmp/db50.000002 | mysql -uroot -p123456


	练习到 11：33
++++++++++RDBMS1_DAY05++++++++++++++
192.168.4.50  192.168.4.51
一、percona软件介绍
		1.1 软件介绍

		1.2 安装软件
		]# rpm -ivh libev-4.15-1.el6.rf.x86_64.rpm
                ]# yum -y  install percona-xtrabackup-24-2.4.7-1.el7.x86_64.rpm

		[root@host50 ~]# rpm -qa  | grep -i percona
percona-xtrabackup-24-2.4.7-1.el7.x86_64
[root@host50 ~]#
[root@host50 ~]#
[root@host50 ~]# rpm -ql percona-xtrabackup-24
/usr/bin/innobackupex
/usr/bin/xbcloud
/usr/bin/xbcloud_osenv
/usr/bin/xbcrypt
/usr/bin/xbstream
/usr/bin/xtrabackup
/usr/share/doc/percona-xtrabackup-24-2.4.7
/usr/share/doc/percona-xtrabackup-24-2.4.7/COPYING
/usr/share/man/man1/innobackupex.1.gz
/usr/share/man/man1/xbcrypt.1.gz
/usr/share/man/man1/xbstream.1.gz
/usr/share/man/man1/xtrabackup.1.gz
[root@host50 ~]#
[root@host50 ~]# innobackupex --help  ^C
[root@host50 ~]#
[root@host50 ~]# man  innobackupex



二、innobackupex备份与恢复
		2.1 完全备份 192.168.4.50
			]# innobackupex --user root --password 123456 /allbak --no-timestamp

			]# ls /allbak/
			]# scp -r /allbak root@192.168.4.51:/root/
		    完全恢复 192.168.4.51
			]# ls /root/allbak
			]# rpm -ivh  libev-4.15-1.el6.rf.x86_64.rpm
  			]# yum -y  install percona-xtrabackup-24-2.4.7-1.el7.x86_64.rpm
]# systemctl  stop mysqld
]# ls /var/lib/mysql
]# rm -rf /var/lib/mysql/*
]# ls /var/lib/mysql

]# cat /root/allbak/xtrabackup_checkpoints
]# innobackupex --apply-log /root/allbak
]# cat /root/allbak/xtrabackup_checkpoints

]# innobackupex --copy-back /root/allbak
]# ls /var/lib/mysql
]# ls /var/lib/mysql -l
]# chown  -R mysql:mysql /var/lib/mysql

]# systemctl  start mysqld
]# mysql -uroot -p123456
mysql> show databases;
mysql> select * from db3.user2;
mysql> select count(*) from db3.user;

		2.2 恢复单张表 192.168.4.50    (练习到 17：00)
		mysql> delete from db3.user2; 误删除数据操作
具体操作如下：
删除表空间 mysql> alter table db3.user2 discard  tablespace;

导出表信息     ]# innobackupex --apply-log --export  /allbak

拷贝表信息文件到数据库目录下
	       ]# cp /allbak/db3/user2.{cfg,exp,ibderver_id=55
 /var/lib/mysql/db3/
修改表信息文件的所有者及组用户为mysql
	       ]# chown mysql:mysql /var/lib/mysql/db3/user2.*

导入表空间 mysql> alter  table db3.user2   import  tablespace;

删除数据库目录下的表信息文件
	     ]# rm -rf /var/lib/mysql/db3/user2.cfg
             ]# rm -rf /var/lib/mysql/db3/user2.exp

查看表记录 mysql> select  * from db3.user2;

	     2.3 增量备份与恢复
		 增量备份 192.168.4.50
		]# innobackupex --user root --password 123456  /fullbak --no-timestamp
		]# ls /fullbak
		]# cat /fullbak/xtrabackup_checkpoints

		mysql> insert into db3.user2 values(5,"jack"); 插入新记录,多写几条
		]# innobackupex --user root --password 123456 --incremental /new1dir --incremental-basedir=/fullbak  --no-timestamp
		]# ls /new1dir
		]# cat /new1dir/xtrabackup_checkpoints


		mysql> insert into db3.user2 values(6,"jack88"); 插入新记录,多>写几条
		]# innobackupex --user root --password 123456 --incremental /new2dir --incremental-basedir=/new1dir  --no-timestamp
		]# ls /new2dir
		]# cat /new2dir/xtrabackup_checkpoints
		练习到 09：35
		]# scp -r /fullbak  root@192.168.4.51:/root/
  		]# scp -r /new1dir/  root@192.168.4.51:/root/
  		]# scp -r /new2dir/  root@192.168.4.51:/root/
		增量恢复 192.168.4.51
			[root@host51 ~]# systemctl  stop  mysqld
			[root@host51 ~]# rm -rf /var/lib/mysql/*

]# innobackupex --apply-log --redo-only /root/fullbak
]# cat /root/fullbak/xtrabackup_checkpoints

]# innobackupex --apply-log --redo-only /root/fullbak --incremental-dir=/root/new1dir
]#cat /root/fullbak/xtrabackup_checkpoints
]# rm -rf  /root/new1dir

]# innobackupex --apply-log --redo-only /root/fullbak --incremental-dir=/root/new2dir
]# cat /root/fullbak/xtrabackup_checkpoints
]# rm -rf  /root/new2dir

]# innobackupex --copy-back /root/fullbak
]# ls /var/lib/mysql -l
]# chown  -R mysql:mysql /var/lib/mysql

]# systemctl  start mysqld
]# mysql -uroot -p123456
mysql> select  count(*)  from db3.user;

对数据做备份 的命令 cp/tar  mysqldump binlog   innobackupex

备份方式？ 备份时间   备份策略？周一   完全备份      数据存储空间lv
		      00 06 * * 1    /root/allbak.sh
		      00 07 * * 2-7  /root/newbak.sh

			休息到 10：05
++++++++++RDBMS2_DAY01++++++++++++++
	192.168.4.50
	192.168.4.51
	192.168.4.52
	192.168.4.53
	192.168.4.54
	192.168.4.55

一、 MySQL 主从同步

	配置主服务器192.168.4.51
		]# vim /etc/my.cnf
		 [mysqld]
		 log-bin=db51
		 server_id=51
		:wq
		]# systemctl restart mysqld
		]#ls /var/lib/mysql/db51.*

		]# mysql -uroot -p123456
		mysql> grant replication  slave on *.*
			   to  repluser@"%" identified by "123qqq...A";


		mysql> show  master status;


       配置从服务器192.168.4.52
		]# vim /etc/my.cnf
			[mysqld]
			server_id=52
		   :wq
		]# systemctl restart mysqld
	与主服务器数据一致
	51
        ]# mysqldump -uroot -p123456 --master-data  db3  > /db3.sql
	]# scp  /db3.sql  root@192.168.4.52:/root/
	52
	mysql> create database db3;
	]# mysql -uroot -p密码 < /root/db3.sql
	]# vim  /root/db3.sql   查看备份数据对应的日志名及偏移量编号
	]# mysql -uroot -p123qqq...A
	mysql> change master to master_host="192.168.4.51",
		master_user="repluser",master_password="123qqq...A",
		master_log_file="db51.000001",master_log_pos=701;
	mysql> start slave;
	mysql> show slave status\G;
		 Master_Host: 192.168.4.51
		 Slave_IO_Running: Yes
                 Slave_SQL_Running: Yes

	测试配置：
		方法1
			51的数据库管理员在本机创建新数据库和表 插入记录
				mysql> create table db3.user4(name char(10));
				mysql> create database db4 ;
				mysql> create table db4.a(id int);
				mysql> insert into db4.a values(99);
				mysql> insert into db4.a values(99);
				mysql> insert into db4.a values(99);
				mysql> insert into db3.user2 values(99,"jerry");
			52的数据库管理员在本机查看时可以看到同样的库和表及记录
				mysql> select  * from db3.user2;
				mysql> select  * from db4.a;

		方法2
			51的数据库管理员在本机,做用户授权
			   mysql> grant select,insert on  *.*  to
					yaya99@"%"  identified by "123qqq...A";

			50连接主服务器51存和查数据
			  ]# mysql -h192.168.4.51 -uyaya99 -p123qqq...A
			  mysql> insert into db3.user4 values("bob"),("tom"),("lucy");

			51/52 的数据库管理员在本机能够查看到新插入的数据
			  mysql> select  * from  db3.user4;


		练习到 15：40

把从数据库恢复为独立的数据库服务器
		]# rm -rf master.info  relay-log.info  host52-relay-bin.* ^C
		]# systemctl restart mysqld


查看报错信息 mysql> show slave status\G;
Last_IO_Error: Got fatal error 1236 from master when reading data from binary log: 'Misconfigured master - master server_id is 0'


Last_SQL_Error: Error 'Can't create database 'db3'; database exists' on query. Default database: 'db3'. Query: 'create database db3'


Last_IO_Error: error connecting to master 'repluser@192.168.4.51:3306' - retry-time: 60  retries: 136

Last_Error: Error 'Operation ALTER USER failed for 'repluser'@'%'' on query. Default database: ''. Query: 'ALTER USER 'repluser'@'%' IDENTIFIED WITH 'mysql_native_password' AS '*C608BE758B104C08A668562152C943506CFD9BE6''


Last_IO_Error: Fatal error: The slave I/O thread stops because master and slave have equal MySQL server UUIDs; these UUIDs must be different for replication to work.


 Last_IO_Error: Got fatal error 1236 from master when reading data from binary log: 'Client requested master to start replication from position > file size'


stop slave;
start slave;
show slave status\G;
			练习到 15:00

二、主从同步模式
		2.1 结构类型？

		2.2 配置一主多从同步结构
		    要求：把数据库服务器192.168.4.53 也配置为51的从服务器

	            数据库服务器192.168.4.53的配置如下：
			1 验证主服务器51的授权用户
				]# mysql -h192.168.4.51 -urepluser -p123qqq...A
				mysql> exit;
			2 指定server_id
				]# vim /etc/my.cnf
				 [mysqld]
				 server_id=53
			        :wq
				]# systemctl  restart mysqld

			3 确保与主服务器数据一致
				51]# ]# mysqldump -uroot -p123456 --master-data -B db3  db4 > /root/dbtwo.sql
				51]# scp  /root/dbtwo.sql  root@192.168.4.53:/root/

				53]# mysql -uroot -p123qqq...A  < /root/dbtwo.sql
				53]# grep  -i db51  /root/dbtwo.sql
练习到16：31
			4 指定主服务器信息
				mysql> change master to master_host="192.168.4.51",
					master_user="repluser",
    					master_password="123qqq...A",
					master_log_file="db51.000001",
    					master_log_pos=3855;

			5 启动slave程序  mysql> start slave;

			6 查看状态信息   mysql> show slave status\G;
					 Master_Host: 192.168.4.51
					 Slave_IO_Running: Yes
            				 Slave_SQL_Running: Yes

			7 在客户端50 测试配置
				50 访问主服务器51
				    host50 ~]# mysql -h192.168.4.51 -uyaya99 -p123qqq...A
mysql> mysql> insert into db3.user4 values("jerry");
mysql> insert into db3.user4 values("alice");
mysql> insert into db3.user4 values("jack");
mysql> select  * from db3.user4;
				53 数据库管理员登陆可以查看到新插入的数据
mysql> select  * from db3.user4;
+-------+
| name  |
+-------+
| bob   |
| tom   |
| jerry |
| alice |
| jack  |
+-------+
	 	2.3 配置主从从结构
		    2.3.1 配置主服务器53
			]# vim /etc/my.cnf
			   [mysqld]
				server_id=53
				log-bin=db53
			   :wq

			]# systemctl  restart mysqld

			]# mysql -uroot -p密码
			mysql> grant replication slave on  *.*
				to repluser@"%" identified by "123qqq...A";

			mysql> show  master status;
+-------------+----------+--------------+------------------+-------------------+
| File        | Position | Binlog_Do_DB | Binlog_Ignore_DB | Executed_Gtid_Set |
+-------------+----------+--------------+------------------+-------------------+
| db53.000001 |      441 |              |                  |                   |
+-------------+----------+--------------+------------------+-------------------+

		    2.3.2 配置从服务器54

			]# vim /etc/my.cnf
				[mysqld]
				server_id=54
				log-bin=db54
				log_slave_updates
			:wq
			]# systemctl  restart mysqld

			]# mysql -uroot -p密码
mysql> grant replication slave on  *.*  to  repluser2@"%" identified by "123qqq...A";
Query OK, 0 rows affected, 1 warning (0.02 sec)

mysql> show master status;
+-------------+----------+--------------+------------------+-------------------+
| File        | Position | Binlog_Do_DB | Binlog_Ignore_DB | Executed_Gtid_Set |
+-------------+----------+--------------+------------------+-------------------+
| db54.000001 |      442 |              |                  |                   |
+-------------+----------+--------------+------------------+-------------------+
1 row in set (0.00 sec)

mysql> change master to  master_host="192.168.4.53",master_user="repluser",
    -> master_password="123qqq...A",master_log_file="db53.000001",master_log_pos=441;
Query OK, 0 rows affected, 2 warnings (0.22 sec)

mysql> start slave;
Query OK, 0 rows affected (0.03 sec)

mysql> show slave status\G;
		 Slave_IO_Running: Yes
            	Slave_SQL_Running: Yes
		Master_Host: 192.168.4.53

			2.3.3 配置从服务器55
			]# vim /etc/my.cnf
				[mysqld]
 				server_id=55
			:wq

			]# systemctl  restart mysqld
			]# mysql  -uroot -p密码
mysql> change master to  master_host="192.168.4.54",master_user="repluser2",
master_password="123qqq...A",master_log_file="db54.000001",master_log_pos=442;

mysql> start slave ;
mysql> show slave status\G;
	    Master_Host: 192.168.4.54
	    Slave_IO_Running: Yes
            Slave_SQL_Running: Yes

			2.3.4 测试配置
				在主服务器本机创建新库新表插入记录
				在2台从服务器本机可以查看到同样的库表及记录

			53 mysql>
			   create database bbsdb;
			   create table bbsdb.a(id int);
			   insert into bbsdb.a values(99);

			54/55 mysql>
			   select  * from bbsdb.a;

		mysql主从同步结构模式
			一主一从   一主多从  主从从  主主结构

	2.4 复制模式(mysql主从同步复制模式)
		2.4.1 模式分类
		异步复制模式（默认）
		全同步复制模式
		半同步复制模式

		2.4.2 配置半同步复制模式 (在数据服务器54上做配置)
		主53   从主 54    从55
			2.4.2.1 命令行配置（立即生效）
				1  查看数据库服务是否允许动态加载模块（默认允许）
mysql> show  variables  like  'have_dynamic_loading';
+----------------------+-------+
| Variable_name        | Value |
+----------------------+-------+
| have_dynamic_loading | YES   |
+----------------------+-------+
1 row in set (0.03 sec)

				2  安装模块，并查看结果
mysql>  select  plugin_name, plugin_status from  information_schema.plugins  where plugin_name like '%semi%';
Empty set (0.00 sec)

mysql>  install  plugin  rpl_semi_sync_master SONAME "semisync_master.so" ;
Query OK, 0 rows affected (0.07 sec)

mysql> select  plugin_name, plugin_status from  information_schema.plugins  where plugin_name like '%semi%';
+----------------------+---------------+
| plugin_name          | plugin_status |
+----------------------+---------------+
| rpl_semi_sync_master | ACTIVE        |
+----------------------+---------------+
1 row in set (0.00 sec)

mysql>  install  plugin rpl_semi_sync_slave SONAME "semisync_slave.so";
Query OK, 0 rows affected (0.09 sec)

mysql> select  plugin_name, plugin_status from  information_schema.plugins  where plugin_name like '%semi%';
+----------------------+---------------+
| plugin_name          | plugin_status |
+----------------------+---------------+
| rpl_semi_sync_master | ACTIVE        |
| rpl_semi_sync_slave  | ACTIVE        |
+----------------------+---------------+
2 rows in set (0.00 sec)

				3  激活模块，并查看结果

mysql> show  variables  like  "rpl_semi_sync_%_enabled" ;
+------------------------------+-------+
| Variable_name                | Value |
+------------------------------+-------+
| rpl_semi_sync_master_enabled | OFF   |
| rpl_semi_sync_slave_enabled  | OFF   |
+------------------------------+-------+
2 rows in set (0.00 sec)

mysql> set  global rpl_semi_sync_master_enabled=1;
Query OK, 0 rows affected (0.00 sec)

mysql> show  variables  like  "rpl_semi_sync_%_enabled" ;
+------------------------------+-------+
| Variable_name                | Value |
+------------------------------+-------+
| rpl_semi_sync_master_enabled | ON    |
| rpl_semi_sync_slave_enabled  | OFF   |
+------------------------------+-------+
2 rows in set (0.00 sec)

mysql> set  global rpl_semi_sync_slave_enabled=1;
Query OK, 0 rows affected (0.00 sec)

mysql> show  variables  like  "rpl_semi_sync_%_enabled" ;
+------------------------------+-------+
| Variable_name                | Value |
+------------------------------+-------+
| rpl_semi_sync_master_enabled | ON    |
| rpl_semi_sync_slave_enabled  | ON    |
+------------------------------+-------+
2 rows in set (0.01 sec)

mysql>
			2.4.2.2 写进配置文件使其永久有效果
]# vim /etc/my.cnf
[mysqld]
plugin-load="rpl_semi_sync_master=semisync_master.so;rpl_semi_sync_slave=semisync_slave.so"
rpl_semi_sync_master_enabled=1
rpl_semi_sync_slave_enabled=1
:wq

]# mystemctl  restart mysqld

]# mysql -uroot -p123qqq...A
mysql> select  plugin_name, plugin_status from  information_schema.plugins  where plugin_name like '%semi%';
+----------------------+---------------+
| plugin_name          | plugin_status |
+----------------------+---------------+
| rpl_semi_sync_master | ACTIVE        |
| rpl_semi_sync_slave  | ACTIVE        |
+----------------------+---------------+
2 rows in set (0.00 sec)

mysql>  show  variables  like  "rpl_semi_sync_%_enabled";
+------------------------------+-------+
| Variable_name                | Value |
+------------------------------+-------+
| rpl_semi_sync_master_enabled | ON    |
| rpl_semi_sync_slave_enabled  | ON    |
+------------------------------+-------+
2 rows in set (0.00 sec)

mysql>

+++++++++RDBMS2_DAY02++++++++++++++
一、数据读写分离
	1.1 数据读写分离介绍（什么是数据读写分离）
		把客户端访问时的查询请求和写请求分别给不同的数据库服务器处理

	1.2 数据对写分离的优点（为什么要配置数据读写分离）
		减轻主服务器的工作压力，提高从服务器的硬件利用率

	1.3 配置数据读写分离（实现数据读写分离的方式）
		程序实现      程序员写代码实现
		部署服务实现  在服务器部署数据读写分离服务

	1.4 拓扑结构

	1.5 环境准备 （到 11：00  休息10分钟 11：10 讲新课）

		50 做客户端 能够ping 通 57 主机 即可
		克隆1台新的虚拟机 配置ip地址为 192.168.4.57 不需要安装mysql数据库服务
		配置mysql 一主一从 同步结构  51 主服务器  52 从服务器

		拷贝软件给57 主机
]#scp /linux-soft/03/mysql/maxscale-2.1.2-1.rhel.7.x86_64.rpm root@192.168.4.57:/root/

	1.6 配置代理服务 192.168.4.57
		1.6.1 装包（安装提供代理服务的软件包）
			]# rpm -ivh maxscale-2.1.2-1.rhel.7.x86_64.rpm
			]# rpm -ql maxscale

		1.6.2 修改代理服务的主配置文件
			]# cp /etc/maxscale.cnf  /root/
			]# vim /etc/maxscale.cnf
[maxscale]
threads=auto  线程个数

[server1]  定义第1台数据库服务器
type=server
address=192.168.4.51
port=3306
protocol=MySQLBackend

[server2] 定义第2台数据库服务器
type=server
address=192.168.4.52
port=3306
protocol=MySQLBackend

[MySQL Monitor]  定义监控的服务器及监控用户
type=monitor
module=mysqlmon
servers=server1, server2
user=maxscalemon
passwd=123qqq...A
monitor_interval=10000


[Read-Write Service] 定义读写分离服务及路由用户
type=service
router=readwritesplit
servers=server1, server2
user=maxscalerouter
passwd=123qqq...A
max_slave_connections=100%

[MaxAdmin Service] 定义管理服务
type=service
router=cli

[Read-Write Listener]  定义读写分离服务端口号
type=listener
service=Read-Write Service
protocol=MySQLClient
port=4006

[MaxAdmin Listener] 定义管理服务端口号
type=listener
service=MaxAdmin Service
protocol=maxscaled
socket=default
port=4016

		1.6.3 配置数据库服务器（根据主配置文件的设置做配置）
			创建监控用户maxscalemon   123qqq...A
			路由用户maxscalerouter  123qqq...A
配置到14：20
mysql> grant replication slave, replication client on *.*
to  maxscalemon@"%"identified by "123qqq...A";

mysql> grant select  on  mysql.*  to
maxscalerouter@"%" identified by "123qqq...A";

mysql> select user,host from  mysql.user where user like "maxscale%";
+----------------+------+
| user           | host |
+----------------+------+
| maxscalemon    | %    |
| maxscalerouter | %    |
+----------------+------+
2 rows in set (0.00 sec)

		1.6.4 启动代理服务
[root@host57 ~]# maxscale -f /etc/maxscale.cnf
[root@host57 ~]#


		1.6.5 查看服务状态

[root@host57 ~]# netstat  -utnlp  | grep  :4006
tcp6       0      0 :::4006                 :::*                    LISTEN      3769/maxscale
[root@host57 ~]#
[root@host57 ~]# netstat  -utnlp  | grep  :4016
tcp6       0      0 :::4016                 :::*                    LISTEN      3769/maxscale
[root@host57 ~]#
[root@host57 ~]#
[root@host57 ~]# netstat  -utnlp  | grep  maxscale
tcp6       0      0 :::4006                 :::*                    LISTEN      3769/maxscale
tcp6       0      0 :::4016                 :::*                    LISTEN      3769/maxscale
[root@host57 ~]#
[root@host57 ~]# ps -C maxscale
  PID TTY          TIME CMD
 3769 ?        00:00:00 maxscale
[root@host57 ~]#
[root@host57 ~]# ls /var/log/maxscale/
maxscale.log
[root@host57 ~]#

		在代理服务器本机 访问管理服务查看监控信息 练习到14：41
[root@host57 ~]# maxadmin  -uadmin -pmariadb -P4016
MaxScale> list servers
Servers.
-------------------+-----------------+-------+-------------+--------------------
Server             | Address         | Port  | Connections | Status
-------------------+-----------------+-------+-------------+--------------------
server1            | 192.168.4.51    |  3306 |           0 | Master, Running
server2            | 192.168.4.52    |  3306 |           0 | Slave, Running
-------------------+-----------------+-------+-------------+--------------------
MaxScale> exit
		排错 (查看日志文件获取报错信息)
		]# tail  -f  /var/log/maxscale/maxscale.log
		killall -9  maxscale
		rm -rf  /etc/maxscale.cnf
			休息+练习 到 15：30

		1.6.6 测试配置  练习到 15:58
			1 在主服务器上添加访问数据连接用户
				create  database gamedb;
				create table gamedb.a(id int);
				grant select ,insert on gamedb.* to yaya66@"%" identified by "123qqq...A";
			2 客户端连接代理服务57 访问数据
			]# mysql -h192.168.4.57 -P4006 -uyaya66 -p123qqq...A
			mysql> select  * from gamedb.a;
			mysql> insert into gamedb.a values(99);
			mysql> select  * from gamedb.a;
mysql> select  * from gamedb.a;
Empty set (0.00 sec)

mysql>
mysql> insert into gamedb.a values(99);
Query OK, 1 row affected (0.06 sec)
mysql>
mysql> select  * from gamedb.a;
+------+
| id   |
+------+
|   99 |
+------+
1 row in set (0.00 sec)
			3 验证57主机的数据读写分离功能   16:35
				3.1 在从服务器添加新纪录
					insert into gamedb.values(52);
					select  * from mysql> select  * from gamedb.a;
+------+
| id   |
+------+
|   99 |
|   52 |
+------+
				   在主服务器查看记录
                                        select  * from mysql> select  * from gamedb.a;
+------+
| id   |
+------+
|   99 |
+------+ 		       3.2  客户端访问代理服务器57 访问数据
				 ]# mysql -h192.168.4.57 -P4006 -uyaya66 -p123qqq...A
select  * from mysql> select  * from gamedb.a;
+------+
| id   |
+------+
|   99 |
|   52 |
+------+

二、多实例服务
	2.1 相关概念 ？
	2.2 配置mysql多实例
克隆1台新的虚拟机 配置ip地址为 192.168.4.56  不需要安装mysql数据库服务

	        ]# systemctl  stop mysqld
		]# mv /etc/my.cnf  /root/

		1 安装软件  休息到 17：10
]# tar -zxvf mysql-5.7.20-linux-glibc2.12-x86_64.tar.gz
]# ls
Desktop  mysql-5.7.20-linux-glibc2.12-x86_64  mysql-5.7.20-linux-glibc2.12-x86_64.tar.gz
[root@host56 ~]#
[root@host56 ~]# mv mysql-5.7.20-linux-glibc2.12-x86_64 /usr/local/mysql
[root@host56 ~]#
[root@host56 ~]# ls /usr/local/mysql
bin  COPYING  docs  include  lib  man  README  share  support-files
[root@host56 ~]#
[root@host56 ~]#
[root@host56 ~]# ls /usr/local/mysql/bin/
innochecksum                mysql_config_editor        mysqlshow
lz4_decompress              mysqld                     mysqlslap
myisamchk                   mysqld-debug               mysql_ssl_rsa_setup
myisam_ftdump               mysqld_multi               mysqltest_embedded
myisamlog                   mysqld_safe                mysql_tzinfo_to_sql
myisampack                  mysqldump                  mysql_upgrade
my_print_defaults           mysqldumpslow              mysqlxtest
mysql                       mysql_embedded             perror
mysqladmin                  mysqlimport                replace
mysqlbinlog                 mysql_install_db           resolveip
mysqlcheck                  mysql_plugin               resolve_stack_dump
mysql_client_test_embedded  mysqlpump                  zlib_decompress
mysql_config                mysql_secure_installation
[root@host56 ~]#


		2 编辑主配置文件
vim /etc/my.cnf
[mysqld_multi]
mysqld = /usr/local/mysql/bin/mysqld_safe
mysqladmin = /usr/local/mysql/bin/mysqladmin
user = root

[mysqld1]
datadir=/dir1
port=3307
log-error=/dir1/mysqld1.err
pid-file=/dir1/mysqld1.pid
socket=/dir1/mysqld1.socket

[mysqld2]
datadir=/dir2
port=3308
log-error=/dir2/mysqld2.err
pid-file=/dir2/mysqld2.pid
socket=/dir2/mysqld2.socket
:wq
		]# mkdir /dir1
		]# mkdir /dir2

		3 启动服务
]# PATH=/usr/local/mysql/bin:$PATH
]# echo  "export PATH=/usr/local/mysql/bin:$PATH" >> /etc/bashrc
]# yum -y  install libaio*
]# useradd mysql
[root@host56 ~]# mysqld_multi start 1


Installing new database in /dir1

2019-06-17T09:47:25.212724Z 0 [Warning] TIMESTAMP with implicit DEFAULT value is deprecated. Please use --explicit_defaults_for_timestamp server option (see documentation for more details).
2019-06-17T09:47:26.855106Z 0 [Warning] InnoDB: New log files created, LSN=45790
2019-06-17T09:47:27.202552Z 0 [Warning] InnoDB: Creating foreign key constraint system tables.
2019-06-17T09:47:27.373187Z 0 [Warning] No existing UUID has been found, so we assume that this is the first time that this server has been started. Generating a new UUID: ea8f92c9-90e4-11e9-866b-5254005c21a9.
2019-06-17T09:47:27.534300Z 0 [Warning] Gtid table is not ready to be used. Table 'mysql.gtid_executed' cannot be opened.
2019-06-17T09:47:27.534981Z 1 [Note] A temporary password is generated for root@localhost: icUjU=&wo73*
[root@host56 ~]#
[root@host56 ~]# ls /dir1
auto.cnf        ib_logfile0  mysql        mysqld1.socket       sys
ib_buffer_pool  ib_logfile1  mysqld1.err  mysqld1.socket.lock
ibdata1         ibtmp1       mysqld1.pid  performance_schema
[root@host56 ~]#
[root@host56 ~]# mysql -uroot -p'icUjU=&wo73*'
mysql: [Warning] Using a password on the command line interface can be insecure.
ERROR 2002 (HY000): Can't connect to local MySQL server through socket '/tmp/mysql.sock' (2)
[root@host56 ~]#
[root@host56 ~]#
[root@host56 ~]#
[root@host56 ~]#
[root@host56 ~]#
[root@host56 ~]#
[root@host56 ~]# mysql -uroot -p'icUjU=&wo73*' -S /dir1/mysqld1.socket
mysql: [Warning] Using a password on the command line interface can be insecure.
Welcome to the MySQL monitor.  Commands end with ; or \g.
Your MySQL connection id is 3
Server version: 5.7.20

Copyright (c) 2000, 2017, Oracle and/or its affiliates. All rights reserved.

Oracle is a registered trademark of Oracle Corporation and/or its
affiliates. Other names may be trademarks of their respective
owners.

Type 'help;' or '\h' for help. Type '\c' to clear the current input statement.

mysql> alter user root@"localhost" identified by "123456";
Query OK, 0 rows affected (0.00 sec)

mysql> show databases;
+--------------------+
| Database           |
+--------------------+
| information_schema |
| mysql              |
| performance_schema |
| sys                |
+--------------------+
4 rows in set (0.00 sec)

mysql> exit
Bye
[root@host56 ~]# mysql -uroot -p123456 -S /dir1/mysqld1.socket
mysql: [Warning] Using a password on the command line interface can be insecure.
Welcome to the MySQL monitor.  Commands end with ; or \g.
Your MySQL connection id is 4
Server version: 5.7.20 MySQL Community Server (GPL)

Copyright (c) 2000, 2017, Oracle and/or its affiliates. All rights reserved.

Oracle is a registered trademark of Oracle Corporation and/or its
affiliates. Other names may be trademarks of their respective
owners.

Type 'help;' or '\h' for help. Type '\c' to clear the current input statement.

mysql>

mysql> create database db1;
Query OK, 1 row affected (0.00 sec)

mysql> show databases;
+--------------------+
| Database           |
+--------------------+
| information_schema |
| db1                |
| mysql              |
| performance_schema |
| sys                |
+--------------------+
5 rows in set (0.00 sec)

mysql> exit
Bye
[root@host56 ~]# ls /dir1
auto.cnf        ibdata1      ibtmp1       mysqld1.pid          performance_schema
db1             ib_logfile0  mysql        mysqld1.socket       sys
ib_buffer_pool  ib_logfile1  mysqld1.err  mysqld1.socket.lock
[root@host56 ~]#

mysql> create database db1;
Query OK, 1 row affected (0.00 sec)

mysql> show databases;
+--------------------+
| Database           |
+--------------------+
| information_schema |
| db1                |
| mysql              |
| performance_schema |
| sys                |
+--------------------+
5 rows in set (0.00 sec)

mysql> exit
Bye
[root@host56 ~]# ls /dir1
auto.cnf        ibdata1      ibtmp1       mysqld1.pid          performance_schema
db1             ib_logfile0  mysql        mysqld1.socket       sys
ib_buffer_pool  ib_logfile1  mysqld1.err  mysqld1.socket.lock
[root@host56 ~]#

[root@host56 ~]# mysqld_multi start 2


Installing new database in /dir2

2019-06-17T09:55:45.321627Z 0 [Warning] TIMESTAMP with implicit DEFAULT value is deprecated. Please use --explicit_defaults_for_timestamp server option (see documentation for more details).
2019-06-17T09:55:47.146785Z 0 [Warning] InnoDB: New log files created, LSN=45790
2019-06-17T09:55:47.477451Z 0 [Warning] InnoDB: Creating foreign key constraint system tables.
2019-06-17T09:55:47.597242Z 0 [Warning] No existing UUID has been found, so we assume that this is the first time that this server has been started. Generating a new UUID: 14b7b4f3-90e6-11e9-996f-5254005c21a9.
2019-06-17T09:55:47.612981Z 0 [Warning] Gtid table is not ready to be used. Table 'mysql.gtid_executed' cannot be opened.
2019-06-17T09:55:47.613535Z 1 [Note] A temporary password is generated for root@localhost: x/fx9tf<JwO-
[root@host56 ~]# mysql -uroot -p'x/fx9tf<JwO-' -S /dir2/mysqld2.socket
mysql: [Warning] Using a password on the command line interface can be insecure.
Welcome to the MySQL monitor.  Commands end with ; or \g.
Your MySQL connection id is 3
Server version: 5.7.20

Copyright (c) 2000, 2017, Oracle and/or its affiliates. All rights reserved.

Oracle is a registered trademark of Oracle Corporation and/or its
affiliates. Other names may be trademarks of their respective
owners.

Type 'help;' or '\h' for help. Type '\c' to clear the current input statement.

mysql>
mysql> alter user root@"localhost" identified by "123456";
Query OK, 0 rows affected (0.00 sec)

mysql> exit
Bye
[root@host56 ~]# mysql -uroot -p123456 -S /dir2/mysqld2.socket
mysql> create database db2;
Query OK, 1 row affected (0.00 sec)

mysql> show databases;
+--------------------+
| Database           |
+--------------------+
| information_schema |
| db2                |
| mysql              |
| performance_schema |
| sys                |
+--------------------+
5 rows in set (0.00 sec)

mysql> exit
Bye
[root@host56 ~]# ls /dir2
auto.cnf        ib_logfile0  mysqld2.err          performance_schema
db2             ib_logfile1  mysqld2.pid          sys
ib_buffer_pool  ibtmp1       mysqld2.socket
ibdata1         mysql        mysqld2.socket.lock
[root@host56 ~]#

[root@host56 ~]# netstat -utnlp  | grep  mysqld
tcp6       0      0 :::3307                 :::*                    LISTEN      1250/mysql
tcp6       0      0 :::3308                 :::*                    LISTEN      1451/mysql
[root@host56 ~]#

[root@host56 ~]#
[root@host56 ~]# mysqld_multi  --user=root --password=123456  stop 2
[root@host56 ~]#
[root@host56 ~]# netstat -utnlp  | grep  mysqld
tcp6       0      0 :::3307                 :::*                    LISTEN      1250/mysql
[root@host56 ~]#

++++++++++++++++++++++++++++++++++++++++多实例启动失败解决办法+
1 检查配置的编写 及数据库目录是否创建
2 killall  -9  mysqld
3 rm -rf /dir1  ;  rf -rf /dir2
4 重新执行启动实例的命令


++++++++++++++RDBMS2_DAY03----配置数据分片服务器
一、相关概念：
		1.1 什么是数据分片？


]# scp Mycat-server-1.6-RELEASE-20161028204710-linux.tar.gz  root@192.168.4.56:/root/

		1.2 部署MyCAT服务
			1 安装提供服务的软件包
]# yum  -y  install  java-1.8.0-openjdk

已安装:
  java-1.8.0-openjdk.x86_64 1:1.8.0.161-2.b14.el7

作为依赖被安装:
  alsa-lib.x86_64 0:1.1.4.1-2.el7
  copy-jdk-configs.noarch 0:3.3-2.el7
  giflib.x86_64 0:4.1.6-9.el7
  java-1.8.0-openjdk-headless.x86_64 1:1.8.0.161-2.b14.el7
  javapackages-tools.noarch 0:3.4.1-11.el7
  libXtst.x86_64 0:1.2.3-1.el7
  libxslt.x86_64 0:1.1.28-5.el7
  lksctp-tools.x86_64 0:1.0.17-2.el7
  python-javapackages.noarch 0:3.4.1-11.el7
  python-lxml.x86_64 0:3.2.1-4.el7
  tzdata-java.noarch 0:2018c-1.el7

完毕！

[root@mycat56 ~]# which java
/usr/bin/java

[root@mycat56 ~]# java -version
openjdk version "1.8.0_161"
OpenJDK Runtime Environment (build 1.8.0_161-b14)
OpenJDK 64-Bit Server VM (build 25.161-b14, mixed mode)
[root@mycat56 ~]#


tar -zxvf Mycat-server-1.6-RELEASE-20161028204710-linux.tar.gz
[root@mycat56 ~]# ls Mycat-server-1.6-RELEASE-20161028204710-linux.tar.gz
Mycat-server-1.6-RELEASE-20161028204710-linux.tar.gz
[root@mycat56 ~]# tar -zxvf Mycat-server-1.6-RELEASE-20161028204710-linux.tar.gz
mycat/bin/wrapper-linux-ppc-64
mycat/bin/wrapper-linux-x86-64
mycat/bin/wrapper-linux-x86-32
mycat/bin/mycat
mycat/lib/zookeeper-3.4.6.jar
mycat/lib/jline-0.9.94.jar
mycat/lib/ehcache-core-2.6.11.jar
mycat/lib/log4j-1.2.17.jar
mycat/lib/fastjson-1.2.12.jar
mycat/lib/curator-client-2.11.0.jar
mycat/lib/joda-time-2.9.3.jar
mycat/lib/log4j-slf4j-impl-2.5.jar
mycat/lib/libwrapper-linux-x86-32.so
mycat/lib/netty-3.7.0.Final.jar
mycat/lib/druid-1.0.26.jar
mycat/lib/log4j-api-2.5.jar
mycat/lib/mapdb-1.0.7.jar
mycat/lib/slf4j-api-1.6.1.jar
mycat/lib/univocity-parsers-2.2.1.jar
mycat/lib/hamcrest-core-1.3.jar
mycat/lib/Mycat-server-1.6-RELEASE.jar
mycat/lib/objenesis-1.2.jar
mycat/lib/leveldb-api-0.7.jar
mycat/lib/hamcrest-library-1.3.jar
mycat/lib/wrapper.jar
mycat/lib/commons-lang-2.6.jar
mycat/lib/reflectasm-1.03.jar
mycat/lib/mongo-java-driver-2.11.4.jar
mycat/lib/guava-19.0.jar
mycat/lib/curator-recipes-2.11.0.jar
mycat/lib/curator-framework-2.11.0.jar
mycat/lib/libwrapper-linux-ppc-64.so
mycat/lib/log4j-core-2.5.jar
mycat/lib/leveldb-0.7.jar
mycat/lib/sequoiadb-driver-1.12.jar
mycat/lib/mysql-binlog-connector-java-0.4.1.jar
mycat/lib/kryo-2.10.jar
mycat/lib/jsr305-2.0.3.jar
mycat/lib/commons-collections-3.2.1.jar
mycat/lib/disruptor-3.3.4.jar
mycat/lib/log4j-1.2-api-2.5.jar
mycat/lib/velocity-1.7.jar
mycat/lib/libwrapper-linux-x86-64.so
mycat/lib/dom4j-1.6.1.jar
mycat/lib/minlog-1.2.jar
mycat/lib/asm-4.0.jar
mycat/conf/wrapper.conf
mycat/conf/
mycat/conf/zkconf/
mycat/conf/zkdownload/
mycat/conf/sequence_time_conf.properties
mycat/conf/sharding-by-enum.txt
mycat/conf/migrateTables.properties
mycat/conf/zkconf/sequence_time_conf.properties
mycat/conf/zkconf/sharding-by-enum.txt
mycat/conf/zkconf/ehcache.xml
mycat/conf/zkconf/index_to_charset.properties
mycat/conf/zkconf/partition-range-mod.txt
mycat/conf/zkconf/sequence_db_conf.properties
mycat/conf/zkconf/sequence_time_conf-mycat_fz_01.properties
mycat/conf/zkconf/cacheservice.properties
mycat/conf/zkconf/partition-hash-int.txt
mycat/conf/zkconf/autopartition-long.txt
mycat/conf/zkconf/server-mycat_fz_01.xml
mycat/conf/zkconf/auto-sharding-long.txt
mycat/conf/zkconf/rule.xml
mycat/conf/zkconf/auto-sharding-rang-mod.txt
mycat/conf/zkconf/sequence_distributed_conf.properties
mycat/conf/zkconf/sequence_distributed_conf-mycat_fz_01.properties
mycat/conf/zkconf/sequence_conf.properties
mycat/conf/zkconf/schema.xml
mycat/conf/zkconf/server.xml
mycat/conf/ehcache.xml
mycat/conf/index_to_charset.properties
mycat/conf/partition-range-mod.txt
mycat/conf/sequence_db_conf.properties
mycat/conf/cacheservice.properties
mycat/conf/partition-hash-int.txt
mycat/conf/autopartition-long.txt
mycat/conf/auto-sharding-long.txt
mycat/conf/rule.xml
mycat/conf/auto-sharding-rang-mod.txt
mycat/conf/sequence_distributed_conf.properties
mycat/conf/sequence_conf.properties
mycat/conf/myid.properties
mycat/conf/schema.xml
mycat/conf/zkdownload/auto-sharding-long.txt
mycat/conf/server.xml
mycat/version.txt
mycat/conf/log4j2.xml
mycat/bin/init_zk_data.sh
mycat/bin/startup_nowrap.sh
mycat/bin/dataMigrate.sh
mycat/bin/rehash.sh
mycat/logs/
mycat/catlet/
[root@mycat56 ~]#

[root@mycat56 ~]# mv mycat /usr/local/
[root@mycat56 ~]# ls /usr/local/
bin  games    lib    libexec  mysql  share
etc  include  lib64  mycat    sbin   src
[root@mycat56 ~]#
[root@mycat56 ~]# ls /usr/local/mycat/
bin  catlet  conf  lib  logs  version.txt
[root@mycat56 ~]#

			2 修改配置文件
				2.1  ]# vim /usr/local/mycat/conf/server.xml

				2.2  配置数据分片
[root@mycat56 conf]# wc -l schema.xml
77 /root/schema.xml
]# sed -i  '56,77d' schema.xml
]# sed -i  '39,42d' schema.xml
]# sed -i  '16,18d' schema.xml
[root@mycat56 conf]# wc -l schema.xml
48 schema.xml

]# vim /usr/local/mycat/conf/schema.xml
<mycat  >
	<schema >  定义数据分片存储的表
		<table> ...</table>
		<table    />
	</schema>
	<datanode  ...... /> 定义数据库主机名及存储数据的库

	<datahost>......</datahost> 定义数据库服务器ip
</myscat>
			3 配置数据库服器（根据配置文件的设置，配置数据库服务器）
				3.1	创建存储数据库
host55 ~]# mysql -uroot -p123qqq...A -e  "create database db3"
host54 ~]# mysql -uroot -p123qqq...A -e  "create database db2"
host53 ~]# mysql -uroot -p123qqq...A -e  "create database db1"
				3.2	用户授权
host53mysql> grant all on  *.* to adminplj@"%" identified by "123qqq...A" ;
host54mysql> grant all on  *.* to adminplj@"%" identified by "123qqq...A" ;
host55mysql> grant all on  *.* to adminplj@"%" identified by "123qqq...A" ;

			4 启动MyCAT服务，并查看服务信息
4.1 测试数据库服务器的授权用户adminplj
      ]# yum  -y   install mariadb

  318  mysql -h192.168.4.53 -uadminplj -p123qqq...A
  319  mysql -h192.168.4.54 -uadminplj -p123qqq...A
  320  mysql -h192.168.4.55 -uadminplj -p123qqq...A

4.2 启动服务
]# /usr/local/mycat/bin/mycat  start
[root@mycat56 conf]# netstat  -utnlp  | grep  :8066
[root@mycat56 conf]#
[root@mycat56 conf]# ls /usr/local/mycat/logs/
[root@mycat56 conf]#

[root@mycat56 conf]# /usr/local/mycat/bin/mycat  start
Starting Mycat-server...
[root@mycat56 conf]#

4.3 查看状态
[root@mycat56 conf]# netstat  -utnlp  | grep  :8066
tcp6       0      0 :::8066                 :::*                    LISTEN      1125/java
[root@mycat56 conf]#
[root@mycat56 conf]# ls /usr/local/mycat/logs/
mycat.log  mycat.pid  wrapper.log

[root@mycat56 conf]#
[root@mycat56 conf]# ps -C java
  PID TTY          TIME CMD
 1125 ?        00:00:01 java
[root@mycat56 conf]#


NFO   | jvm 1    | 2019/06/18 15:20:07 | Caused by: io.mycat.config.util.ConfigException: dataNode dn3 reference dataHost:localhost55  not exists!

			5 测试配置
				5.1 客户端连接分片服务器访问数据
				]# mysql -h192.168.4.56 -P8066 -uroot -p123456
[root@host50 ~]# mysql -h192.168.4.56 -P8066 -uroot -p123456
mysql: [Warning] Using a password on the command line interface can be insecure.
Welcome to the MySQL monitor.  Commands end with ; or \g.
Your MySQL connection id is 1
Server version: 5.6.29-mycat-1.6-RELEASE-20161028204710 MyCat Server (OpenCloundDB)

Copyright (c) 2000, 2016, Oracle and/or its affiliates. All rights reserved.

Oracle is a registered trademark of Oracle Corporation and/or its
affiliates. Other names may be trademarks of their respective
owners.

Type 'help;' or '\h' for help. Type '\c' to clear the current input statement.

mysql>
mysql> show databases;
+----------+
| DATABASE |
+----------+
| TESTDB   |
+----------+
1 row in set (0.01 sec)

mysql> use TESTDB;
Reading table information for completion of table and column names
You can turn off this feature to get a quicker startup with -A

Database changed
mysql> show tables;
+------------------+
| Tables in TESTDB |
+------------------+
| company          |
| customer         |
| customer_addr    |
| employee         |
| goods            |
| hotnews          |
| orders           |
| order_items      |
| travelrecord     |
+------------------+
9 rows in set (0.00 sec)

mysql> desc company;
ERROR 1146 (42S02): Table 'db3.company' doesn't exist
mysql>

	3. 存储数据（sharding-by-intfile）
		3.1 修改算法配置文件
]# vim /usr/local/mycat/conf/partition-hash-int.txt
                        10000=0    //数据存储到dn1库里
                        10010=1	  //数据存储到dn2库里
	           	10020=2    //数据存储到dn3库里

:wq
		3.2 重启mycat服务
[root@mycat56 conf]# /usr/local/mycat/bin/mycat  stop
Stopping Mycat-server...
Stopped Mycat-server.
[root@mycat56 conf]# netstat -utnlp  | grep  :8066
[root@mycat56 conf]#
[root@mycat56 conf]# /usr/local/mycat/bin/mycat  start
Starting Mycat-server...
[root@mycat56 conf]#
[root@mycat56 conf]# netstat -utnlp  | grep  :8066
tcp6       0      0 :::8066                 :::*                    LISTEN      1364/java
[root@mycat56 conf]#

		3.3 客户端连接mycat服务器，测试分片存储
			建表
]# mysql -h192.168.4.56 -P8066 -uroot -p123456
mysql> use TESTDB;
mysql> create table  employee( ID int primary key , sharding_id int,
    -> name char(15) , age  int );
Query OK, 0 rows affected (0.68 sec)

mysql> desc employee;
+-------------+----------+------+-----+---------+-------+
| Field       | Type     | Null | Key | Default | Extra |
+-------------+----------+------+-----+---------+-------+
| ID          | int(11)  | NO   | PRI | NULL    |       |
| sharding_id | int(11)  | YES  |     | NULL    |       |
| name        | char(15) | YES  |     | NULL    |       |
| age         | int(11)  | YES  |     | NULL    |       |
+-------------+----------+------+-----+---------+-------+
4 rows in set (0.00 sec)

mysql>

mysql> mysql> show tables; (53/54/55)
+---------------+
| Tables_in_db2 |
+---------------+
| employee      |
+---------------+
1 row in set (0.00 sec)

mysql>

			插入记录



Query OK, 3 rows affected (0.07 sec)
Records: 3  Duplicates: 0  Warnings: 0

insert into employee(ID,sharding_id,name,age) values  (1,10000,"bob2",19), (2,10010,"tom2",21), (3,10020,"lucy2",16);


mysql> select  * from employee;
+----+-------------+------+------+
| ID | sharding_id | name | age  |
+----+-------------+------+------+
|  1 |       10000 | bob  |   19 |
|  2 |       10010 | tom  |   21 |
|  3 |       10020 | lucy |   16 |
+----+-------------+------+------+
3 rows in set (0.06 sec)


mysql> insert into employee(ID,sharding_id,name,age)
values
(4,10000,"bob2",19),
(5,10000,"tom2",21),
(6,10000,"lucy2",16);

>
mysql> select  * from employee;                                              +----+-------------+-------+------+
| ID | sharding_id | name  | age  |
+----+-------------+-------+------+
|  1 |       10000 | bob   |   19 |
|  4 |       10000 | bob2  |   19 |
|  5 |       10000 | tom2  |   21 |
|  6 |       10000 | lucy2 |   16 |
|  3 |       10020 | lucy  |   16 |
|  2 |       10010 | tom   |   21 |
+----+-------------+-------+------+
6 rows in set (0.00 sec)

mysql>

mysql> mysql> select  * from db1.employee; (192.168.4.51)
+----+-------------+-------+------+
| ID | sharding_id | name  | age  |
+----+-------------+-------+------+
|  1 |       10000 | bob   |   19 |
|  4 |       10000 | bob2  |   19 |
|  5 |       10000 | tom2  |   21 |
|  6 |       10000 | lucy2 |   16 |
+----+-------------+-------+------+
4 rows in set (0.00 sec)

mysql>
			求模法分片规则的使用 mod-long
				根据字段值与设定的数字求模结果存储数据
	]#vim  schema.xml
	<table name="hotnews"  dataNode="dn1,dn2,dn3"
                           rule="mod-long" />

	:wq

	]#vim rule.xml
	<tableRule name="mod-long">
                <rule>
                        <columns>num</columns>
                        <algorithm>mod-long</algorithm>
                </rule>
        </tableRule>

	<function name="mod-long" class="io.mycat.route.function.PartitionByMod">
                <!-- how many data nodes -->
                <property name="count">3</property>
        </function>
	:wq


[root@mycat56 ~]# /usr/local/mycat/bin/mycat  stop
Stopping Mycat-server...
Stopped Mycat-server.
[root@mycat56 ~]#
[root@mycat56 ~]# netstat -utnlp  | grep  :8066
[root@mycat56 ~]# ps -C java
  PID TTY          TIME CMD
[root@mycat56 ~]#
[root@mycat56 ~]# /usr/local/mycat/bin/mycat  start
Starting Mycat-server...
[root@mycat56 ~]#
[root@mycat56 ~]# netstat -utnlp  | grep  :8066
tcp6       0      0 :::8066                 :::*                    LISTEN      2253/java
[root@mycat56 ~]# ps -C java
  PID TTY          TIME CMD
 2253 ?        00:00:01 java
[root@mycat56 ~]#
		在客户端验证求模分片规则

]# mysql  -h192.168.4.56 -P8066 -uroot -p123456
mysql> use TESTDB;
mysql> desc hotnews;
ERROR 1146 (42S02): Table 'db2.hotnews' doesn't exist     休息到10：00

mysql> create table hotnews(num int ,title char(30),comment char(200));
Query OK, 0 rows affected (0.79 sec)

mysql> desc hotnews;
+---------+-----------+------+-----+---------+-------+
| Field   | Type      | Null | Key | Default | Extra |
+---------+-----------+------+-----+---------+-------+
| num     | int(11)   | YES  |     | NULL    |       |
| title   | char(30)  | YES  |     | NULL    |       |
| comment | char(200) | YES  |     | NULL    |       |
+---------+-----------+------+-----+---------+-------+
3 rows in set (0.00 sec)
mysql> insert into hotnews(num,title,comment)values(9,"sc","xxxxx");
Query OK, 1 row affected (0.11 sec)

mysql> insert into hotnews(num,title,comment)values(10,"xx","haha");
Query OK, 1 row affected (0.05 sec)

mysql> insert into hotnews(num,title,comment)values(11,"yy","zz");
Query OK, 1 row affected (0.03 sec)

mysql> select  * from hotnews;
+------+-------+---------+
| num  | title | comment |
+------+-------+---------+
|   11 | yy    | zz      |
|   10 | xx    | haha    |
|    9 | sc    | xxxxx   |
+------+-------+---------+
3 rows in set (0.01 sec)

mysql>
ql>  select  * from db1.hotnews;
+------+-------+---------+
| num  | title | comment |
+------+-------+---------+
|    9 | sc    | xxxxx   |
+------+-------+---------+
1 row in set (0.00 sec)

mysql>
mysql>  select  * from db2.hotnews;
+------+-------+---------+
| num  | title | comment |
+------+-------+---------+
|   10 | xx    | haha    |
+------+-------+---------+
1 row in set (0.00 sec)

mysql>
mysql> select  * from db3.hotnews;
+------+-------+---------+
| num  | title | comment |
+------+-------+---------+
|   11 | yy    | zz      |
+------+-------+---------+
1 row in set (0.00 sec)

mysql>
			添加新库新表

[root@mycat56 ~]# vim /usr/local/mycat/conf/server.xml
<user name="root">
                <property name="password">123456</property>
                <property name="schemas">TESTDB,BBSDB</property>

:wq

[root@mycat56 ~]# vim /usr/local/mycat/conf/schema.xml
<mycat:schema xmlns:mycat="http://io.mycat/">
        <schema name="BBSDB" checkSQLschema="false" sqlMaxLimit="100">
          <table name="company" primaryKey="ID" type="global" dataNode="dn1,dn2,dn3" />

          <table name="employee" primaryKey="ID" dataNode="dn1,dn2,dn3"
                           rule="sharding-by-intfile" />
        </schema>

:wq

[root@mycat56 ~]# /usr/local/mycat/bin/mycat  stop
Stopping Mycat-server...
Stopped Mycat-server.
[root@mycat56 ~]# ps -C java
  PID TTY          TIME CMD
[root@mycat56 ~]#
[root@mycat56 ~]# netstat -utnlp  | grep  :8066
[root@mycat56 ~]#
[root@mycat56 ~]# /usr/local/mycat/bin/mycat  start
Starting Mycat-server...
[root@mycat56 ~]#
[root@mycat56 ~]# netstat -utnlp  | grep  :8066
tcp6       0      0 :::8066                 :::*                    LISTEN      2496/java
[root@mycat56 ~]#
[root@mycat56 ~]# ps -C mycat
  PID TTY          TIME CMD
[root@mycat56 ~]# ps -C java
  PID TTY          TIME CMD
 2496 ?        00:00:01 java
[root@mycat56 ~]#
			客户端连接mycat服务器 访问数据

[root@host50 ~]# mysql -h192.168.4.56 -P8066 -uroot -p123456
mysql: [Warning] Using a password on the command line interface can be insecure.
Welcome to the MySQL monitor.  Commands end with ; or \g.
Your MySQL connection id is 1
Server version: 5.6.29-mycat-1.6-RELEASE-20161028204710 MyCat Server (OpenCloundDB)

Copyright (c) 2000, 2016, Oracle and/or its affiliates. All rights reserved.

Oracle is a registered trademark of Oracle Corporation and/or its
affiliates. Other names may be trademarks of their respective
owners.

Type 'help;' or '\h' for help. Type '\c' to clear the current input statement.

mysql> show databases;
+----------+
| DATABASE |
+----------+
| BBSDB    |
| TESTDB   |
+----------+
2 rows in set (0.00 sec)

mysql> use BBSDB;
Reading table information for completion of table and column names
You can turn off this feature to get a quicker startup with -A

Database changed
mysql> show tables;
+-----------------+
| Tables in BBSDB |
+-----------------+
| company         |
| employee        |
+-----------------+
2 rows in set (0.00 sec)
mysql> desc company;
ERROR 1146 (42S02): Table 'db1.company' doesn't exist
mysql>
mysql> create table company(ID int primary key,name char(50),addr char(50));
Query OK, 0 rows affected (1.01 sec)

mysql> desc company;
+-------+----------+------+-----+---------+-------+
| Field | Type     | Null | Key | Default | Extra |
+-------+----------+------+-----+---------+-------+
| ID    | int(11)  | NO   | PRI | NULL    |       |
| name  | char(50) | YES  |     | NULL    |       |
| addr  | char(50) | YES  |     | NULL    |       |
+-------+----------+------+-----+---------+-------+
3 rows in set (0.00 sec)

mysql> insert into company(ID,name,addr)values(1,"tarena","beijing");
Query OK, 1 row affected (0.10 sec)

mysql> insert into company(ID,name,addr)values(2,"tmall","beijing");
Query OK, 1 row affected (0.15 sec)

mysql> insert into company(ID,name,addr)values(3,"sina","beijing");
Query OK, 1 row affected (0.13 sec)

mysql> select  * from company;
+----+--------+---------+
| ID | name   | addr    |
+----+--------+---------+
|  1 | tarena | beijing |
|  2 | tmall  | beijing |
|  3 | sina   | beijing |
+----+--------+---------+
3 rows in set (0.04 sec)

mysql>

在数据库服务器本机查看

mysql> desc db1.company;
+-------+----------+------+-----+---------+-------+
| Field | Type     | Null | Key | Default | Extra |
+-------+----------+------+-----+---------+-------+
| ID    | int(11)  | NO   | PRI | NULL    |       |
| name  | char(50) | YES  |     | NULL    |       |
| addr  | char(50) | YES  |     | NULL    |       |
+-------+----------+------+-----+---------+-------+
3 rows in set (0.00 sec)

mysql> select  * from db1.company;
+----+--------+---------+
| ID | name   | addr    |
+----+--------+---------+
|  1 | tarena | beijing |
|  2 | tmall  | beijing |
|  3 | sina   | beijing |
+----+--------+---------+
3 rows in set (0.00 sec)

mysql>

++++++++++++++++++++RDBMS2_day04 部署MHA集群（mysql）
集群：多台服务器一起提供相同的服务
集群分类：LB   HA  HPC
集群服务软件：LVS Haproxy nginx   keepalived

一、MHA集群概述
	1.1 MHA介绍

二、部署MHA集群
	2.1 、集群环境准备

准备3台新的数据库服务器 192.168.4.51 192.168.4.52 192.168.4.53
准备2台新的虚拟机 配置ip地址是 192.168.4.57即可 ip地址是 192.168.4.50即可


1、数据库服务器 192.168.4.51 192.168.4.52 192.168.4.53 彼此之间可以root 用户无密码登陆

2、主机192.168.4.57 可以root 用户无密码登陆数据库服务器 192.168.4.51 192.168.4.52 192.168.4.53

[root@host57 ~]# ssh-keygen
Generating public/private rsa key pair.
Enter file in which to save the key (/root/.ssh/id_rsa):
Enter passphrase (empty for no passphrase):
Enter same passphrase again:
Your identification has been saved in /root/.ssh/id_rsa.
Your public key has been saved in /root/.ssh/id_rsa.pub.
The key fingerprint is:
SHA256:JjmS3YP6UyZNK6PuLiUEPhpUi3c4Soy/DETeYndmk2Y root@host57
The key's randomart image is:
+---[RSA 2048]----+
| ...             |
|*.o o .          |
|+X B E           |
|=+* Oo.+.        |
|o+o o *oS.       |
|.o...o++=.       |
|  oo.. *         |
|  . ...          |
|   =+ ..         |
+----[SHA256]-----+
[root@host57 ~]# ssh-copy-id




[root@host57 ~]# ssh-copy-id root@192.168.4.51
/usr/bin/ssh-copy-id: INFO: Source of key(s) to be installed: "/root/.ssh/id_rsa.pub"
/usr/bin/ssh-copy-id: INFO: attempting to log in with the new key(s), to filter out any that are already installed
/usr/bin/ssh-copy-id: INFO: 1 key(s) remain to be installed -- if you are prompted now it is to install the new keys
root@192.168.4.51's password:

Number of key(s) added: 1

Now try logging into the machine, with:   "ssh 'root@192.168.4.51'"
and check to make sure that only the key(s) you wanted were added.

[root@host57 ~]# ssh-copy-id root@192.168.4.52
/usr/bin/ssh-copy-id: INFO: Source of key(s) to be installed: "/root/.ssh/id_rsa.pub"
/usr/bin/ssh-copy-id: INFO: attempting to log in with the new key(s), to filter out any that are already installed
/usr/bin/ssh-copy-id: INFO: 1 key(s) remain to be installed -- if you are prompted now it is to install the new keys
root@192.168.4.52's password:

Number of key(s) added: 1

Now try logging into the machine, with:   "ssh 'root@192.168.4.52'"
and check to make sure that only the key(s) you wanted were added.

[root@host57 ~]# ssh-copy-id root@192.168.4.53
/usr/bin/ssh-copy-id: INFO: Source of key(s) to be installed: "/root/.ssh/id_rsa.pub"
/usr/bin/ssh-copy-id: INFO: attempting to log in with the new key(s), to filter out any that are already installed
/usr/bin/ssh-copy-id: INFO: 1 key(s) remain to be installed -- if you are prompted now it is to install the new keys
root@192.168.4.53's password:

Number of key(s) added: 1

Now try logging into the machine, with:   "ssh 'root@192.168.4.53'"
and check to make sure that only the key(s) you wanted were added.

[root@host57 ~]#




3、在主机192.168.4.51/52/53/57  yum -y  install perl-*

4 配置一主多从同步结构 192.168.4.51 是主数据库服务器
  192.168.4.52 和 192.168.4.53 做从服务器。

[root@host52 ~]# mysql -uroot -p123qqq...A -e "show slave status\G" | grep -i yes
mysql: [Warning] Using a password on the command line interface can be insecure.
             Slave_IO_Running: Yes
            Slave_SQL_Running: Yes
[root@host52 ~]#
[root@host52 ~]#
[root@host52 ~]# mysql -uroot -p123qqq...A -e "show slave status\G" | grep -i 192
mysql: [Warning] Using a password on the command line interface can be insecure.
                  Master_Host: 192.168.4.51
[root@host52 ~]#
[root@host52 ~]#
[root@host52 ~]#
[root@host52 ~]# mysql -uroot -p123qqq...A -e "show slave status\G" | grep -i repluser
mysql: [Warning] Using a password on the command line interface can be insecure.
                  Master_User: repluser



5 准备软件包
]# scp -r mha-soft-student  root@192.168.4.57:/root/
]# scp -r mha-soft-student  root@192.168.4.51:/root/
]# scp -r mha-soft-student  root@192.168.4.52:/root/
]# scp -r mha-soft-student  root@192.168.4.53:/root/

在主机57/51/52/53 执行安装
]# cd mha-soft-student
]# yum -y  install  perl-*
]# rpm -qa  | grep  -i perl | wc -l


学习组的组长通知组员准备集群环境
		休息到 10:00


[root@host57 mha-soft-student]# rpm -ivh  mha4mysql-node-0.56-0.el6.noarch.rpm
准备中...                          ################################# [100%]
正在升级/安装...
   1:mha4mysql-node-0.56-0.el6        ################################# [100%]
[root@host57 mha-soft-student]#
[root@host57 mha-soft-student]# rpm -qa | grep  mha
mha4mysql-node-0.56-0.el6.noarch
[root@host57 mha-soft-student]#

[root@host57 mha-soft-student]# tar -zxvf mha4mysql-manager-0.56.tar.gz
mha4mysql-manager-0.56/
mha4mysql-manager-0.56/debian/
mha4mysql-manager-0.56/debian/control
mha4mysql-manager-0.56/debian/copyright
.......


[root@host57 mha-soft-student]# ls
app1.cnf            mha4mysql-manager-0.56         mha4mysql-node-0.56-0.el6.noarch.rpm
master_ip_failover  mha4mysql-manager-0.56.tar.gz
[root@host57 mha-soft-student]# cd mha4mysql-manager-0.56/
[root@host57 mha4mysql-manager-0.56]# ls
AUTHORS  COPYING  inc  Makefile.PL  META.yml  rpm      t
bin      debian   lib  MANIFEST     README    samples  tests
[root@host57 mha4mysql-manager-0.56]#
[root@host57 mha4mysql-manager-0.56]# perl Makefile.PL
*** Module::AutoInstall version 1.03
*** Checking for Perl dependencies...
[Core Features]
- DBI                   ...loaded. (1.627)
- DBD::mysql            ...loaded. (4.023)
- Time::HiRes           ...loaded. (1.9725)
- Config::Tiny          ...loaded. (2.14)
- Log::Dispatch         ...loaded. (2.41)
- Parallel::ForkManager ...loaded. (1.18)
- MHA::NodeConst        ...loaded. (0.56)
*** Module::AutoInstall configuration finished.
Checking if your kit is complete...
Looks good
Writing Makefile for mha4mysql::manager
Writing MYMETA.yml and MYMETA.json
[root@host57 mha4mysql-manager-0.56]#  make
[root@host57 mha4mysql-manager-0.56]#  make install


[root@host57 mha4mysql-manager-0.56]# ls /root/perl5/bin
masterha_check_repl    masterha_conf_host       masterha_master_switch
masterha_check_ssh     masterha_manager         masterha_secondary_check
masterha_check_status  masterha_master_monitor  masterha_stop

 		编写主配置文件
]# mkdir /etc/mha
]# cp mha4mysql-manager-0.56/samples/conf/app1.cnf  /etc/mha/
]# vim  mkdir /etc/mha/app1.cnf
[server default]
manager_workdir=/etc/mha
manager_log=/etc/mha/manager.log
master_ip_failover_script=/etc/mha/master_ip_failover
ssh_user=root
ssh_port=22
repl_user=repluser
repl_password=123qqq...A
user=root
password=123qqq...A
[server1]
hostname=192.168.4.51
port=3306
candidate_master=1
[server2]
hostname=192.168.4.52
port=3306
candidate_master=1
[server3]
hostname=192.168.4.53
port=3306
candidate_master=1
:wq


创建故障切换脚本
[root@host57 ~]# cp mha-soft-student/master_ip_failover /etc/mha/
[root@host57 ~]# vim +35 /etc/mha/master_ip_failover
my $vip = '192.168.4.100/24';  # Virtual IP
my $key = "1";
my $ssh_start_vip = "/sbin/ifconfig eth0:$key $vip";
my $ssh_stop_vip = "/sbin/ifconfig eth0:$key down";
:wq
[root@host57 ~]# chmod +x  /etc/mha/master_ip_failover


在主服务器51  部署VIP地址
host51]#
[root@host51 ~]# ifconfig  eth0:1
eth0:1: flags=4163<UP,BROADCAST,RUNNING,MULTICAST>  mtu 1500
        ether 52:54:00:d8:10:d7  txqueuelen 1000  (Ethernet)

[root@host51 ~]# ifconfig  eth0:1  192.168.4.100

[root@host51 ~]# ifconfig  eth0:1
eth0:1: flags=4163<UP,BROADCAST,RUNNING,MULTICAST>  mtu 1500
        inet 192.168.4.100  netmask 255.255.255.0  broadcast 192.168.4.255
        ether 52:54:00:d8:10:d7  txqueuelen 1000  (Ethernet)


ot@host50 ~]# ping -c 2  192.168.4.100
PING 192.168.4.100 (192.168.4.100) 56(84) bytes of data.
64 bytes from 192.168.4.100: icmp_seq=1 ttl=255 time=0.169 ms
64 bytes from 192.168.4.100: icmp_seq=2 ttl=255 time=0.183 ms

--- 192.168.4.100 ping statistics ---
2 packets transmitted, 2 received, 0% packet loss, time 999ms
rtt min/avg/max/mdev = 0.169/0.176/0.183/0.007 ms
[root@host50 ~]#


		2 配置数据节点(192.168.4.51/52/53)
			2.1 安装mha_node软件包
]# cd mha-soft-student/
]# yum -y  install  mha4mysql-node-0.56-0.el6.noarch.rpm

			2.2 添加授权用户
				2.2.1添加从服务器同步数据连接用户
		[root@host51 ~]# mysql -uroot -p123qqq...A -e 'show grants for repluser@"%"'
mysql: [Warning] Using a password on the command line interface can be insecure.
+--------------------------------------------------+
| Grants for repluser@%                            |
+--------------------------------------------------+
| GRANT REPLICATION SLAVE ON *.* TO 'repluser'@'%' |
+--------------------------------------------------+
[root@host51 ~]#
				52]# mysql -uroot -p123qqq...A
				mysql> grant replication slave on *.* to
repluser@"%" identified by "123qqq...A";

				53]# mysql -uroot -p123qqq...A
                                mysql> grant replication slave on *.* to
repluser@"%" identified by "123qqq...A";



				2.2.2、添加57主机的监控连接用户

host51 mysql> grant    all   on  *.*  to  root@"%"  identified  by “123qqq…A”;
host52 mysql> grant    all   on  *.*  to  root@"%"  identified  by “123qqq…A”;
host53 mysql> grant    all   on  *.*  to  root@"%"  identified  by “123qqq…A”;

			2.3 修改数据库服务运行参数

			host51]# vim /etc/my.cnf
				 [mysqld]
					plugin-load = "rpl_semi_sync_master=semisync_master.so;rpl_semi_sync_slave=semisync_slave.so” //加载模块
					rpl_semi_sync_master_enabled=1  //启用master模块
					rpl_semi_sync_slave_enabled=1     //启用slave模块
					relay_log_purge=0   //禁止自动删除中继日志文件
					:wq
			 	]#  systemctl  restart  mysqld

			host52]# vim  /etc/my.cnf
 					[mysqld]
                                        plugin-load = "rpl_semi_sync_master=semisync_master.so;rpl_semi_sync_slave=semisync_slave.so” //加载模块
                                        rpl_semi_sync_master_enabled=1  //启用master模块
                                        rpl_semi_sync_slave_enabled=1     //启用slave模块
                                        relay_log_purge=0   //禁止自动删除中继日志文件
					server_id=52
					log-bin=master52
					relay_log_purge=0
					:wq
				]#  systemctl  restart  mysqld
[root@host52 mysql]#  mysql -uroot -p123qqq...A -e "show slave status\G" | grep -i yes
[root@host52 mysql]#  mysql -uroot -p123qqq...A -e "show slave status\G" | grep 192
		host53]# vim  /etc/my.cnf
                                        [mysqld]
                                        plugin-load = "rpl_semi_sync_master=semisync_master.so;rpl_semi_sync_slave=semisync_slave.so” //加载模块
                                        rpl_semi_sync_master_enabled=1  //启用master模块
                                        rpl_semi_sync_slave_enabled=1     //启用slave模块
                                        relay_log_purge=0   //禁止自动删除中继日志文件
                                        server_id=53
                                        log-bin=master53
                                        relay_log_purge=0
                                        :wq
                                ]#  systemctl  restart  mysqld
[root@host52 mysql]#  mysql -uroot -p123qqq...A -e "show slave status\G" | grep -i yes
[root@host52 mysql]#  mysql -uroot -p123qqq...A -e "show slave status\G" | grep 192

			3 测试配置 (192.168.4.57)
 				3.1  测试SSH配置
[root@host57 ~]# masterha_check_ssh --conf=/etc/mha/app1.cnf
Thu Jun 20 15:33:48 2019 - [warning] Global configuration file /etc/masterha_default.cnf not found. Skipping.
Thu Jun 20 15:33:48 2019 - [info] Reading application default configuration from /etc/mha/app1.cnf..
Thu Jun 20 15:33:48 2019 - [info] Reading server configuration from /etc/mha/app1.cnf..
Thu Jun 20 15:33:48 2019 - [info] Starting SSH connection tests..
Thu Jun 20 15:33:49 2019 - [debug]
Thu Jun 20 15:33:48 2019 - [debug]  Connecting via SSH from root@192.168.4.51(192.168.4.51:22) to root@192.168.4.52(192.168.4.52:22)..
Thu Jun 20 15:33:49 2019 - [debug]   ok.
Thu Jun 20 15:33:49 2019 - [debug]  Connecting via SSH from root@192.168.4.51(192.168.4.51:22) to root@192.168.4.53(192.168.4.53:22)..
Thu Jun 20 15:33:49 2019 - [debug]   ok.
Thu Jun 20 15:33:50 2019 - [debug]
Thu Jun 20 15:33:49 2019 - [debug]  Connecting via SSH from root@192.168.4.52(192.168.4.52:22) to root@192.168.4.51(192.168.4.51:22)..
Thu Jun 20 15:33:49 2019 - [debug]   ok.
Thu Jun 20 15:33:49 2019 - [debug]  Connecting via SSH from root@192.168.4.52(192.168.4.52:22) to root@192.168.4.53(192.168.4.53:22)..
Thu Jun 20 15:33:49 2019 - [debug]   ok.
Thu Jun 20 15:33:51 2019 - [debug]
Thu Jun 20 15:33:49 2019 - [debug]  Connecting via SSH from root@192.168.4.53(192.168.4.53:22) to root@192.168.4.51(192.168.4.51:22)..
Thu Jun 20 15:33:50 2019 - [debug]   ok.
Thu Jun 20 15:33:50 2019 - [debug]  Connecting via SSH from root@192.168.4.53(192.168.4.53:22) to root@192.168.4.52(192.168.4.52:22)..
Thu Jun 20 15:33:50 2019 - [debug]   ok.
Thu Jun 20 15:33:51 2019 - [info] All SSH connection tests passed successfully.

				3.2  测试主从同步
[root@host57 ~]# masterha_check_repl --conf=/etc/mha/app1.cnf
Thu Jun 20 15:37:46 2019 - [warning] Global configuration file /etc/masterha_default.cnf not found. Skipping.
Thu Jun 20 15:37:46 2019 - [info] Reading application default configuration from /etc/mha/app1.cnf..
Thu Jun 20 15:37:46 2019 - [info] Reading server configuration from /etc/mha/app1.cnf..
Thu Jun 20 15:37:46 2019 - [info] MHA::MasterMonitor version 0.56.
Thu Jun 20 15:37:47 2019 - [info] GTID failover mode = 0
Thu Jun 20 15:37:47 2019 - [info] Dead Servers:
Thu Jun 20 15:37:47 2019 - [info] Alive Servers:
Thu Jun 20 15:37:47 2019 - [info]   192.168.4.51(192.168.4.51:3306)
Thu Jun 20 15:37:47 2019 - [info]   192.168.4.52(192.168.4.52:3306)
Thu Jun 20 15:37:47 2019 - [info]   192.168.4.53(192.168.4.53:3306)
Thu Jun 20 15:37:47 2019 - [info] Alive Slaves:
Thu Jun 20 15:37:47 2019 - [info]   192.168.4.52(192.168.4.52:3306)  Version=5.7.17-log (oldest major version between slaves) log-bin:enabled
Thu Jun 20 15:37:47 2019 - [info]     Replicating from 192.168.4.51(192.168.4.51:3306)
Thu Jun 20 15:37:47 2019 - [info]     Primary candidate for the new Master (candidate_master is set)
Thu Jun 20 15:37:47 2019 - [info]   192.168.4.53(192.168.4.53:3306)  Version=5.7.17-log (oldest major version between slaves) log-bin:enabled
Thu Jun 20 15:37:47 2019 - [info]     Replicating from 192.168.4.51(192.168.4.51:3306)
Thu Jun 20 15:37:47 2019 - [info]     Primary candidate for the new Master (candidate_master is set)
Thu Jun 20 15:37:47 2019 - [info] Current Alive Master: 192.168.4.51(192.168.4.51:3306)
Thu Jun 20 15:37:47 2019 - [info] Checking slave configurations..
Thu Jun 20 15:37:47 2019 - [info]  read_only=1 is not set on slave 192.168.4.52(192.168.4.52:3306).
Thu Jun 20 15:37:47 2019 - [info]  read_only=1 is not set on slave 192.168.4.53(192.168.4.53:3306).
Thu Jun 20 15:37:47 2019 - [info] Checking replication filtering settings..
Thu Jun 20 15:37:47 2019 - [info]  binlog_do_db= , binlog_ignore_db=
Thu Jun 20 15:37:47 2019 - [info]  Replication filtering check ok.
Thu Jun 20 15:37:47 2019 - [info] GTID (with auto-pos) is not supported
Thu Jun 20 15:37:47 2019 - [info] Starting SSH connection tests..
Thu Jun 20 15:37:49 2019 - [info] All SSH connection tests passed successfully.
Thu Jun 20 15:37:49 2019 - [info] Checking MHA Node version..
Thu Jun 20 15:37:50 2019 - [info]  Version check ok.
Thu Jun 20 15:37:50 2019 - [info] Checking SSH publickey authentication settings on the current master..
Thu Jun 20 15:37:50 2019 - [info] HealthCheck: SSH to 192.168.4.51 is reachable.
Thu Jun 20 15:37:50 2019 - [info] Master MHA Node version is 0.56.
Thu Jun 20 15:37:50 2019 - [info] Checking recovery script configurations on 192.168.4.51(192.168.4.51:3306)..
Thu Jun 20 15:37:50 2019 - [info]   Executing command: save_binary_logs --command=test --start_pos=4 --binlog_dir=/var/lib/mysql,/var/log/mysql --output_file=/var/tmp/save_binary_logs_test --manager_version=0.56 --start_file=master51.000002
Thu Jun 20 15:37:50 2019 - [info]   Connecting to root@192.168.4.51(192.168.4.51:22)..
  Creating /var/tmp if not exists..    ok.
  Checking output directory is accessible or not..
   ok.
  Binlog found at /var/lib/mysql, up to master51.000002
Thu Jun 20 15:37:50 2019 - [info] Binlog setting check done.
Thu Jun 20 15:37:50 2019 - [info] Checking SSH publickey authentication and checking recovery script configurations on all alive slave servers..
Thu Jun 20 15:37:50 2019 - [info]   Executing command : apply_diff_relay_logs --command=test --slave_user='root' --slave_host=192.168.4.52 --slave_ip=192.168.4.52 --slave_port=3306 --workdir=/var/tmp --target_version=5.7.17-log --manager_version=0.56 --relay_log_info=/var/lib/mysql/relay-log.info  --relay_dir=/var/lib/mysql/  --slave_pass=xxx
Thu Jun 20 15:37:50 2019 - [info]   Connecting to root@192.168.4.52(192.168.4.52:22)..
  Checking slave recovery environment settings..
    Opening /var/lib/mysql/relay-log.info ... ok.
    Relay log found at /var/lib/mysql, up to host52-relay-bin.000006
    Temporary relay log file is /var/lib/mysql/host52-relay-bin.000006
    Testing mysql connection and privileges..mysql: [Warning] Using a password on the command line interface can be insecure.
 done.
    Testing mysqlbinlog output.. done.
    Cleaning up test file(s).. done.
Thu Jun 20 15:37:51 2019 - [info]   Executing command : apply_diff_relay_logs --command=test --slave_user='root' --slave_host=192.168.4.53 --slave_ip=192.168.4.53 --slave_port=3306 --workdir=/var/tmp --target_version=5.7.17-log --manager_version=0.56 --relay_log_info=/var/lib/mysql/relay-log.info  --relay_dir=/var/lib/mysql/  --slave_pass=xxx
Thu Jun 20 15:37:51 2019 - [info]   Connecting to root@192.168.4.53(192.168.4.53:22)..
  Checking slave recovery environment settings..
    Opening /var/lib/mysql/relay-log.info ... ok.
    Relay log found at /var/lib/mysql, up to host53-relay-bin.000006
    Temporary relay log file is /var/lib/mysql/host53-relay-bin.000006
    Testing mysql connection and privileges..mysql: [Warning] Using a password on the command line interface can be insecure.
 done.
    Testing mysqlbinlog output.. done.
    Cleaning up test file(s).. done.
Thu Jun 20 15:37:52 2019 - [info] Slaves settings check done.
Thu Jun 20 15:37:52 2019 - [info]
192.168.4.51(192.168.4.51:3306) (current master)
 +--192.168.4.52(192.168.4.52:3306)
 +--192.168.4.53(192.168.4.53:3306)

Thu Jun 20 15:37:52 2019 - [info] Checking replication health on 192.168.4.52..
Thu Jun 20 15:37:52 2019 - [info]  ok.
Thu Jun 20 15:37:52 2019 - [info] Checking replication health on 192.168.4.53..
Thu Jun 20 15:37:52 2019 - [info]  ok.
Thu Jun 20 15:37:52 2019 - [info] Checking master_ip_failover_script status:
Thu Jun 20 15:37:52 2019 - [info]   /etc/mha/master_ip_failover --command=status --ssh_user=root --orig_master_host=192.168.4.51 --orig_master_ip=192.168.4.51 --orig_master_port=3306
Thu Jun 20 15:37:52 2019 - [info]  OK.
Thu Jun 20 15:37:52 2019 - [warning] shutdown_script is not defined.
Thu Jun 20 15:37:52 2019 - [info] Got exit code 0 (Not master dead).

MySQL Replication Health is OK.


			4 启动管理服务 (192.168.4.57)
[root@host57 ~]# masterha_check_status  --conf=/etc/mha/app1.cnf
app1 is stopped(2:NOT_RUNNING).
[root@host57 ~]#



]# masterha_manager --conf=/etc/mha/app1.cnf  --remove_dead_master_conf \
--ignore_last_failover

Thu Jun 20 17:05:58 2019 - [warning] Global configuration file /etc/masterha_default.cnf not found. Skipping.
Thu Jun 20 17:05:58 2019 - [info] Reading application default configuration from /etc/mha/app1.cnf..
Thu Jun 20 17:05:58 2019 - [info] Reading server configuration from /etc/mha/app1.cnf..




ot@host57 ~]# masterha_check_status  --conf=/etc/mha/app1.cnf
app1 (pid:15806) is running(0:PING_OK), master:192.168.4.51
[root@host57 ~]#


[root@host51 ~]# ifconfig  eth0:1
eth0:1: flags=4163<UP,BROADCAST,RUNNING,MULTICAST>  mtu 1500
        inet 192.168.4.100  netmask 255.255.255.0  broadcast 192.168.4.255
        ether 52:54:00:d8:10:d7  txqueuelen 1000  (Ethernet)

[root@host51 ~]#

[root@host57 ~]# cat /etc/mha/app1.master_status.health
15806	0:PING_OK	master:192.168.4.51


查看工作目录
[root@host57 ~]# ls /etc/mha/
app1.cnf  app1.master_status.health  manager.log  master_ip_failover
[root@host57 ~]#
[root@host57 ~]#
[root@host57 ~]# cat /etc/mha/app1.master_status.health
15806	0:PING_OK	master:192.168.4.51[root@host57 ~]#
[root@host57 ~]#



			5 客户端50 连接vip地址访问集群
				5.1 在主服务器51 添加访问数据的连接用户
]# mysql  -uroot -p123qqq...A
mysql> create database db9;
Query OK, 1 row affected (0.05 sec)

mysql> create table db9.a (id int);
Query OK, 0 rows affected (0.63 sec)

mysql> grant select,insert on db9.* to yaya55@"%" identified by "123qqq...A";
Query OK, 0 rows affected, 1 warning (0.08 sec)

mysql>exit

				5.2 客户端50 连接vip地址访问集群
		host50~]# mysql -h192.168.4.100  -uyaya55  -p123qqq...A
		mysql> select  * from  db9.a;
		mysql> insert into db9.a values(100);
mysql> select  * from db9.a;
+------+
| id   |
+------+
|  100 |
+------+
1 row in set (0.00 sec)


[root@host53 ~]# mysql -uroot -p123qqq...A -e "select  * from db9.a"
mysql: [Warning] Using a password on the command line interface can be insecure.
+------+
| id   |
+------+
|  100 |
+------+
[root@host53 ~]#

[root@host52 ~]# mysql -uroot -p123qqq...A -e "select  * from db9.a"
mysql: [Warning] Using a password on the command line interface can be insecure.
+------+
| id   |
+------+
|  100 |
+------+
[root@host53 ~]#


			5 测试高可用
			   5.1 停止主服务器51的mysql服务
   				    host51]# systemctl  stop  mysqld



查看管理服务状态
[root@host57 ~]# masterha_manager --conf=/etc/mha/app1.cnf  --remove_dead_master_conf \
> --ignore_last_failover
Thu Jun 20 17:05:58 2019 - [warning] Global configuration file /etc/masterha_default.cnf not found. Skipping.
Thu Jun 20 17:05:58 2019 - [info] Reading application default configuration from /etc/mha/app1.cnf..
Thu Jun 20 17:05:58 2019 - [info] Reading server configuration from /etc/mha/app1.cnf..


  Creating /var/tmp if not exists..    ok.
  Checking output directory is accessible or not..
   ok.
  Binlog found at /var/lib/mysql, up to master51.000002
Thu Jun 20 17:35:59 2019 - [warning] Global configuration file /etc/masterha_default.cnf not found. Skipping.
Thu Jun 20 17:35:59 2019 - [info] Reading application default configuration from /etc/mha/app1.cnf..
Thu Jun 20 17:35:59 2019 - [info] Reading server configuration from /etc/mha/app1.cnf..
[root@host57 ~]#

[root@host57 ~]# masterha_check_status  --conf=/etc/mha/app1.cnf
app1 is stopped(2:NOT_RUNNING).
[root@host57 ~]#

			   5.2 客户端依然连接vip地址，可以访问到数据
				client50]# ping -c 2 192.168.4.100
				client50]# mysql -h192.168.4.100 -uyaya55 -p123qqq...A
				mysql> insert into db9.a values(200);
				mysql> select  * from db9.a;

[root@host50 ~]# mysql -h192.168.4.100 -uyaya55  -p123qqq...A
mysql: [Warning] Using a password on the command line interface can be insecure.
Welcome to the MySQL monitor.  Commands end with ; or \g.
Your MySQL connection id is 21
Server version: 5.7.17-log MySQL Community Server (GPL)

Copyright (c) 2000, 2016, Oracle and/or its affiliates. All rights reserved.

Oracle is a registered trademark of Oracle Corporation and/or its
affiliates. Other names may be trademarks of their respective
owners.

Type 'help;' or '\h' for help. Type '\c' to clear the current input statement.

mysql> select  * from db9.a;
+------+
| id   |
+------+
|  100 |
+------+
1 row in set (0.00 sec)

mysql> insert into db9.a values(200);
Query OK, 1 row affected (0.12 sec)

mysql> select  * from db9.a;
+------+
| id   |
+------+
|  100 |
|  200 |
+------+
2 rows in set (0.00 sec)

mysql>



查看53主机
[root@host53 ~]# ifconfig  eth0:1
eth0:1: flags=4163<UP,BROADCAST,RUNNING,MULTICAST>  mtu 1500
        ether 52:54:00:28:22:2e  txqueuelen 1000  (Ethernet)

[root@host53 ~]# mysql -uroot -p123qqq...A -e "show slave status\G" | grep -i 192
mysql: [Warning] Using a password on the command line interface can be insecure.
                  Master_Host: 192.168.4.52
[root@host53 ~]#
[root@host53 ~]# mysql -uroot -p123qqq...A -e "show slave status\G" | grep -i yes
mysql: [Warning] Using a password on the command line interface can be insecure.
             Slave_IO_Running: Yes
            Slave_SQL_Running: Yes
[root@host53 ~]#
[root@host53 ~]# mysql -uroot -p123qqq...A -e "select  * from db9.a"
mysql: [Warning] Using a password on the command line interface can be insecure.
+------+
| id   |
+------+
|  100 |
|  200 |
+------+


[root@host52 ~]# ifconfig  eth0:1
eth0:1: flags=4163<UP,BROADCAST,RUNNING,MULTICAST>  mtu 1500
        inet 192.168.4.100  netmask 255.255.255.0  broadcast 192.168.4.255
        ether 52:54:00:f5:c4:6a  txqueuelen 1000  (Ethernet)


启动 51～53 主机上的数据库服务器
查看管理主机57的app1.cnf文件内容
检查从服务器的状态信息
查看主服务器的vip地址和binlog日志
在管理主机57 , 测试ssh  和 主从同步  ，并启动管理服务 ，查看服务状态


		在宕机的数据库服务器51 添加到集群里？
			1 启动51主机的数据库服务
			2 把51主机配置为当前集群主机的从服务器
			   2.1 与主服务器数据一致
[root@host52 ~]#
[root@host52 ~]#  mysqldump -uroot -p123qqq...A  --master-data  db9 > db9.sql
mysqldump: [Warning] Using a password on the command line interface can be insecure.
[root@host52 ~]#
[root@host52 ~]# scp db9.sql  root@192.168.4.51:/root/
db9.sql                                                  100% 1918     3.1MB/s   00:00
[root@host52 ~]#
			   2.2 指定主服务器信息，启动slave 进程 、查看状态

ot@host51 ~]# mysql -uroot -p123qqq...A db9 < /root/db9.sql
mysql: [Warning] Using a password on the command line interface can be insecure.

[root@host51 ~]# mysql -uroot -p123qqq...A -e "select  * from db9.a"
mysql: [Warning] Using a password on the command line interface can be insecure.
+------+
| id   |
+------+
|  100 |
|  200 |
|  300 |
|  400 |
+------+

[root@host51 ~]# grep master52 /root/db9.sql
CHANGE MASTER TO MASTER_LOG_FILE='master52.000001', MASTER_LOG_POS=895;

[root@host51 ~]# mysql -uroot -p123qqq...A
mysql> change master to master_host="192.168.4.52",master_user="repluser",master_password="123qqq...A",master_log_file="master52.000001",master_log_pos=895;
Query OK, 0 rows affected, 2 warnings (0.14 sec)

mysql> start slave;
Query OK, 0 rows affected (0.01 sec)

mysql> exit

[root@host51 ~]# mysql -uroot -p123qqq...A -e "show slave status\G" |grep 192.168.4.52
mysql: [Warning] Using a password on the command line interface can be insecure.
                  Master_Host: 192.168.4.52

[root@host51 ~]#
[root@host51 ~]# mysql -uroot -p123qqq...A -e "show slave status\G" |grep -i yes
mysql: [Warning] Using a password on the command line interface can be insecure.
             Slave_IO_Running: Yes
            Slave_SQL_Running: Yes
[root@host51 ~]#
			3 把主机51添加到集群里
				3.1 停止57主机的管理服务
					]# masterha_stop  --conf=/etc/mha/app1.cnf

				3.2 修改配置文件
					]# vim /etc/mha/app1.cnf
					   [server1 ]
					hostname=192.168.4.51
					port=3306
					candidate_master=1
					:wq

				3.3 测试配置
					]# masterha_check_ssh  --conf=/etc/mha/app1.cnf
					]# masterha_check_repl  --conf=/etc/mha/app1.cnf
				3.4 启动管理服务
					]# masterha_manager --conf=/etc/mha/app1.cnf   \
--remove_dead_master_conf  --ignore_last_failover

				3.5 查看服务状态
					]# masterha_check_status --conf=/etc/mha/app1.cnf
			练习+休息到  10：20

MHA集群配置总结：
必须配置ssh无密码登陆
必须配置主从同步结构
必须vip地址
宕机的服务器要手动配置为集群的从服务器 才能添加到集群
宕机的服务器无法自动同步宕机期间的数据
当主从同步结构中 没有从服务器时无法实现故障切换

++++++++++++++++++RDBMS2_DAY05
一、PXC
	1.1 相关概念
	1.2 部署PXC集群
	1.3 准备集群环境 (3台服务器之间可以通过主机名通信) 10：45
[root@pxcnode71 ~]# cat /etc/hosts
# ::1		localhost localhost.localdomain localhost6 localhost6.localdomain6
127.0.0.1	localhost localhost.localdomain localhost4 localhost4.localdomain4
192.168.4.71 pxcnode71
192.168.4.72 pxcnode72
192.168.4.73 pxcnode73
[root@pxcnode71 ~]#
[root@pxcnode71 ~]# ping -c 2 pxcnode73
PING pxcnode73 (192.168.4.73) 56(84) bytes of data.
64 bytes from pxcnode73 (192.168.4.73): icmp_seq=1 ttl=255 time=0.129 ms
64 bytes from pxcnode73 (192.168.4.73): icmp_seq=2 ttl=255 time=0.314 ms

--- pxcnode73 ping statistics ---
2 packets transmitted, 2 received, 0% packet loss, time 1000ms
rtt min/avg/max/mdev = 0.129/0.221/0.314/0.093 ms
[root@pxcnode71 ~]#
[root@pxcnode71 ~]# ping -c 2 pxcnode72
PING pxcnode72 (192.168.4.72) 56(84) bytes of data.
64 bytes from pxcnode72 (192.168.4.72): icmp_seq=1 ttl=255 time=0.188 ms
64 bytes from pxcnode72 (192.168.4.72): icmp_seq=2 ttl=255 time=0.314 ms

--- pxcnode72 ping statistics ---
2 packets transmitted, 2 received, 0% packet loss, time 999ms
rtt min/avg/max/mdev = 0.188/0.251/0.314/0.063 ms
[root@pxcnode71 ~]#


				测试集群

72]#mysql>  添加授权用户
mysql> grant all on  gamedb.*  to yaya@"%" identified by "123456";
Query OK, 0 rows affected, 1 warning (0.18 sec)

mysql> select  * from gamedb.a;

50客户端连接集群存取数据
50]# mysql -h192.168.4.73 -uyaya -p123456
mysql>
mysql> create database gamedb;
Query OK, 1 row affected (0.19 sec)

mysql>  create table  gamedb.a(id int primary key auto_increment,name char(10));
Query OK, 0 rows affected (1.02 sec)

mysql> insert into gamedb.a(name)values("bob"),("tom");
mysql> insert into gamedb.a(name)values("bob2"),("tom2");
mysql> insert into gamedb.a(name)values("jerry"),("jack");
Query OK, 2 rows affected (0.20 sec)
Records: 2  Duplicates: 0  Warnings: 0

mysql> select  * from  gamedb.a;
mysql> select  * from  gamedb.a;
+----+-------+
| id | name  |
+----+-------+
|  2 | bob   |
|  5 | tom   |
|  8 | bob2  |
| 11 | tom2  |
| 14 | jerry |
| 17 | jack  |
+----+-------+
6 rows in set (0.00 sec)

在另外2台数据库服务器查看数据

[root@pxcnode71 ~]# mysql -uroot -p123456 -e "select  * from gamedb.a"
mysql: [Warning] Using a password on the command line interface can be insecure.
+----+-------+
| id | name  |
+----+-------+
|  2 | bob   |
|  5 | tom   |
|  8 | bob2  |
| 11 | tom2  |
| 14 | jerry |
| 17 | jack  |
+----+-------+
[root@pxcnode71 ~]#


[root@pxcnode73 ~]# mysql -uroot -p123456 -e "select  * from gamedb.a"
mysql: [Warning] Using a password on the command line interface can be insecure.
+----+-------+
| id | name  |
+----+-------+
|  2 | bob   |
|  5 | tom   |
|  8 | bob2  |
| 11 | tom2  |
| 14 | jerry |
| 17 | jack  |
+----+-------+
[root@pxcnode71 ~]#


二、MySQL存储引擎 192.168.4.50
	2.1 存储引擎介绍?

	2.2 查看数据库服务器可以使用的存储引擎 mysql> show  engines;

	2.3 修改数据库服务使用的存储引擎
		]# vim /etc/my.cnf
		[mysqld]
		default-storage-engine=myisam
		:wq
		]# systemctl  restart mysqld
		]# mysql -uroot -p123456 -e "show engines"




	2.4 修改表的存储引擎
		mysql> create database db10
		mysql> create table db10.a3(name char(10))engine=memory;
		mysql> show create table db10.a3\G;
		mysql> alter table  db10.a3 engine=myisam;

建表时指定存储引擎
mysql> use db10
mysql> create table  a1(id int)；

mysql> create table  a2(name char(10))engine=myisam ;
mysql> show create table a2\G;

	2.5 常用存储引擎的特点
		1 myisam 特点

		2 innodb 特点

	2.6 建表时如何决定表使用那种存储引擎
		查询操作多的表，适合使用myisam存储引擎，节省硬件资源。
			表级锁
PC1		select * from a1;或 select  * from a1  where  id<=3;
		读锁（共享锁）
PC2


		写操作多的表，适合使用Innodb存储引擎，并发访问量大。
			行级锁：只给访问的行分别加锁。

	pc1  update a1 set age=19 where id<=3;
		innodb			1 2 3

	pc2 update  a1 set age=21 where id>3;


RDBMS2 课程内容总结
DAY01  mysql主从同步（主从概念 工作过程 结构类型 复制模式）
DAY02  数据读写分离（概念 软件 配置maxscale  测试）  mysql多实例 1台
DAY03  数据分片 （概念  软件 工作过程 配置mycat  测试）
DAY04  MHA集群 (概念 软件  工作过程  配置管理主机 配置数据库服务器 测试配置 启动服务 测试集群)
DAY05  PXC 存储引擎

+++++++++++++++++++++++++NoSQL_DAY01
一、部署Redis服务
	1.1 相关概念
	1.2 Redis介绍
	1.3 搭建redid服务器 192.168.4.50
		1 安装源码redis软件
		2 服务初始化配置
		3 查看服务状态
		4 停止/启动服务脚本
		5 连接redis服务存取数据

	1.4 常用命令 192.168.4.50

[root@host50 redis-4.0.8]# redis-cli
127.0.0.1:6379>
127.0.0.1:6379> keys *
1) "school"
127.0.0.1:6379>
127.0.0.1:6379> type school
string
127.0.0.1:6379>
127.0.0.1:6379> mset x 100 y 200  z 99
OK
127.0.0.1:6379> type x
string
127.0.0.1:6379> type y
string
127.0.0.1:6379> type z
string
127.0.0.1:6379>

127.0.0.1:6379> get x y
(error) ERR wrong number of arguments for 'get' command
127.0.0.1:6379>
127.0.0.1:6379> mget x y
1) "100"
2) "200"
127.0.0.1:6379>

127.0.0.1:6379> select 1
OK
127.0.0.1:6379[1]> select 0
OK
127.0.0.1:6379> select 16
(error) ERR DB index is out of range
127.0.0.1:6379>


127.0.0.1:6379> keys *
1) "z"
2) "school"
3) "y"
4) "x"
127.0.0.1:6379>  keys ?
1) "z"
2) "y"
3) "x"
127.0.0.1:6379>
127.0.0.1:6379>  keys ??
(empty list or set)
127.0.0.1:6379>
127.0.0.1:6379>  keys a?
(empty list or set)
127.0.0.1:6379>

127.0.0.1:6379> EXISTS name
(integer) 0
127.0.0.1:6379> EXISTS school
(integer) 1
127.0.0.1:6379>

127.0.0.1:6379> set name bob
OK
127.0.0.1:6379> ttl name
(integer) -1
127.0.0.1:6379> EXPIRE name 10
(integer) 1
127.0.0.1:6379> ttl name
(integer) 6

127.0.0.1:6379> ttl name
(integer) -2
127.0.0.1:6379

127.0.0.1:6379> keys *
1) "z"
2) "school"
3) "y"
4) "x"
127.0.0.1:6379> move y 1
(integer) 1
127.0.0.1:6379> keys *
1) "z"
2) "school"
3) "x"
127.0.0.1:6379> select 1
OK
127.0.0.1:6379[1]> keys *
1) "y"
127.0.0.1:6379[1]>

127.0.0.1:6379[1]> keys *
1) "y"
127.0.0.1:6379[1]> del y
(integer) 1
127.0.0.1:6379[1]> keys *
(empty list or set)
127.0.0.1:6379[1]>

127.0.0.1:6379[1]> keys *
1) "y"
127.0.0.1:6379[1]> del y
(integer) 1
127.0.0.1:6379[1]> keys *
(empty list or set)
127.0.0.1:6379[1]> select  0
OK
127.0.0.1:6379> keys *
1) "z"
2) "school"
3) "x"
127.0.0.1:6379> flushdb
OK
127.0.0.1:6379> keys *
(empty list or set)
127.0.0.1:6379>
127.0.0.1:6379> flushall
OK
127.0.0.1:6379>
127.0.0.1:6379> keys *
(empty list or set)
127.0.0.1:6379> save
OK
127.0.0.1:6379> shutdown
not connected> exit
[root@host50 redis-4.0.8]#
not connected> exit
[root@host50 redis-4.0.8]# netstat -utnlp  | grep  :6379
[root@host50 redis-4.0.8]#
[root@host50 redis-4.0.8]# ls /var/lib/redis/6379/
dump.rdb
[root@host50 redis-4.0.8]# /etc/init.d/redis_6379  start
Starting Redis server...
[root@host50 redis-4.0.8]# redis-cli
127.0.0.1:6379> keys *
(empty list or set)
127.0.0.1:6379>



























































二、部署LNMP+Redis


]# scp redis-4.0.8.tar.gz  root@192.168.4.50:/root/
]# scp redis-4.0.8.tar.gz  root@192.168.4.51:/root/
]# scp -r lnmp  root@192.168.4.50:/root/

		1.4 配置文件解析 /etc/redis/6379.conf



[root@host50 redis-4.0.8]# /etc/init.d/redis_6379 stop
Stopping ...
Redis stopped
[root@host50 redis-4.0.8]# /etc/init.d/redis_6379 start
Starting Redis server...
[root@host50 redis-4.0.8]# netstat -utnlp  | grep :6379
tcp        0      0 127.0.0.1:6379          0.0.0.0:*               LISTEN      4267/redis-server 1
[root@host50 redis-4.0.8]#
[root@host50 redis-4.0.8]# redis-cli
127.0.0.1:6379> keys *
(error) NOAUTH Authentication required.
127.0.0.1:6379>
127.0.0.1:6379> set y 91
(error) NOAUTH Authentication required.
127.0.0.1:6379>
127.0.0.1:6379> auth 123456\
(error) ERR invalid password
127.0.0.1:6379> auth 123456
OK
127.0.0.1:6379> set y 91
OK
127.0.0.1:6379> keys *
1) "x"
2) "y"
127.0.0.1:6379> exit
[root@host50 redis-4.0.8]#

ot@host50 ~]# /etc/init.d/redis_6379 stop
Stopping ...
(error) NOAUTH Authentication required.
Waiting for Redis to shutdown ...
Waiting for Redis to shutdown ...
Waiting for Redis to shutdown ...
Waiting for Redis to shutdown ...

[root@host50 ~]# netstat -utnlp  | grep  :6379
tcp        0      0 127.0.0.1:6379          0.0.0.0:*               LISTEN      4267/redis-server 1
[root@host50 ~]#


[root@host50 ~]# redis-cli   -a 123456  shutdown
[root@host50 ~]# netstat -utnlp  | grep  :6379
[root@host50 ~]#

		修改服务的ip地址和端口号        练习到14：20
[root@host50 ~]# vim  /etc/redis/6379.conf
70 bind 192.168.4.50
93 port 6350
		:wq
[root@host50 ~]# /etc/init.d/redis_6379 start
Starting Redis server...
[root@host50 ~]#
[root@host50 ~]# netstat -utnlp  | grep  :6350
tcp     0      0 192.168.4.50:6350       0.0.0.0:*    LISTEN      4403/redis-server 1

[root@host50 ~]# redis-cli
Could not connect to Redis at 127.0.0.1:6379: Connection refused
Could not connect to Redis at 127.0.0.1:6379: Connection refused
not connected> exit

[root@host50 ~]# redis-cli  -h 192.168.4.50 -p 6350 -a 123456
192.168.4.50:6350> ping
PONG
192.168.4.50:6350> keys *
1) "x"
2) "y"
192.168.4.50:6350> exit


ot@host50 ~]#
[root@host50 ~]# /etc/init.d/redis_6379  stop
Stopping ...
Could not connect to Redis at 127.0.0.1:6379: Connection refused
Waiting for Redis to shutdown ...
Waiting for Redis to shutdown ...
Waiting for Redis to shutdown ...
^C
[root@host50 ~]# redis-cli  -h 192.168.4.50 -p 6350 -a 123456 shutdown
[root@host50 ~]#
[root@host50 ~]# /etc/init.d/redis_6379  start
Starting Redis server...
[root@host50 ~]#
[root@host50 ~]# netstat  -utnlp  | grep  :6350
tcp        0      0 192.168.4.50:6350       0.0.0.0:*               LISTEN      4424/redis-server 1
[root@host50 ~]#

		修改脚本代码，可以使用脚本停止服务    （练习到 14：33）
[root@host50 ~]# vim +43 /etc/init.d/redis_6379

    $CLIEXEC -h 192.168.4.50 -p 6350 -a 123456  shutdown

:wq

[root@host50 ~]# /etc/init.d/redis_6379  stop
Stopping ...
Redis stopped
[root@host50 ~]# netstat  -utnlp  | grep  :6350
[root@host50 ~]#

二、部署LNMP+Redis
	]# scp  -r  lnmp root@192.168.4.71:/root/
	2.1 部署LNMP （192.168.4.71）
		1 安装源码nginx软件包
[root@localhost lnmp]# rpm -q gcc
未安装软件包 gcc
[root@localhost lnmp]# rpm -q pcre-devel
pcre-devel-8.32-17.el7.x86_64
[root@localhost lnmp]# rpm -q zlib-devel
zlib-devel-1.2.7-17.el7.x86_64
[root@localhost lnmp]#
[root@localhost lnmp]# yum -y  install gcc


checking for zlib library ... found
creating objs/Makefile

Configuration summary
  + using system PCRE library
  + OpenSSL library is not used
  + using system zlib library

  nginx path prefix: "/usr/local/nginx"
  nginx binary file: "/usr/local/nginx/sbin/nginx"
  nginx modules path: "/usr/local/nginx/modules"
  nginx configuration prefix: "/usr/local/nginx/conf"
  nginx configuration file: "/usr/local/nginx/conf/nginx.conf"
  nginx pid file: "/usr/local/nginx/logs/nginx.pid"
  nginx error log file: "/usr/local/nginx/logs/error.log"
  nginx http access log file: "/usr/local/nginx/logs/access.log"
  nginx http client request body temporary files: "client_body_temp"
  nginx http proxy temporary files: "proxy_temp"
  nginx http fastcgi temporary files: "fastcgi_temp"
  nginx http uwsgi temporary files: "uwsgi_temp"
  nginx http scgi temporary files: "scgi_temp"

[root@localhost nginx-1.12.2]#
objs/src/http/modules/ngx_http_upstream_zone_module.o \
objs/ngx_modules.o \
-ldl -lpthread -lcrypt -lpcre -lz \
-Wl,-E
sed -e "s|%%PREFIX%%|/usr/local/nginx|" \
	-e "s|%%PID_PATH%%|/usr/local/nginx/logs/nginx.pid|" \
	-e "s|%%CONF_PATH%%|/usr/local/nginx/conf/nginx.conf|" \
	-e "s|%%ERROR_LOG_PATH%%|/usr/local/nginx/logs/error.log|" \
	< man/nginx.8 > objs/nginx.8
make[1]: 离开目录“/root/lnmp/nginx-1.12.2”
[root@localhost nginx-1.12.2]#

test -d '/usr/local/nginx/logs' \
	|| mkdir -p '/usr/local/nginx/logs'
test -d '/usr/local/nginx/html' \
	|| cp -R html '/usr/local/nginx'
test -d '/usr/local/nginx/logs' \
	|| mkdir -p '/usr/local/nginx/logs'
make[1]: 离开目录“/root/lnmp/nginx-1.12.2”
[root@localhost nginx-1.12.2]#
[root@localhost nginx-1.12.2]# ls /usr/local/
bin  etc  games  include  lib  lib64  libexec  nginx  sbin  share  src
[root@localhost nginx-1.12.2]#
[root@localhost nginx-1.12.2]#
[root@localhost nginx-1.12.2]# ls /usr/local/nginx/
conf  html  logs  sbin
[root@localhost nginx-1.12.2]#
		2 安装php-fpm
]# yum list  | grep  -i php-fpm

]# cd /root
]# yum -y  install  php-fpm
已安装:
  php-fpm.x86_64 0:5.4.16-45.el7

作为依赖被安装:
  libzip.x86_64 0:0.10.1-8.el7              php-common.x86_64 0:5.4.16-45.el7

完毕！
[root@localhost ~]#

		3 修改nginx服务配置文件
[root@localhost ~]# vim  +65 /usr/local/nginx/conf/nginx.conf

       location ~ \.php$ {
            root           html;
            fastcgi_pass   127.0.0.1:9000;
            fastcgi_index  index.php;
        #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;
           include        fastcgi.conf;
        }
:wq
		4 启动nginx服务
[root@localhost ~]# /usr/local/nginx/sbin/nginx  -t
nginx: the configuration file /usr/local/nginx/conf/nginx.conf syntax is ok
nginx: configuration file /usr/local/nginx/conf/nginx.conf test is successful

[root@localhost ~]#
[root@localhost ~]# /usr/local/nginx/sbin/nginx
[root@localhost ~]#
[root@localhost ~]# netstat -utnlp  | grep  :80
tcp        0      0 0.0.0.0:80              0.0.0.0:*               LISTEN      6489/nginx: master

		5 启动php-fpm服务
[root@localhost ~]# systemctl  start php-fpm
[root@localhost ~]#
[root@localhost ~]# netstat -utnlp  | grep  :9000
tcp        0      0 127.0.0.1:9000          0.0.0.0:*               LISTEN      6499/php-fpm: maste
[root@localhost ~]#
		6 编写php网页文件，测试配置 练习到 16：00

[root@localhost ~]# vim /usr/local/nginx/html/test.php
<?php
	echo  "hello  boy!!!";
?>
:wq

[root@localhost ~]# ls /usr/local/nginx/html/
50x.html  index.html  test.php

[root@localhost ~]#
[root@localhost ~]# curl  http://localhost/test.php
hello boy!!!


	2.2 配置PHP支持Redis

[root@host71 ~]# rpm -q php php-devel
未安装软件包 php
未安装软件包 php-devel
[root@host71 ~]#
[root@host71 ~]# rpm -q automake autoconf
未安装软件包 automack
未安装软件包 autoconf
[root@host71 ~]#
[root@host71 ~]# yum -y  install php php-devel automake autoconf


[root@host71 ~]# rpm -q automake
automake-1.13.4-3.el7.noarch
[root@host71 ~]#
[root@host71 ~]# rpm -q autoconf
autoconf-2.69-11.el7.noarch
[root@host71 ~]#
[root@host71 ~]# rpm -q php
php-5.4.16-45.el7.x86_64
[root@host71 ~]# rpm -q php-devel
php-devel-5.4.16-45.el7.x86_64
[root@host71 ~]#

	2.3 测试配置



[root@host71 phpredis-2.2.4]# phpize
Configuring for:
PHP Api Version:         20100412
Zend Module Api No:      20100525
Zend Extension Api No:   220100525


[root@host71 phpredis-2.2.4]# vim  /etc/php.ini
728 extension_dir = "/usr/lib64/php/modules/"
730 extension = "redis.so"
[root@host71 phpredis-2.2.4]#

[root@host71 phpredis-2.2.4]# systemctl  restart php-fpm
[root@host71 phpredis-2.2.4]#
[root@host71 phpredis-2.2.4]# php -m  | grep  -i redis
redis
[root@host71 phpredis-2.2.4]#

]# cd lnmp/					休息到17：33
]# cp linkredis.php  /usr/local/nginx/html/
]# vim  /usr/local/nginx/html/linkredis.php
<?php
$redis = new redis();
$redis->connect("192.168.4.50","6350");
$redis->auth("123456");
$redis->set("linux","redhat");
echo $redis->get("linux");
?>
:wq
[root@host71 lnmp]# curl  http://localhost/linkredis.php
redhat

[root@host50 ~]# redis-cli  -h 192.168.4.50 -p 6350 -a 123456
192.168.4.50:6350> keys *
1) "y"
2) "x"
192.168.4.50:6350> keys *
1) "y"
2) "x"
3) "linux"
192.168.4.50:6350> get linux
"redhat"

++++++++++++++NoSQL_DAY02
一、创建集群

	准备环境
	部署管理主机
	104  scp  redis-3.2.1.gem  root@192.168.4.57:/root/
        105  scp  redis-4.0.8.tar.gz  root@192.168.4.57:/root/

[root@mgm57 ~]# which gem
/usr/bin/gem
[root@mgm57 ~]# ls  *.gem
redis-3.2.1.gem
[root@mgm57 ~]#
[root@mgm57 ~]# gem install redis-3.2.1.gem
Successfully installed redis-3.2.1
Parsing documentation for redis-3.2.1
Installing ri documentation for redis-3.2.1
1 gem installed
[root@mgm57 ~]#

]#mkdir  /root/bin     //创建命令检索目录
]#tar -zxvf redis-4.0.8.tar.gz
]#cd  redis-4.0.8/src/
]#cp  redis-trib.rb   /root/bin/ //创建管理集群脚本
]#chmod  +x   /root/bin/redis-trib.rb
]#redis-trib.rb   help  //查看命令帮助


清空数据
[root@host51 ~]# /etc/init.d/redis_6379  stop
Stopping ...
Waiting for Redis to shutdown ...
Redis stopped
[root@host51 ~]# rm -rf /var/lib/redis/6379/*
[root@host51 ~]#
[root@host51 ~]# /etc/init.d/redis_6379  start
Starting Redis server...
[root@host51 ~]#

启用集群

[root@host51 ~]# vim /etc/redis/6379.conf
    cluster-enabled  yes        	             //启用集群
    cluster-config-file  nodes-xxxx.conf      //存储集群信息文件
    cluster-node-timeout  5000                  //连接超时时间单位毫秒

[root@host51 ~]# /etc/init.d/redis_6379  stop
Stopping ...
Redis stopped
[root@host51 ~]# /etc/init.d/redis_6379  start
Starting Redis server...
[root@host51 ~]#
[root@host51 ~]# netstat -utnlp  | grep  redis-server
tcp        0      0 192.168.4.51:16351      0.0.0.0:*               LISTEN      29726/redis-server
tcp        0      0 192.168.4.51:6351       0.0.0.0:*               LISTEN      29726/redis-server
[root@host51 ~]#
[root@host51 ~]# ls /var/lib/redis/6379/
dump.rdb  nodes-6351.conf
[root@host51 ~]#


[root@mgm57 ~]# redis-trib.rb create  --replicas 1 \
> 192.168.4.51:6351  192.168.4.52:6352  192.168.4.53:6353 \
> 192.168.4.54:6354  192.168.4.55:6355  192.168.4.56:6356
>>> Creating cluster
>>> Performing hash slots allocation on 6 nodes...
Using 3 masters:
192.168.4.51:6351
192.168.4.52:6352
192.168.4.53:6353
Adding replica 192.168.4.55:6355 to 192.168.4.51:6351
Adding replica 192.168.4.56:6356 to 192.168.4.52:6352
Adding replica 192.168.4.54:6354 to 192.168.4.53:6353
M: d9f8fe6d6d9dd391be8e7904501db1535e4d17cb 192.168.4.51:6351
   slots:0-5460 (5461 slots) master
M: 324e05df3f143ef97e50d09be0328a695e655986 192.168.4.52:6352
   slots:5461-10922 (5462 slots) master
M: 9e44139cffb8ebd7ed746aabbf4bcea9bf207645 192.168.4.53:6353
   slots:10923-16383 (5461 slots) master
S: d9634ba0aa5c1a07193da4a013da6051c1515922 192.168.4.54:6354
   replicates 9e44139cffb8ebd7ed746aabbf4bcea9bf207645
S: 2d343a9df48f6f6e207949e980ef498466a44dad 192.168.4.55:6355
   replicates d9f8fe6d6d9dd391be8e7904501db1535e4d17cb
S: 894dd0008053f6fb65e9e4a36b755d9351607500 192.168.4.56:6356
   replicates 324e05df3f143ef97e50d09be0328a695e655986
Can I set the above configuration? (type 'yes' to accept): yes
>>> Nodes configuration updated
>>> Assign a different config epoch to each node
>>> Sending CLUSTER MEET messages to join the cluster
Waiting for the cluster to join...
>>> Performing Cluster Check (using node 192.168.4.51:6351)
M: d9f8fe6d6d9dd391be8e7904501db1535e4d17cb 192.168.4.51:6351
   slots:0-5460 (5461 slots) master
   1 additional replica(s)
S: d9634ba0aa5c1a07193da4a013da6051c1515922 192.168.4.54:6354
   slots: (0 slots) slave
   replicates 9e44139cffb8ebd7ed746aabbf4bcea9bf207645
S: 894dd0008053f6fb65e9e4a36b755d9351607500 192.168.4.56:6356
   slots: (0 slots) slave
   replicates 324e05df3f143ef97e50d09be0328a695e655986
M: 324e05df3f143ef97e50d09be0328a695e655986 192.168.4.52:6352
   slots:5461-10922 (5462 slots) master
   1 additional replica(s)
M: 9e44139cffb8ebd7ed746aabbf4bcea9bf207645 192.168.4.53:6353
   slots:10923-16383 (5461 slots) master
   1 additional replica(s)
S: 2d343a9df48f6f6e207949e980ef498466a44dad 192.168.4.55:6355
   slots: (0 slots) slave
   replicates d9f8fe6d6d9dd391be8e7904501db1535e4d17cb
[OK] All nodes agree about slots configuration.
>>> Check for open slots...
>>> Check slots coverage...
[OK] All 16384 slots covered.
[root@mgm57 ~]#









]# /etc/init.d/redis_6379 stop
]# rm -rf /var/lib/redis/6379/*
]# /etc/init.d/redis_6379 start
]# redis-cli  -h 192.168.4.51  -p 6351
>keys *
>exit
]# netstat -utnlp  | grep  :6351
]# netstat -utnlp  | grep  :16351

二、管理集群
	2.1 在管理主机查看集群信息
[root@mgm57 ~]# redis-trib.rb info 192.168.4.51:6351
192.168.4.51:6351 (d9f8fe6d...) -> 0 keys | 5461 slots | 1 slaves.
192.168.4.52:6352 (324e05df...) -> 0 keys | 5462 slots | 1 slaves.
192.168.4.53:6353 (9e44139c...) -> 0 keys | 5461 slots | 1 slaves.
[OK] 0 keys in 3 masters.
0.00 keys per slot on average.

	2.2 在管理主机检测集群
[root@mgm57 ~]# redis-trib.rb check 192.168.4.51:6351
>>> Performing Cluster Check (using node 192.168.4.51:6351)
M: d9f8fe6d6d9dd391be8e7904501db1535e4d17cb 192.168.4.51:6351
   slots:0-5460 (5461 slots) master
   1 additional replica(s)
S: d9634ba0aa5c1a07193da4a013da6051c1515922 192.168.4.54:6354
   slots: (0 slots) slave
   replicates 9e44139cffb8ebd7ed746aabbf4bcea9bf207645
S: 894dd0008053f6fb65e9e4a36b755d9351607500 192.168.4.56:6356
   slots: (0 slots) slave
   replicates 324e05df3f143ef97e50d09be0328a695e655986
M: 324e05df3f143ef97e50d09be0328a695e655986 192.168.4.52:6352
   slots:5461-10922 (5462 slots) master
   1 additional replica(s)
M: 9e44139cffb8ebd7ed746aabbf4bcea9bf207645 192.168.4.53:6353
   slots:10923-16383 (5461 slots) master
   1 additional replica(s)
S: 2d343a9df48f6f6e207949e980ef498466a44dad 192.168.4.55:6355
   slots: (0 slots) slave
   replicates d9f8fe6d6d9dd391be8e7904501db1535e4d17cb
[OK] All nodes agree about slots configuration.
>>> Check for open slots...
>>> Check slots coverage...
[OK] All 16384 slots covered.
[root@mgm57 ~]#

	2. 在redis服务器本机查看集群信息
[root@host51 ~]# redis-cli  -h 192.168.4.51 -p 6351
192.168.4.51:6351> cluster info
cluster_state:ok
cluster_slots_assigned:16384
cluster_slots_ok:16384
cluster_slots_pfail:0
cluster_slots_fail:0
cluster_known_nodes:6
cluster_size:3
cluster_current_epoch:6
cluster_my_epoch:1
cluster_stats_messages_ping_sent:25763
cluster_stats_messages_pong_sent:21605
cluster_stats_messages_sent:47368
cluster_stats_messages_ping_received:21600
cluster_stats_messages_pong_received:25763
cluster_stats_messages_meet_received:5
cluster_stats_messages_received:47368
192.168.4.51:6351>
192.168.4.51:6351> cluster nodes
d9634ba0aa5c1a07193da4a013da6051c1515922 192.168.4.54:6354@16354 slave 9e44139cffb8ebd7ed746aabbf4bcea9bf207645 0 1561357552212 4 connected
894dd0008053f6fb65e9e4a36b755d9351607500 192.168.4.56:6356@16356 slave 324e05df3f143ef97e50d09be0328a695e655986 0 1561357554216 6 connected
d9f8fe6d6d9dd391be8e7904501db1535e4d17cb 192.168.4.51:6351@16351 myself,master - 0 1561357545000 1 connected 0-5460
324e05df3f143ef97e50d09be0328a695e655986 192.168.4.52:6352@16352 master - 0 1561357553214 2 connected 5461-10922
9e44139cffb8ebd7ed746aabbf4bcea9bf207645 192.168.4.53:6353@16353 master - 0 1561357554216 3 connected 10923-16383
2d343a9df48f6f6e207949e980ef498466a44dad 192.168.4.55:6355@16355 slave d9f8fe6d6d9dd391be8e7904501db1535e4d17cb 0 1561357553716 5 connected
192.168.4.51:6351>


客户端访问集群存 取数据

[root@host50 ~]# redis-cli  -c  -h 192.168.4.51 -p 6351
192.168.4.51:6351>
192.168.4.51:6351> set x 100
-> Redirected to slot [16287] located at 192.168.4.53:6353
OK
192.168.4.53:6353> keys *
1) "x"
192.168.4.53:6353>
192.168.4.53:6353> set y 200
OK
192.168.4.53:6353> keys *
1) "y"
2) "x"
192.168.4.53:6353> set z 300
-> Redirected to slot [8157] located at 192.168.4.52:6352
OK
192.168.4.52:6352> keys *
1) "z"
192.168.4.52:6352> get x
-> Redirected to slot [16287] located at 192.168.4.53:6353
"100"
192.168.4.53:6353> keys *
1) "y"
2) "x"
192.168.4.53:6353> get z
-> Redirected to slot [8157] located at 192.168.4.52:6352
"300"
192.168.4.52:6352> set i 400
-> Redirected to slot [15759] located at 192.168.4.53:6353
OK
192.168.4.53:6353> set j 500
-> Redirected to slot [3564] located at 192.168.4.51:6351
OK
192.168.4.51:6351> exit


	2.4 客户端连接从服务器，查看数据是否同步
[root@host50 ~]# redis-cli  -c  -h 192.168.4.54 -p 6354
192.168.4.54:6354> keys *
1) "i"
2) "y"
3) "x"
192.168.4.54:6354> exit
[root@host50 ~]#
[root@host50 ~]# redis-cli  -c  -h 192.168.4.55 -p 6355
192.168.4.55:6355> keys *
1) "j"
192.168.4.55:6355> exit
[root@host50 ~]#
[root@host50 ~]# redis-cli  -c  -h 192.168.4.56 -p 6356
192.168.4.56:6356> keys *
1) "z"
192.168.4.56:6356> exit
[root@host50 ~]#

	2.5 在管理主机 查看集群信息
[root@mgm57 ~]# redis-trib.rb info 192.168.4.53:6353
192.168.4.53:6353 (9e44139c...) -> 3 keys | 5461 slots | 1 slaves.
192.168.4.52:6352 (324e05df...) -> 1 keys | 5462 slots | 1 slaves.
192.168.4.51:6351 (d9f8fe6d...) -> 1 keys | 5461 slots | 1 slaves.
[OK] 5 keys in 3 masters.
0.00 keys per slot on average.
[root@mgm57 ~]#

	2.6 连接从服务器，查看没有的变量 也可以查看到
[root@host50 ~]# redis-cli  -c  -h 192.168.4.56 -p 6356
192.168.4.56:6356> keys *
1) "z"
192.168.4.56:6356>
192.168.4.56:6356> get x
-> Redirected to slot [16287] located at 192.168.4.53:6353
"100"
192.168.4.53:6353>


		15：10 上课
		2.6 redis集群存储数据和读取数据的工作过程
			hash slots 的总数 16384  范围 0～16383

		redis-cli -c  -h ip    -p port

		> set  age  19
		> get  age

	获取变量名 age   用算法CRC16 做计算得到  数值%16384 得到余数 1028




二、管理集群
	2.1 添加master服务器  192.168.4.58
		192.168.4.58 运行服务并启用集群配置
  211  yum -y  install gcc
  212  tar -zxvf redis-4.0.8.tar.gz
  213  cd redis-4.0.8/
  214  make
  215  make install
  216  ./utils/install_server.sh

  217  /etc/init.d/redis_6379  stop

  218  vim /etc/redis/6379.conf
	bind 192.168.4.58
	port 6358
        cluster-enabled  yes        	             //启用集群
        cluster-config-file  nodes-6358.conf      //存储集群信息文件
        cluster-node-timeout  5000
      :wq
  219  /etc/init.d/redis_6379  start
  220  netstat -utnlp  | grep redis-server
  221  vim +43 /etc/init.d/redis_6379
	 $CLIEXEC -h 192.168.4.58 -p 6358 shutdown
       :wq

	192.168.4.57 执行添加master主机
[root@mgm57 ~]# redis-trib.rb  add-node  192.168.4.58:6358  192.168.4.53:6353
>>> Adding node 192.168.4.58:6358 to cluster 192.168.4.53:6353
>>> Performing Cluster Check (using node 192.168.4.53:6353)
M: 9e44139cffb8ebd7ed746aabbf4bcea9bf207645 192.168.4.53:6353
   slots:10923-16383 (5461 slots) master
   1 additional replica(s)
S: d9634ba0aa5c1a07193da4a013da6051c1515922 192.168.4.54:6354
   slots: (0 slots) slave
   replicates 9e44139cffb8ebd7ed746aabbf4bcea9bf207645
M: 324e05df3f143ef97e50d09be0328a695e655986 192.168.4.52:6352
   slots:5461-10922 (5462 slots) master
   1 additional replica(s)
S: 894dd0008053f6fb65e9e4a36b755d9351607500 192.168.4.56:6356
   slots: (0 slots) slave
   replicates 324e05df3f143ef97e50d09be0328a695e655986
S: d9f8fe6d6d9dd391be8e7904501db1535e4d17cb 192.168.4.51:6351
   slots: (0 slots) slave
   replicates 2d343a9df48f6f6e207949e980ef498466a44dad
M: 2d343a9df48f6f6e207949e980ef498466a44dad 192.168.4.55:6355
   slots:0-5460 (5461 slots) master
   1 additional replica(s)
[OK] All nodes agree about slots configuration.
>>> Check for open slots...
>>> Check slots coverage...
[OK] All 16384 slots covered.
>>> Send CLUSTER MEET to node 192.168.4.58:6358 to make it join the cluster.
[OK] New node added correctly.
[root@mgm57 ~]#


ot@mgm57 ~]# redis-trib.rb info 192.168.4.53:6353
192.168.4.53:6353 (9e44139c...) -> 3 keys | 5461 slots | 1 slaves.
192.168.4.52:6352 (324e05df...) -> 2 keys | 5462 slots | 1 slaves.
192.168.4.58:6358 (4fe1fa46...) -> 0 keys | 0 slots | 0 slaves.
192.168.4.55:6355 (2d343a9d...) -> 3 keys | 5461 slots | 1 slaves.
[OK] 8 keys in 4 masters.
0.00 keys per slot on average.
[root@mgm57 ~]#
[root@mgm57 ~]# redis-trib.rb check 192.168.4.53:6353
>>> Performing Cluster Check (using node 192.168.4.53:6353)
M: 9e44139cffb8ebd7ed746aabbf4bcea9bf207645 192.168.4.53:6353
   slots:10923-16383 (5461 slots) master
   1 additional replica(s)
S: d9634ba0aa5c1a07193da4a013da6051c1515922 192.168.4.54:6354
   slots: (0 slots) slave
   replicates 9e44139cffb8ebd7ed746aabbf4bcea9bf207645
M: 324e05df3f143ef97e50d09be0328a695e655986 192.168.4.52:6352
   slots:5461-10922 (5462 slots) master
   1 additional replica(s)
S: 894dd0008053f6fb65e9e4a36b755d9351607500 192.168.4.56:6356
   slots: (0 slots) slave
   replicates 324e05df3f143ef97e50d09be0328a695e655986
M: 4fe1fa467ad237802021f5aac5f1d5b3e0db47ef 192.168.4.58:6358
   slots: (0 slots) master
   0 additional replica(s)
S: d9f8fe6d6d9dd391be8e7904501db1535e4d17cb 192.168.4.51:6351
   slots: (0 slots) slave
   replicates 2d343a9df48f6f6e207949e980ef498466a44dad
M: 2d343a9df48f6f6e207949e980ef498466a44dad 192.168.4.55:6355
   slots:0-5460 (5461 slots) master
   1 additional replica(s)
[OK] All nodes agree about slots configuration.
>>> Check for open slots...
>>> Check slots coverage...
[OK] All 16384 slots covered.
[root@mgm57 ~]#




        192.168.4.57 执行分配hash槽
ving slot 1348 from 192.168.4.55:6355 to 192.168.4.58:6358:
Moving slot 1349 from 192.168.4.55:6355 to 192.168.4.58:6358:
Moving slot 1350 from 192.168.4.55:6355 to 192.168.4.58:6358:


[root@mgm57 ~]# redis-trib.rb info 192.168.4.53:6353
192.168.4.53:6353 (9e44139c...) -> 2 keys | 4096 slots | 1 slaves.
192.168.4.52:6352 (324e05df...) -> 1 keys | 4096 slots | 1 slaves.
192.168.4.58:6358 (4fe1fa46...) -> 4 keys | 4096 slots | 0 slaves.
192.168.4.55:6355 (2d343a9d...) -> 1 keys | 4096 slots | 1 slaves.
[OK] 8 keys in 4 masters.
0.00 keys per slot on average.
[root@mgm57 ~]#

[root@mgm57 ~]# redis-trib.rb check 192.168.4.53:6353

M: 4fe1fa467ad237802021f5aac5f1d5b3e0db47ef 192.168.4.58:6358
   slots:0-1364,5461-6826,10923-12287 (4096 slots) master
   0 additional replica(s)





[root@host50 ~]# redis-cli  -c -h 192.168.4.58 -p 6358
192.168.4.58:6358> keys *
1) "age"
2) "name2"
3) "y"
4) "name"
192.168.4.58:6358> set shcool tarena
-> Redirected to slot [5095] located at 192.168.4.55:6355
OK
192.168.4.55:6355>
192.168.4.55:6355> set shcool2 tarena
-> Redirected to slot [7047] located at 192.168.4.52:6352
OK
192.168.4.52:6352> set shcool3 tarena
-> Redirected to slot [2982] located at 192.168.4.55:6355
OK
192.168.4.55:6355> set shcool4 tarena
-> Redirected to slot [15169] located at 192.168.4.53:6353
OK
192.168.4.53:6353> set shcool5 tarena
-> Redirected to slot [11104] located at 192.168.4.58:6358
OK
192.168.4.58:6358>

		添加slave服务器	 192.168.4.59
		    192.168.4.59 运行服务并启用集群配置

		    192.168.4.59 执行添加slave服务器
           ]#redis-trib.rb  add-node  --slave  192.168.4.59:6359 192.168.4.51:6351
>>> Adding node 192.168.4.59:6359 to cluster 192.168.4.51:6351
>>> Performing Cluster Check (using node 192.168.4.51:6351)
S: d9f8fe6d6d9dd391be8e7904501db1535e4d17cb 192.168.4.51:6351
   slots: (0 slots) slave
   replicates 2d343a9df48f6f6e207949e980ef498466a44dad
S: 894dd0008053f6fb65e9e4a36b755d9351607500 192.168.4.56:6356
   slots: (0 slots) slave
   replicates 324e05df3f143ef97e50d09be0328a695e655986
M: 2d343a9df48f6f6e207949e980ef498466a44dad 192.168.4.55:6355
   slots:1365-5460 (4096 slots) master
   1 additional replica(s)
M: 9e44139cffb8ebd7ed746aabbf4bcea9bf207645 192.168.4.53:6353
   slots:12288-16383 (4096 slots) master
   1 additional replica(s)
S: d9634ba0aa5c1a07193da4a013da6051c1515922 192.168.4.54:6354
   slots: (0 slots) slave
   replicates 9e44139cffb8ebd7ed746aabbf4bcea9bf207645
M: 324e05df3f143ef97e50d09be0328a695e655986 192.168.4.52:6352
   slots:6827-10922 (4096 slots) master
   1 additional replica(s)
M: 4fe1fa467ad237802021f5aac5f1d5b3e0db47ef 192.168.4.58:6358
   slots:0-1364,5461-6826,10923-12287 (4096 slots) master
   0 additional replica(s)
[OK] All nodes agree about slots configuration.
>>> Check for open slots...
>>> Check slots coverage...
[OK] All 16384 slots covered.
Automatically selected master 192.168.4.58:6358
>>> Send CLUSTER MEET to node 192.168.4.59:6359 to make it join the cluster.
Waiting for the cluster to join.
>>> Configure node as replica of 192.168.4.58:6358.
[OK] New node added correctly.
[root@mgm57 ~]#


[root@mgm57 ~]# redis-trib.rb  info  192.168.4.51:6351
192.168.4.55:6355 (2d343a9d...) -> 3 keys | 4096 slots | 1 slaves.
192.168.4.53:6353 (9e44139c...) -> 3 keys | 4096 slots | 1 slaves.
192.168.4.52:6352 (324e05df...) -> 2 keys | 4096 slots | 1 slaves.
192.168.4.58:6358 (4fe1fa46...) -> 5 keys | 4096 slots | 1 slaves.
[OK] 13 keys in 4 masters.
0.00 keys per slot on average.
[root@mgm57 ~]#


	   ]# redis-trib.rb check 192.168.4.51:6351


ot@mgm57 ~]# redis-trib.rb  check  192.168.4.51:6351
>>> Performing Cluster Check (using node 192.168.4.51:6351)
S: d9f8fe6d6d9dd391be8e7904501db1535e4d17cb 192.168.4.51:6351
   slots: (0 slots) slave
   replicates 2d343a9df48f6f6e207949e980ef498466a44dad
S: 7f3fa4f20c8c516d5b412ecc22550ed8e7bb8d7a 192.168.4.59:6359
   slots: (0 slots) slave
   replicates 4fe1fa467ad237802021f5aac5f1d5b3e0db47ef
S: 894dd0008053f6fb65e9e4a36b755d9351607500 192.168.4.56:6356
   slots: (0 slots) slave
   replicates 324e05df3f143ef97e50d09be0328a695e655986
M: 2d343a9df48f6f6e207949e980ef498466a44dad 192.168.4.55:6355
   slots:1365-5460 (4096 slots) master
   1 additional replica(s)
M: 9e44139cffb8ebd7ed746aabbf4bcea9bf207645 192.168.4.53:6353
   slots:12288-16383 (4096 slots) master
   1 additional replica(s)
S: d9634ba0aa5c1a07193da4a013da6051c1515922 192.168.4.54:6354
   slots: (0 slots) slave
   replicates 9e44139cffb8ebd7ed746aabbf4bcea9bf207645
M: 324e05df3f143ef97e50d09be0328a695e655986 192.168.4.52:6352
   slots:6827-10922 (4096 slots) master
   1 additional replica(s)
M: 4fe1fa467ad237802021f5aac5f1d5b3e0db47ef 192.168.4.58:6358
   slots:0-1364,5461-6826,10923-12287 (4096 slots) master
   1 additional replica(s)
[OK] All nodes agree about slots configuration.
>>> Check for open slots...
>>> Check slots coverage...
[OK] All 16384 slots covered.
[root@mgm57 ~]#


		   192.168.4.50 访问从服务器192.168.4.59
		   ]# redis-cli -c  -h 192.168.4.59 -p 6359
		   > keys *  自动同步主服务器数据
[root@host50 ~]# redis-cli  -c -h 192.168.4.59 -p 6359
192.168.4.59:6359> keys *
1) "name"
2) "name2"
3) "age"
4) "y"
5) "shcool5"
192.168.4.59:6359>

		休息到 17：40
		192.168.4.57 执行移除slave角色服务器
[root@mgm57 ~]# redis-trib.rb  info  192.168.4.51:6351
192.168.4.55:6355 (2d343a9d...) -> 3 keys | 4096 slots | 1 slaves.
192.168.4.53:6353 (9e44139c...) -> 3 keys | 4096 slots | 1 slaves.
192.168.4.52:6352 (324e05df...) -> 2 keys | 4096 slots | 1 slaves.
192.168.4.58:6358 (4fe1fa46...) -> 5 keys | 4096 slots | 1 slaves.
[OK] 13 keys in 4 masters.
0.00 keys per slot on average.
[root@mgm57 ~]#
[root@mgm57 ~]# redis-trib.rb  check  192.168.4.51:6351
>>> Performing Cluster Check (using node 192.168.4.51:6351)
S: d9f8fe6d6d9dd391be8e7904501db1535e4d17cb 192.168.4.51:6351
   slots: (0 slots) slave
   replicates 2d343a9df48f6f6e207949e980ef498466a44dad
S: 7f3fa4f20c8c516d5b412ecc22550ed8e7bb8d7a 192.168.4.59:6359
   slots: (0 slots) slave
   replicates 4fe1fa467ad237802021f5aac5f1d5b3e0db47ef
S: 894dd0008053f6fb65e9e4a36b755d9351607500 192.168.4.56:6356
   slots: (0 slots) slave
   replicates 324e05df3f143ef97e50d09be0328a695e655986
M: 2d343a9df48f6f6e207949e980ef498466a44dad 192.168.4.55:6355
   slots:1365-5460 (4096 slots) master
   1 additional replica(s)
M: 9e44139cffb8ebd7ed746aabbf4bcea9bf207645 192.168.4.53:6353
   slots:12288-16383 (4096 slots) master
   1 additional replica(s)
S: d9634ba0aa5c1a07193da4a013da6051c1515922 192.168.4.54:6354
   slots: (0 slots) slave
   replicates 9e44139cffb8ebd7ed746aabbf4bcea9bf207645
M: 324e05df3f143ef97e50d09be0328a695e655986 192.168.4.52:6352
   slots:6827-10922 (4096 slots) master
   1 additional replica(s)
M: 4fe1fa467ad237802021f5aac5f1d5b3e0db47ef 192.168.4.58:6358
   slots:0-1364,5461-6826,10923-12287 (4096 slots) master
   1 additional replica(s)
[OK] All nodes agree about slots configuration.
>>> Check for open slots...
>>> Check slots coverage...
[OK] All 16384 slots covered.
[root@mgm57 ~]#
[root@mgm57 ~]#
[root@mgm57 ~]#
[root@mgm57 ~]#
[root@mgm57 ~]# redis-trib.rb  check  192.168.4.51:6351
>>> Performing Cluster Check (using node 192.168.4.51:6351)
S: d9f8fe6d6d9dd391be8e7904501db1535e4d17cb 192.168.4.51:6351
   slots: (0 slots) slave
   replicates 2d343a9df48f6f6e207949e980ef498466a44dad
S: 7f3fa4f20c8c516d5b412ecc22550ed8e7bb8d7a 192.168.4.59:6359
   slots: (0 slots) slave
   replicates 4fe1fa467ad237802021f5aac5f1d5b3e0db47ef
S: 894dd0008053f6fb65e9e4a36b755d9351607500 192.168.4.56:6356
   slots: (0 slots) slave
   replicates 324e05df3f143ef97e50d09be0328a695e655986
M: 2d343a9df48f6f6e207949e980ef498466a44dad 192.168.4.55:6355
   slots:1365-5460 (4096 slots) master
   1 additional replica(s)
M: 9e44139cffb8ebd7ed746aabbf4bcea9bf207645 192.168.4.53:6353
   slots:12288-16383 (4096 slots) master
   1 additional replica(s)
S: d9634ba0aa5c1a07193da4a013da6051c1515922 192.168.4.54:6354
   slots: (0 slots) slave
   replicates 9e44139cffb8ebd7ed746aabbf4bcea9bf207645
M: 324e05df3f143ef97e50d09be0328a695e655986 192.168.4.52:6352
   slots:6827-10922 (4096 slots) master
   1 additional replica(s)
M: 4fe1fa467ad237802021f5aac5f1d5b3e0db47ef 192.168.4.58:6358
   slots:0-1364,5461-6826,10923-12287 (4096 slots) master
   1 additional replica(s)
[OK] All nodes agree about slots configuration.
>>> Check for open slots...
>>> Check slots coverage...
[OK] All 16384 slots covered.
[root@mgm57 ~]#
[root@mgm57 ~]# redis-trib.rb  info  192.168.4.51:6351
192.168.4.55:6355 (2d343a9d...) -> 3 keys | 4096 slots | 1 slaves.
192.168.4.53:6353 (9e44139c...) -> 3 keys | 4096 slots | 1 slaves.
192.168.4.52:6352 (324e05df...) -> 2 keys | 4096 slots | 1 slaves.
192.168.4.58:6358 (4fe1fa46...) -> 5 keys | 4096 slots | 1 slaves.
[OK] 13 keys in 4 masters.
0.00 keys per slot on average.
[root@mgm57 ~]# redis-trib.rb  check  192.168.4.51:6351
>>> Performing Cluster Check (using node 192.168.4.51:6351)
S: d9f8fe6d6d9dd391be8e7904501db1535e4d17cb 192.168.4.51:6351
   slots: (0 slots) slave
   replicates 2d343a9df48f6f6e207949e980ef498466a44dad
S: 7f3fa4f20c8c516d5b412ecc22550ed8e7bb8d7a 192.168.4.59:6359
   slots: (0 slots) slave
   replicates 4fe1fa467ad237802021f5aac5f1d5b3e0db47ef
S: 894dd0008053f6fb65e9e4a36b755d9351607500 192.168.4.56:6356
   slots: (0 slots) slave
   replicates 324e05df3f143ef97e50d09be0328a695e655986
M: 2d343a9df48f6f6e207949e980ef498466a44dad 192.168.4.55:6355
   slots:1365-5460 (4096 slots) master
   1 additional replica(s)
M: 9e44139cffb8ebd7ed746aabbf4bcea9bf207645 192.168.4.53:6353
   slots:12288-16383 (4096 slots) master
   1 additional replica(s)
S: d9634ba0aa5c1a07193da4a013da6051c1515922 192.168.4.54:6354
   slots: (0 slots) slave
   replicates 9e44139cffb8ebd7ed746aabbf4bcea9bf207645
M: 324e05df3f143ef97e50d09be0328a695e655986 192.168.4.52:6352
   slots:6827-10922 (4096 slots) master
   1 additional replica(s)
M: 4fe1fa467ad237802021f5aac5f1d5b3e0db47ef 192.168.4.58:6358
   slots:0-1364,5461-6826,10923-12287 (4096 slots) master
   1 additional replica(s)
[OK] All nodes agree about slots configuration.
>>> Check for open slots...
>>> Check slots coverage...
[OK] All 16384 slots covered.
[root@mgm57 ~]#
[root@mgm57 ~]#
[root@mgm57 ~]#
[root@mgm57 ~]# redis-trib.rb  del-node 192.168.4.51:6351 7f3fa4f20c8c516d5b412ecc22550ed8e7bb8d7a
>>> Removing node 7f3fa4f20c8c516d5b412ecc22550ed8e7bb8d7a from cluster 192.168.4.51:6351
>>> Sending CLUSTER FORGET messages to the cluster...
>>> SHUTDOWN the node.
[root@mgm57 ~]#
[root@mgm57 ~]# redis-trib.rb  info  192.168.4.51:6351192.168.4.55:6355 (2d343a9d...) -> 3 keys | 4096 slots | 1 slaves.
192.168.4.53:6353 (9e44139c...) -> 3 keys | 4096 slots | 1 slaves.
192.168.4.52:6352 (324e05df...) -> 2 keys | 4096 slots | 1 slaves.
192.168.4.58:6358 (4fe1fa46...) -> 5 keys | 4096 slots | 0 slaves.
[OK] 13 keys in 4 masters.
0.00 keys per slot on average.
[root@mgm57 ~]#
[root@mgm57 ~]# redis-trib.rb  check  192.168.4.51:6351>>> Performing Cluster Check (using node 192.168.4.51:6351)
S: d9f8fe6d6d9dd391be8e7904501db1535e4d17cb 192.168.4.51:6351
   slots: (0 slots) slave
   replicates 2d343a9df48f6f6e207949e980ef498466a44dad
S: 894dd0008053f6fb65e9e4a36b755d9351607500 192.168.4.56:6356
   slots: (0 slots) slave
   replicates 324e05df3f143ef97e50d09be0328a695e655986
M: 2d343a9df48f6f6e207949e980ef498466a44dad 192.168.4.55:6355
   slots:1365-5460 (4096 slots) master
   1 additional replica(s)
M: 9e44139cffb8ebd7ed746aabbf4bcea9bf207645 192.168.4.53:6353
   slots:12288-16383 (4096 slots) master
   1 additional replica(s)
S: d9634ba0aa5c1a07193da4a013da6051c1515922 192.168.4.54:6354
   slots: (0 slots) slave
   replicates 9e44139cffb8ebd7ed746aabbf4bcea9bf207645
M: 324e05df3f143ef97e50d09be0328a695e655986 192.168.4.52:6352
   slots:6827-10922 (4096 slots) master
   1 additional replica(s)
M: 4fe1fa467ad237802021f5aac5f1d5b3e0db47ef 192.168.4.58:6358
   slots:0-1364,5461-6826,10923-12287 (4096 slots) master
   0 additional replica(s)
[OK] All nodes agree about slots configuration.
>>> Check for open slots...
>>> Check slots coverage...
[OK] All 16384 slots covered.
[root@mgm57 ~]#


		192.168.4.57 执行移除master角色服务器
]# redis-trib.rb reshard 192.168.4.51:6351  释放hash槽
指定移出slots   个数
指定接收slots   主机ID
指定移出slots   主机ID

			移除master主机
]# redis-trib.rb  del-node 192.168.4.51:6351  \  e081313ec843655d9bc5a17f3bed3de1dccb1d2b
>>> Removing node e081313ec843655d9bc5a17f3bed3de1dccb1d2b from cluster 192.168.4.51:6351
>>> Sending CLUSTER FORGET messages to the cluster...
>>> SHUTDOWN the node.

++++++++++++NoSQL_DAY03
一、主从复制
	info replication
	slaveof  master_ip   master_port
        slaveof  no one

	配置文件选项 slaveof  master_ip   master_port

        配置带验证的主从复制


二、数据持久化
	2.1  RDB（默认）
[root@host58 6379]# cp /var/lib/redis/6379/dump.rdb   /root/
[root@host58 6379]# ls /root/dump.rdb
/root/dump.rdb
[root@host58 6379]# scp  /root/dump.rdb  root@192.168.4.59:/tmp/

[root@host59 ~]# /etc/init.d/redis_6379 stop
[root@host59 ~]# cd /var/lib/redis/6379/
[root@host59 6379]# rm -rf dump.rdb
[root@host59 6379]# cp /tmp/dump.rdb ./
[root@host59 6379]# ls
dump.rdb
[root@host59 6379]# /etc/init.d/redis_6379 start
[root@host59 6379]# redis-cli  -h 192.168.4.59 -p 6359
192.168.4.59:6359> keys *

		练习到 14：18

  262  /etc/init.d/redis_6379  stop

  264  rm -rf /var/lib/redis/6379/dump.rdb
  265  vim /etc/redis/6379.conf
	save 900  1
	save  120  10
	save  60 10000
      :wq

  266  /etc/init.d/redis_6379  start
  267  ls /var/lib/redis/6379/

  ]# redis-cli -h 192.168.4.58 -p 6358
      2分钟内 存储大于或等于10个变量后，会自动创建dump.rdb文件

	2.2  AOF
192.168.4.58:
> config  set  appendonly  yes    //启用
> config  rewrite
> save
> exit

]#cd /var/lib/redis/6379/
]#cp  appendonly.aof  /root/
]# scp   /root/appendonly.aof  root@192.168.4.59:/tmp/

192.168.4.59
[root@host59 ~]# redis-cli  -h 192.168.4.59 -p 6359
192.168.4.59:6359> flushall
OK
192.168.4.59:6359> keys *
(empty list or set)
192.168.4.59:6359> config set appendonly yes
OK
192.168.4.59:6359> config rewrite
OK
192.168.4.59:6359> exit
[root@host59 ~]# /etc/init.d/redis_6379 stop

[root@host59 6379]# cp /tmp/appendonly.aof  ./
cp：是否覆盖"./appendonly.aof"？ y
[root@host59 6379]# ls
appendonly.aof  dump.rdb
[root@host59 6379]#
[root@host59 6379]# /etc/init.d/redis_6379 start
Starting Redis server...
[root@host59 6379]# redis-cli  -h 192.168.4.59 -p 6359
192.168.4.59:6359> keys *
			休息到 15：25


三、数据类型


192.168.4.58:6358> set tel 18101918866
OK
192.168.4.58:6358> get tel
"18101918866"
192.168.4.58:6358> SETRANGE tel 4 ***
(integer) 11
192.168.4.58:6358> get tel
"1810***8866"
192.168.4.58:6358> keys *
1) "y"
2) "tel"
3) "x"
192.168.4.58:6358> get x
"77"
192.168.4.58:6358> STRLEN x
(integer) 2
192.168.4.58:6358> APPEND x 88
(integer) 4
192.168.4.58:6358> get x
"7788"
192.168.4.58:6358> APPEND x2 66
(integer) 2
192.168.4.58:6358> keys *
1) "y"
2) "x2"
3) "tel"
4) "x"
192.168.4.58:6358>
192.168.4.58:6358>



nteger) 7787
192.168.4.58:6358> decr x
(integer) 7786
192.168.4.58:6358> decr x
(integer) 7785
192.168.4.58:6358> get x
"7785"
192.168.4.58:6358> decr x3
(integer) -1
192.168.4.58:6358> get x3
"-1"
192.168.4.58:6358> decrby x 5
(integer) 7780
192.168.4.58:6358> decrby x 5
(integer) 7775
192.168.4.58:6358> get x
"7775"
192.168.4.58:6358> 1G=1024M
1M=1024K
1K=1024byte
1字节=8位 11111111
	  00000000
192.168.4.58:6358> setbit  baobao  1 0
(integer) 0
192.168.4.58:6358> setbit  baobao  2 1
(integer) 0
192.168.4.58:6358> setbit  baobao  3 0
(integer) 0
192.168.4.58:6358> setbit  baobao  4 1
(integer) 0
192.168.4.58:6358> setbit  baobao  5 1
(integer) 0
192.168.4.58:6358> setbit  baobao  6 1
(integer) 0
192.168.4.58:6358> setbit  baobao  7 0
(integer) 0
192.168.4.58:6358> BITCOUNT baobao
(integer) 4
i




192.168.4.58:6358> set zm  abcdef
OK
192.168.4.58:6358> get zm
"abcdef"
192.168.4.58:6358> GETRANGE zm -2 -1
"ef"
192.168.4.58:6358> GETRANGE zm -3 -1
"def"
192.168.4.58:6358>
192.168.4.58:6358> GETRANGE zm 1 3
"bcd"
192.168.4.58:6358> GETRANGE zm 0 1
"ab"
192.168.4.58:6358> GETRANGE zm 2 4
"cde"
192.168.4.58:6358>



192.168.4.58:6358> set x 4
OK
192.168.4.58:6358> INCR x
(integer) 5
192.168.4.58:6358> INCR x
(integer) 6
192.168.4.58:6358> get x
"6"
192.168.4.58:6358>
192.168.4.58:6358> incrby x 3
(integer) 9
192.168.4.58:6358> incrby x 3
(integer) 12
192.168.4.58:6358> get x
"12"
192.168.4.58:6358> INCRBY x 0.5
(error) ERR value is not an integer or out of range
192.168.4.58:6358>
192.168.4.58:6358> INCRBYFLOAT x 0.5
"12.5"
192.168.4.58:6358> get x
"12.5"
192.168.4.58:6358>

List列表

192.168.4.58:6358> lpush mstu bob  tom  jim  lucy
(integer) 4
192.168.4.58:6358> keys *
1) "zm"
2) "mstu"
3) "x"
192.168.4.58:6358> type mstu
list
192.168.4.58:6358>
192.168.4.58:6358> get mstu
(error) WRONGTYPE Operation against a key holding the wrong kind of value
192.168.4.58:6358>
192.168.4.58:6358> lpush mstu jack mack
(integer) 6
192.168.4.58:6358> LRANGE mstu 0 -1
1) "mack"
2) "jack"
3) "lucy"
4) "jim"
5) "tom"
6) "bob"
192.168.4.58:6358>

192.168.4.58:6358> LRANGE mstu 0 1
1) "mack"
2) "jack"
192.168.4.58:6358> LRANGE mstu 2 4
1) "lucy"
2) "jim"
3) "tom"
192.168.4.58:6358> LRANGE mstu -2 -1
1) "tom"
2) "bob"
192.168.4.58:6358>


192.168.4.58:6358> LRANGE mstu 0 -1
1) "mack"
2) "jack"
3) "lucy"
4) "jim"
5) "tom"
6) "bob"
192.168.4.58:6358> lpop mstu
"mack"
192.168.4.58:6358> LRANGE mstu 0 -1
1) "jack"
2) "lucy"
3) "jim"
4) "tom"
5) "bob"
192.168.4.58:6358> lpop mstu2
(nil)
192.168.4.58:6358> LLEN mstu
(integer) 5
192.168.4.58:6358>


192.168.4.58:6358> LRANGE mstu 0 -1
1) "jack"
2) "lucy"
3) "jim"
4) "tom"
5) "bob"
192.168.4.58:6358> LINDEX mstu 0
"jack"
192.168.4.58:6358> LINDEX mstu 2
"jim"
192.168.4.58:6358> LINDEX mstu -1
"bob"
192.168.4.58:6358> lset mstu 0 jerry
OK
192.168.4.58:6358> LINDEX mstu 0
"jerry"
192.168.4.58:6358> rpush mstu bob2
(integer) 6
192.168.4.58:6358> LRANGE mstu 0 -1
1) "jerry"
2) "lucy"
3) "jim"
4) "tom"
5) "bob"
6) "bob2"
192.168.4.58:6358>


192.168.4.58:6358> LRANGE mstu 0 -1
1) "jerry"
2) "lucy"
3) "jim"
4) "tom"
5) "bob"
6) "bob2"
192.168.4.58:6358> rpop mstu
"bob2"
192.168.4.58:6358> lpop mstu
"jerry"
192.168.4.58:6358> LRANGE mstu 0 -1
1) "lucy"
2) "jim"
3) "tom"
4) "bob"
192.168.4.58:6358>


Hash表    【 17:25 上课 】

set  bookname  xxx
set  worker    yyy
set  money     21
set  fx        rmcbs

		hmset book bookname xxx worker yyy money 21  fx rmcbs

192.168.4.58:6358>  hmset book bookname xxx worker yyy money 21  fx rmcbs
OK
192.168.4.58:6358> keys *
1) "book"
192.168.4.58:6358> type book
hash
192.168.4.58:6358>
192.168.4.58:6358> get book
(error) WRONGTYPE Operation against a key holding the wrong kind of value
192.168.4.58:6358> hmget book bookname worker
1) "xxx"
2) "yyy"
192.168.4.58:6358>

192.168.4.50:6350> hmset site sina  www.sina.com.cn tarena www.tedu.cn
OK
192.168.4.50:6350> hkeys site
1) "google"
2) "baidu"
3) "sina"
4) "tarena"
192.168.4.50:6350> HVALS site
1) "www.g.cn"
2) "www.baidu.com"
3) "www.sina.com.cn"
4) "www.tedu.cn"
192.168.4.50:6350> HGETALL site
1) "google"
2) "www.g.cn"
3) "baidu"
4) "www.baidu.com"
5) "sina"
6) "www.sina.com.cn"
7) "tarena"
8) "www.tedu.cn"
192.168.4.50:6350>
192.168.4.50:6350> hkeys site
1) "google"
2) "baidu"
3) "sina"
4) "tarena"
192.168.4.50:6350> hdel site baidu sina
(integer) 2
192.168.4.50:6350> hkeys site
1) "google"
2) "tarena"
192.168.4.50:6350>
192.168.4.50:6350> keys *
1) "site"
192.168.4.50:6350> del site
(integer) 1
192.168.4.50:6350> keys *
(empty list or set)
192.168.4.50:6350>

+++++++++++++++++++++++++++++++++++
IDC监控

监控与服务安全_day01
一、监控概述
	1.1 相关概念

二、Zabbix基础
	2.1 Zabbix简介
	2.2 搭建zabbix监控服务器
		2.2.1 部署LNMP
		2.2.2 部署Zabbix
			1 安装源码zabbix软件
			2 初始化准备
			3 初始化配置 http://192.168.2.5/index.php
			  ]# cat /usr/local/nginx/html/conf/zabbix.conf.php
			4 使用初始密码登陆
			5 环境配置
			6 运行zabbix_server服务
				6.1 修改服务主配置文件
				6.2 启动服务

三、Zabbix监控服务
		3.1 监控远端主机 192.168.2.100
			3.1.1 配置客户端 192.168.2.100
				1 安装zabbix源码软件
				2 修改配置文件
				3 启动zabbix_agentd服务

			3.1.2 配置服务器 192.168.2.5
				登陆管理页面做如下操作：
				 1 添加监控主机
				 2 应用监控模板
				 3 查看监控数据

		3.2 自定义监控(在客户端创建监控命令，给监控服务器使用)
			3.2.1 配置客户端 192.168.2.100
				1 启用自定义监控
]# vim /usr/local/etc/zabbix_agentd.conf
264 Include=/usr/local/etc/zabbix_agentd.conf.d/
280 UnsafeUserParameters=1
:wq

				2 定义监控命令
]# cd /usr/local/etc/zabbix_agentd.conf.d/
]# vim  count.line.passwd
   UserParameter=count.line.passwd,wc -l /etc/passwd | awk ' {print $1} '
:wq

				3 重启服务
				]# killall -9  zabbix_agentd
				]# zabbix_agentd

				4 测试监控命令
web100 ~]# zabbix_get  -s 127.0.0.1 -p 10050  -k count.line.passwd


			3.2.2 配置监控服务器
				测试客户端定义的监控命令
zabbix-server ~]# zabbix_get  -s 192.168.2.100 -p 10050  -k count.line.passwd
				登陆web页面做如下操作：
				1 创建监控模板 A_tmp1
				2 创建应用集   user-count
				3 创建监控项(并关联命令)monitor_100_users
				4 将模板关联主机（调用创建的监控模板）
				5 查看监控数据

课外练习：
192.168.2.5 监控服务器，对本机器做监控，
监控本机器nginx服务的运行状态，及系统状态、及系统总用户数量
           80                     0S

+++++++++监控与服务安全_day02
监控服务器
	设置IP地址（192.168.2.5）
一、Zabbix报警机制
	1.1 相关概念 ：
		创建触发器   tone

		配置邮件服务:(在监控服务器本机运行邮件服务)
				]# yum -y  install postfix
  				]# rpm -q postfix
  				]# systemctl  start postfix
  				]# netstat -utnlp  | grep  :25
]# vim /etc/hosts
127.0.0.1       zabbix-server  localhost localhost.localdomain localhost4 localhost4.localdomain4
:wq

]# yum -y  install mailx
[root@zabbix-server ~]# which  mailx
/usr/bin/mailx
[root@zabbix-server ~]# mail -s "xxx"  zabbix  < /etc/yum.repos.d/local.repo
[root@zabbix-server ~]#
[root@zabbix-server ~]# su - zabbix
[zabbix@zabbix-server ~]$
[zabbix@zabbix-server ~]$ mail
Heirloom Mail version 12.5 7/5/10.  Type ? for help.
"/var/spool/mail/zabbix": 1 message 1 new
>N  1 root                  Fri Jun 28 09:48  22/734   "xxx"
& exit
[zabbix@zabbix-server ~]$ exit
logout
[root@zabbix-server ~]#

		指定邮件服务器
		创建Media （指定收件人）
		创建Action   名aone
		验证配置： 监控到主机100的用户数量大于28个时,zabbix@localhost邮箱是否收到邮件。


补充:
########################################
zabbix监控磁盘剩余容量 (被动模式) 可以参考
http://www.zsythink.net/archives/670
在检测 磁盘 剩余容量的	使用的 key 值
vfs.fs.size[/,pused]  使用 zabbix_get 测试
           路径,free/total/pused
           需要注意的是 free/total 返回的值是整数 返回百分比 是浮点
           在创建监控项目的时候需要注意 信息类型
           如果返回的是字节则是整数，如果返回的是百分比则是浮点。
导出的 xml 文件 会在 本文件夹下 zbx_disk_io_templates.xml
########################################



二、Zabbix进阶操作
		2.1 自动发现
			创建自动发现规则
			创建动作




		2.2 主被动监控
			主动监控       server<-------client

			被动监控（默认） server -----> client

			配置主动监控
				1 配置客户端 192.168.2.201
					安装zabbix软件
					修改服务，运行时是主动模式
					启动服务

				2 配置服务器 192.168.2.5
					登陆管理页面做如下配置：
					  1 克隆模板          14：32
					  2 修改监控项模式
					3 添加监控主机 201
					4 查看数据图表
		2.3 拓扑图与聚合图形
			1 拓扑图
			2 聚合图形

三、监控案例
	3.1 监控Nginx  (192.168.2.100)
		 环境准备：部署Nginx时要加载status模块

                 在客户端创建监控命令 nginx.status[*]

	         登陆监控服务的管理页面做如下配置:
				1 创建监控模板 	Atmp2
				2 创建应用集      mon-nginx
				3 创建监控项 并关联到对应的监控命令
				now_link_num  	  nginx.status[Active]
				now_link_req	  nginx.status[accepts]
				now_waiting_num   nginx.status[Waiting]

				4 添加监控主机 并调用监控模板
				5 查看监控数据




监控客户端
	主机192.168.2.5
	主机web2（192.168.2.100）
