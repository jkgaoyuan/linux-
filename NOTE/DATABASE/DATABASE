第三阶段 数据库 (重要) 职业--DBA
静静老师
邮箱: 有问题可以发邮件
panglj@tedu.cn
402er
        SQL语句执顺序
            执行FROM ---> where--->group by--->聚合函数having--->order by (排序)

    关系型数据库-RDBMS        MYSQL       数据库管理员 DBA
    非关系型的数据库-NOsql     Redis       运维工程师  DBA

    学完后可以 做 监控与安全

    DAY01
            解包
            安装软件包
            启动mysql服务
            查看服务进程和端口
            查看初始登录密码
            使用初始密码登录
            修改登录密码
            断开链接
            使用修改后密码登录
            根据新密码策略设置密码
            使用新密码登录

        1.搭建数据库
            1.1 相关概念
                DB---database
                数据库
                依照某种数据模型进行组织并存放到存储器的数据合集
                DBMS---database management system
                数据库管理系统
                用来操作和管理数据库的服务软件
                DBS---database system
                数据库系统
                指带有数据库并整合了数据库管理软件的计算机系统


                    软件名      开源 跨平台
                --- Oracle      n   y
                |   mysql       y   y
              RDBMS sqlserver   n   y
                |- -db2         n   y
                    redis       y   y
                    memcache    y   y
                    mongodb     y   y

                MYSQL 特点:
                            中小型规模,关系型数据库
                            跨平台
                            支持 Python Java perl php 等编程语言

                应用环境:
                            LAMP 与Apache HTTP Server 组合
                            LNMP 与Nginx 组合

                相关参数
                       文件               说明
                       /etc/my.conf      主配置文件
                       /var/lib/mysql    数据库主目录
                       默认端口号          3306
                       进程名              mysqld
                       传输协议             tcp
                       进程所有者           mysql
                       进程所属组           mysql
                       错误日志             /var/log/mysqld.log
                装包

                    tar -xvf mysql-5.7.17.tar
                    yum -y install mysql-community-*.rpm
                    rpm -qa | grep -i mysql

                起服务
                    systemctl restart mysqld
                    mysql
                    ls /var/lib/mysql/
                开机自启
                    systemctl enable mysqld
                查看服务启动
                    ss -antulp | grep mysqld
            1.2 初始密码登录
                    ################用户密码默认由软件生成###########################
                    [root@DBA mysql]# grep 'password' /var/log/mysqld.log
                    2019-06-06T02:11:08.044931Z 1 [Note] A temporary password is generated for root@localhost: lKpqL5QO4+=:
                    2019-06-06T02:11:52.610948Z 3 [Note] Access denied for user 'root'@'localhost' (using password: NO)
                    [root@DBA mysql]# cd
                    #######第一次登录时只能由 hlocalhost  登入 ########################
                    [root@DBA ~]# mysql -hlocalhost -uroot -p'lKpqL5QO4+=:'  ###不能有空格
                    ##########设置root的新密码####################################
                    mysql> alter user root@"localhost" identified by "123qqq...A";
                    Query OK, 0 rows affected (0.00 sec)
                    ###############使用 root 新密码登录, 在本机登录时 -hlocalhost 可以;省略##########
                    [root@DBA ~]# mysql -uroot -p123qqq...A
            1.3 修改密码策略 (可选项)
                    0 or LOW       长度
                    1 or MEDIUM    长度;数字,小写/大写 和特殊字符
                    2 or STRONG    长度;数字,小写/大写 和特殊字符 ;字典文件
            查看变量
                    模糊查找:(只要包含这个字段就行)
                        使用两个%将需要匹配的字段包起来.
                    去掉  两个% 是精确匹配
                    mysql> show variables like "%password%";
                    +---------------------------------------+--------+
                    | Variable_name                         | Value  |
                    +---------------------------------------+--------+
                    | default_password_lifetime             | 0      |
                    | disconnect_on_expired_password        | ON     |
                    | log_builtin_as_identified_by_password | OFF    |
                    | mysql_native_password_proxy_users     | OFF    |
                    | old_passwords                         | 0      |
                    | report_password                       |        |
                    | sha256_password_proxy_users           | OFF    |
                    | validate_password_check_user_name     | OFF    |
                    | validate_password_dictionary_file     |        |
                    | validate_password_length              | 8      |
                    | validate_password_mixed_case_count    | 1      |
                    | validate_password_number_count        | 1      |
                    | validate_password_policy              | MEDIUM |
                    | validate_password_special_char_count  | 1      |
                    +---------------------------------------+--------+
                    14 rows in set (0.01 sec)
                   修改密码策略
                    mysql> set global validate_password_policy=0;
                    Query OK, 0 rows affected (0.00 sec)
                    修改`密码长度
                    mysql> set global validate_password_length=6;
                    Query OK, 0 rows affected (0.00 sec)
                    永久修改配置
                    [root@DBA ~]# vim /etc/my.cnf
                    [mysqld]
                    #手动添加 默认没有
                    validate_password_policy=0
                    validate_password_length=6

                   设置新密码
                    mysql> alter user root@"localhost" identified by "tarena";  Query OK, 0 rows affected (0.00 sec)
                    mysql> exit
                    Bye
                   使用新密码登录
                    [root@DBA ~]# mysql -uroot -ptarena


        2.数据库服务的基本使用
            2.1链接mysql服务
                1.链接方式
                    1)命令行

                        访问数据库
                        mysql -h服务器ip -u用户名 -p密码[数据库名选填]
                        显示目前位置(我在哪里)
                        mysql> select database();
                        +------------+
                        | database() |
                        +------------+
                        | NULL       |
                        +------------+
                        1 row in set (0.00 sec)

                    2)web界面
                    3)安装图形软件
                    4)编写脚本(php java Python)

                2.数据存储流程
                     连接数据库服务器
                     建库               库类似于文件夹
                     建表               表类似于文件
                     插入数据
                     断开连接 TCP

                     SQL 结构化查询语句
                        sql语句不区分大小写 (密码,变量除外)
                        语句以 ; 结束 只有少数 不用加 ;
                        只有少数;命令可以tab
                        \c ;之前 或者ctrl + c 结束命令
                     SQL命令分类
                        DDL  数据定义语言  create alter drop
                        DML  数据操作语言  insert update delete
                        DCL  数据控制语言  grant revoke
                        DTL  数据事物语言  commit  rollback

                2.mysql管理环境
                    1)show databases; 显示已有的库
                        不要删除,修改已有的库 ,新建库存放数据
                    2)select user(); 显示链接用户
                    3)use 库名;       切换库
                    4)select database(); 显示当前所在的库
                    5)create database 库名; 创建新库
                        库名 命名规则
                            只能 用数字 字母 下划线不能纯数字
                            区分字母大小写 具有唯一性
                            不能使用关键词 特殊字符

                            mysql> create table db1.学生表(
                           姓名 char(10),
                           家庭地址 char(20)
                           ) DEFAULT CHARSET=utf8; ####添加参数支持中文

                            mysql> insert into db1.学生表 values("张三丰","武当山");
                            mysql> insert into db1.学生表 values("张四丰","武台山");
                            mysql> select  * from  db1.学生表;

                    6)show tables ; 显示已有的表
                    7)drop database 库名; 删除库
                表管理命令
                    1)select * from 库名.表名;
                    2)insert into 库名.表名;
                    3)update 库名.表名 set 字段=值;
                    4)delete from 库名.表名;  删除表单中的所有数据,但不删除表
                    5)create table 库名.表名;
                    7)drop table 表名； 删除表



        3.Mysql数据类型
            字符
                char varchar
            数值
                整型

                    tinyint smallint int bigint
                浮点
                     float  单精度 0-2^32-1
                     double 双精度 0-2^64-1
                     mysql> create table db1.t5 (name char(10), level  tinyint );
                mysql> insert into  db1.t5 values ("zbj",-1);
                mysql> insert into  db1.t5 values ("zbj",-129);
                mysql> insert into  db1.t5 values ("zbj",198);

                mysql> create table db1.t6 (name char(10), level  tinyint unsigned);
                mysql> insert into  db1.t6 values ("zbj",-1);
                mysql> insert into  db1.t6 values ("zbj",0);
                mysql> insert into  db1.t6 values ("zbj",256);
                mysql> insert into  db1.t6 values ("zbj",25);
                mysql> insert into  db1.t6 values ("zbj",25.22);
                mysql> insert into  db1.t6 values ("zbj",25.52);

                mysql> create  table db1.t3(pay float , id double);
                mysql> insert into db1.t3 values(9999.23,9999.77);

                mysql> create  table db1.t4( pay float(5,2) , id double(4,2) );
                mysql> insert into db1.t4 values(9999.23,9999.77);

                mysql> create table  db1.t7(stu_num int , name char(5) ,
                       age tinyint ,pay float ,money float(7,2) );

                mysql> desc  db1.t7 ;









            日期时间
                类型 时间函数
                年    日期   时间   日期时间
                year  date   time   datetime/ timestamp

                create table db1.t8(
                name  char(15),
                your_s    year,
                birthday  date,
                up_class  time,
                party  datetime
                );

                desc  db1.t8 ;

                insert into  db1.t8  values
                ("bob",1990,20191120,083000,20190607203000);

                当year类型 使用2位数赋值时：
                0

            枚举  enum  单选
                 set   多选

            插入数据
            mysql> insert into db1.t21 (name,sex) values("tianmao","m");




    DAY02
        1.表结构
            1)约束条件
                作用:限制给表字段赋值
                查看字段的约束条件 : desc 库.表;
                    字段名 | 类型 | 空| 键值 | 默认值 |额外设置|
                    mysql> desc db2.t10;
                    +-------+--------------------------------+------+-----+---------+-------+
                    | Field | Type                           | Null | Key | Default | Extra |
                    +-------+--------------------------------+------+-----+---------+-------+
                    | name  | char(10)                       | YES  |     | NULL    |       |
                    | sex   | enum('boy','girl','no')        | YES  |     | NULL    |       |
                    | likes | set('eat','game','pi','sleep') | YES  |     | NULL    |       |
                    +-------+--------------------------------+------+-----+---------+-------+

                约束条件有那些:
                             是否为空  not null null
                             键值     key
                             默认设置 default  缺省 为null
                             额外设置 extra
                            mysql>create tabledb1.t7;
                            ->name char(10) not null,
                            ->age tinyint unsighted default 19
                            ->class char(7) not null default "nsd1903"
                            ->pay float(7,2) default 28000
                            #######float共7位 两位小数
                            );
                           ###################################

                            mysql> create table db1.t21(
                            -> name char(10) not null,
                            -> age tinyint unsigned default 25,
                            -> sex enum("m","w") not null default "w");
                            Query OK, 0 rows affected (0.38 sec)

                            mysql> desc db1.t21;
                            +-------+---------------------+------+-----+---------+-------+
                            | Field | Type                | Null | Key | Default | Extra |
                            +-------+---------------------+------+-----+---------+-------+
                            | name  | char(10)            | NO   |     | NULL    |       |
                            | age   | tinyint(3) unsigned | YES  |     | 25      |       |
                            | sex   | enum('m','w')       | NO   |     | w       |       |
                            +-------+---------------------+------+-----+---------+-------+
                            3 rows in set (0.00 sec)
                            #################插入数据#########################
                            mysql> insert into db1.t21 values("dc",null,"w");
                            Query OK, 1 row affected (0.04 sec)

                            mysql> select * from db1.t21;
                            +------+------+-----+
                            | name | age  | sex |
                            +------+------+-----+
                            | dc   | NULL | w   |
                            +------+------+-----+
                            1 row in set (0.00 sec)
                            mysql> insert into db1.t21 (name,sex) values("tianmao","m");
                            Query OK, 1 row affected (0.03 sec)

                            mysql> select * from db1.t21;
                            +---------+------+-----+
                            | name    | age  | sex |
                            +---------+------+-----+
                            | dc      | NULL | w   |
                            | tianmao |   25 | m   |
                            +---------+------+-----+
                            2 rows in set (0.00 sec)




        2.表结结构
                1)修改表结构
                    格式  alter table 库.表 执行动作;
                    执行动作:
                        add    添加新字段

                                新字段默认添加在地段的末尾, 添加 first 后可添加至行首 after xxx 在xxx后添加
                                alter table db1.t10
                                add
                                name char(15)frist;

                                alter table db1.t10
                                add age tinyint unsighted not null default 19 after name ;


                        drop   删除已有字段

                                mysql> alter table db1.t10 drop email , drop stu_num;
                                    Query OK, 0 rows affected (0.62 sec)
                                    Records: 0  Duplicates: 0  Warnings: 0

                                mysql> select * from db1.t10 ;                                                   +------+-----+------+-------------+
                                    | name | age | sex  | likes       |
                                    +------+-----+------+-------------+
                                    | dc   |  19 | boy  | eat,pi      |
                                    | dc2  |  19 | boy  | eat,game,pi |
                                    +------+-----+------+-------------+
                                    2 rows in set (0.00 sec)

                        modify 修改字段类型 (改类型 调位置)
                                注意:修改的字段类型与已经存储的数据冲突时,不能修改类型

                                ###################修改类型###################################
                                mysql> alter table db1.t10 modify name varchar(15) default "";
                                    Query OK, 2 rows affected (0.73 sec)
                                    Records: 2  Duplicates: 0  Warnings: 0

                                mysql> desc db1.t10 ;
                                    +-------+--------------------------------+------+-----+---------+-------+
                                    | Field | Type                           | Null | Key | Default | Extra |
                                    +-------+--------------------------------+------+-----+---------+-------+
                                    | name  | varchar(15)                    | YES  |     |         |       |
                                    | age   | tinyint(3) unsigned            | NO   |     | 19      |       |
                                    | sex   | enum('boy','gril','no')        | YES  |     | NULL    |       |
                                    | likes | set('eat','game','pi','sleep') | YES  |     | NULL    |       |
                                    +-------+--------------------------------+------+-----+---------+-------+
                                    4 rows in set (0.00 sec)

                                #############调整位置#######################
                                mysql> alter table db1.t10 modify age tinyint(3) unsigned not null after sex;
                                    Query OK, 0 rows affected (0.52 sec)
                                    Records: 0  Duplicates: 0  Warnings: 0

                                mysql> desc db1.10;
                                    +-------+--------------------------------+------+-----+---------+-------+
                                    | Field | Type                           | Null | Key | Default | Extra |
                                    +-------+--------------------------------+------+-----+---------+-------+
                                    | name  | varchar(15)                    | YES  |     |         |       |
                                    | sex   | enum('boy','gril','no')        | YES  |     | NULL    |       |
                                    | age   | tinyint(3) unsigned            | NO   |     | NULL    |       |
                                    | loves | set('eat','game','pi','sleep') | YES  |     | NULL    |       |
                                    +-------+--------------------------------+------+-----+---------+-------+



                        change 修改字段名

                                    .....chenge likes .....

                                mysql> alter table db1.t10 change likes loves set('eat','game','pi','sleep');
                                Query OK, 0 rows affected (0.08 sec)
                                Records: 0  Duplicates: 0  Warnings: 0

                                mysql> desc db1.t10 ;                                                            +-------+--------------------------------+------+-----+---------+-------+
                                    | Field | Type                           | Null | Key | Default | Extra |
                                    +-------+--------------------------------+------+-----+---------+-------+
                                    | name  | varchar(15)                    | YES  |     |         |       |
                                    | age   | tinyint(3) unsigned            | NO   |     | 19      |       |
                                    | sex   | enum('boy','gril','no')        | YES  |     | NULL    |       |
                                    | loves | set('eat','game','pi','sleep') | YES  |     | NULL    |       |
                                    +-------+--------------------------------+------+-----+---------+-------+
                                    4 rows in set (0.00 sec)


                        rename 修改表名

                                mysql> alter table db1.t10 rename db1.classinfo;
                                Query OK, 0 rows affected (0.12 sec)

                                mysql> show tables;
                                +---------------+
                                | Tables_in_db1 |
                                +---------------+
                                | classinfo     |
                                | t21           |
                                +---------------+


        3.mysql键值
                1)键值类型:
                        普通索引 index
                        唯一索引 unique
                        主键  primary key
                        外键  foreign key
                        全文索引 fulltext
                作用: 约束如何给字段赋值
                        索引:
                            类似于书中的目录
                            对表中的字段值进行排序
                            索引类型包括Btree B+tree hash
                        索引优缺点:
                            优点:
                            通过创建唯一性索引,可以保证数据库表中 每一行数据的唯一性
                            加快数据查询速度,数据库总是查询多
                            缺点:
                            当对表中数据进行增加 删除 和修改 的时候 索引要动态调整 降低数据维护速度
                            索引需要占物理空间
                            存储在数据库根目录下

                2)mysql键值使用
                        2.1普通索引 index
                            使用规则:
                                -一个表中有多个index字段
                                -字段的只允许重复,且可以赋值null
                                -通常把查询条件的字段设置为index字段
                                -index字段 标志为 mul
                            查看:
                                show index from 表名\G; \G表示 竖着显示
                            创建索引:

                                在创建表时创建索引:
                                    create table db1.t22(
                                    class char(9),
                                    name char(15),
                                    age int,
                                    index(name),index(age));
                                查看:
                                    mysql> show index from db1.t22\G;
                                删除索引:
                                     mysql> drop index aaa on classinfo;
                                在已有的表中创建索引:
                                    create index 索引名 on 表名(字段名);
                                    mysql> create index aaa on classinfo(name);
                                    drop index 索引名 on 表名;
                        2.2 主键
                                作用:限制字段赋值
                                使用规则:
                                    字段值不能从重复,且不能赋null(核心作用)
                                    一个表中只能有一个primary key 字段
                                    多个字段都作为主键,称为复合主键,必须一起创建
                                    主键通常与 auto increment(自增长) 连用
                                    主键字段标志是pri
                                    通常把表中唯一表示的字段设置为主键
                                    [纪录字段编号]
                                创建主键

                                    mysql> create table db1.t23(
                                    -> name char(10) primary key, ###设定主键
                                    -> age int,
                                    -> pay float(7,2)
                                    -> );

                                    mysql> insert into db1.t23 values("bob","25","2000");
                                         ERROR 1062 (23000): Duplicate entry 'bob' for key 'PRIMARY'

                                    mysql> insert into db1.t23 values("aaa","25","2000");
                                        Query OK, 1 row affected (0.09 sec)

                                    mysql> select * from t23;
                                        +------+------+---------+
                                        | name | age  | pay     |
                                        +------+------+---------+
                                        | aaa  |   25 | 2000.00 |
                                        | bob  |   25 | 2565.00 |
                                        +------+------+---------+

                                    在已有表中创建主键:
                                        创建主键
                                        alter table 表名 add primary key(字段名);

                                        mysql> desc db1.classinfo;
                                        +-------+--------------------------------+------+-----+---------+-------+
                                        | Field | Type                           | Null | Key | Default | Extra |
                                        +-------+--------------------------------+------+-----+---------+-------+
                                        | name  | varchar(15)                    | NO   | PRI |         |       |


                                    删除主键
                                        使用drop 删除
                                          mysql> desc t3;
                                          mysql> alter  table  t3 drop  primary key;
                                          mysql> desc t3;
                                          mysql> insert into t3  values("nsd181101","tom",19);
                                          mysql> insert into t3  values(null,"jerry",19);
                                            ERROR 1048 (23000): Column 'stu_num' cannot be null
                                          mysql> select  * from  t3;


                                创建复合主键
                                    约束方式: 主键字段的值不可以同时重复
                                    创建主键
                                    在已有表中添加复合主键

                                        alter table db1.t25 add primary key(id,name);

                                        mysql> create table db1.t24(                                                         -> clientip char(15),
                                        -> serport int,
                                        -> clientip char(15),
                                        -> status enum("yes","no"),
                                        #########要创建多少 就在这里添加多少###########
                                        -> primary key(clientip,serport)
                                        -> );
                                        Query OK, 0 rows affected (0.21 sec)

                                    mysql> desc db1.t24;
                                        +----------+------------------+------+-----+---------+-------+
                                        | Field    | Type             | Null | Key | Default | Extra |
                                        +----------+------------------+------+-----+---------+-------+
                                        | clientip | char(15)         | NO   | PRI | NULL    |       |
                                        | serport  | int(11)          | NO   | PRI | NULL    |       |
                                        | status   | enum('yes','no') | YES  |     | NULL    |       |
                                        +----------+------------------+------+-----+---------+-------+

                                    mysql> insert into db1.t24 values ("1.1.1.1",22,"no");
                                    mysql> insert into db1.t24 values ("1.1.1.1",22,"yes");
                                    ERROR 1062 (23000): Duplicate entry '1.1.1.1-22' for key 'PRIMARY'
                                    mysql> insert into db1.t24 values ("1.1.1.1",80,"no");
                                    mysql> insert into db1.t24 values ("1.1.1.2",80,"yes");
                                    mysql> insert into db1.t24 values ("1.1.1.2",22,"no");

                                    mysql> select * from t24;
                                        +----------+---------+--------+
                                        | clientip | serport | status |
                                        +----------+---------+--------+
                                        | 1.1.1.1  |      22 | no     |
                                        | 1.1.1.1  |      80 | no     |
                                        | 1.1.1.2  |      22 | yes    |
                                        | 1.1.1.2  |      80 | yes    |
                                        +----------+---------+--------+


                                主键通常与 auto increment(自增长) 连用
                                    mysql> create table db1.t25(
                                    -> id int primary key auto_increment,
                                    -> name char(15),
                                    -> age tinyint,
                                    -> sex enum("boy","girl")
                                    -> );
                                    mysql> desc db1.t25;
                                        +-------+--------------------+------+-----+---------+----------------+
                                        | Field | Type               | Null | Key | Default | Extra          |
                                        +-------+--------------------+------+-----+---------+----------------+
                                        | id    | int(11)            | NO   | PRI | NULL    | auto_increment |
                                        | name  | char(15)           | YES  |     | NULL    |                |
                                        | age   | tinyint(4)         | YES  |     | NULL    |                |
                                        | sex   | enum('boy','girl') | YES  |     | NULL    |                |
                                        +-------+--------------------+------+-----+---------+----------------+

                                    mysql> insert into db1.t25(name,age,sex)values("tencen","25","boy");
                                    mysql> insert into db1.t25(name,age,sex)values("bbbb","25","boy");
                                    mysql> insert into db1.t25(name,age,sex)values("aaa","25","boy");

                                    mysql> select * from t25;
                                        +----+----------+------+------+
                                        | id | name     | age  | sex  |
                                        +----+----------+------+------+
                                        |  1 | tencen   |   25 | boy  |
                                        |  2 | bilibili |   25 | boy  |
                                        |  3 | bilibili |   25 | girl |
                                        |  4 | luceey   |   16 | girl |
                                        +----+----------+------+------+
                                        4 rows in set (0.00 sec)
                                        删除表中的数据,生产环境不能这么干 不然跑路啊.
                                    mysql> delete from t25;
                                            Query OK, 6 rows affected (0.12 sec)

                                    mysql> insert into t25(name,age,sex)values("1080","120","girl");
                                           Query OK, 1 row affected (0.03 sec)
                                           除非给id从新设定为1 ,否则依然按照以前的值自加一s
                                    mysql> select * from t25;
                                        +----+------+------+------+
                                        | id | name | age  | sex  |
                                        +----+------+------+------+
                                        |  7 | 1080 |  120 | girl |
                                        +----+------+------+------+
                        2.3 外键
                                作用:限制给字段赋值
                                    使得字段值在另一个表字段值范围内选择
                                规则:
                                     表的存储引擎必须是innodb (之后会讲)
                                     字段类型要一致
                                     被参考字段必须要是索引类型的一种(通常为primary key)

                                命令格式:
                                        create table 库.表1(
                                            字段列表,
                                            foreign key(字段名) references 表名2(字段名)
                                            ###指定外键 ,,,reference 后的表2代表被参考的表
                                            ###foreign 后的是需要参考表中的字段;;;;   也就是表1中字段   参考  表2中字段
                                            on update cascade  ###同步增加
                                            on delete cascade  ###同步删除
                                            )engine=innodb;
                                        创建外键
                                eg:
                                            create table db1.yg(
                                            yg_id int primary key auto_increment,
                                            name char(15)
                                            )engine=innodb;

                                            insert into db1.yg(name)values("bob");
                                            insert into db1.yg(name)values("luci");
                                            insert into db1.yg(name)values("cd");


                                            mysql> select * from yg;
                                                    +-------+------+
                                                    | yg_id | name |
                                                    +-------+------+
                                                    |     1 | bob  |
                                                    |     2 | luci |
                                                    |     3 | cd   |
                                                    |     4 | cd   |
                                                    |     5 | bob  |
                                                    +-------+------+

                                            create table db1.gz(
                                            gz_id int,
                                            pay float(7,2),
                                            foreign key(gz_id) references yg(yg_id)  ####创建外键######
                                            on update cascade  ###同步删除
                                            on delete cascade  ###同步增加
                                            )engine=innodb;

                                            mysql> select * from gz;
                                            Empty set (0.00 sec)

                                            mysql> insert into gz values(1,2000);
                                            mysql> insert into gz values(4,200);
                                            mysql> insert into gz values(5,200);
                                            mysql> insert into gz values(6,200);
                                            mysql> insert into gz values(6,500);
                                            mysql> insert into gz values(6,5000);

                                            ##########更新###### 员工id#############
                                            mysql> update db1.yg set yg_id=6 where yg_id=3; ###讲yg_id=3,的换成yg_id=6，两个表中数据自动同步。
                                            Query OK, 1 row affected (0.03 sec)
                                            Rows matched: 1  Changed: 1  Warnings: 0

                                            mysql> select * from gz;
                                            +-------+---------+
                                            | gz_id | pay     |
                                            +-------+---------+
                                            |     4 |  200.00 |
                                            |     5 |  200.00 |
                                            |     6 |  200.00 |
                                            |     6 |  500.00 |
                                            |     6 | 5000.00 |
                                            |     1 | 2000.00 |
                                            +-------+---------+
                                            6 rows in set (0.00 sec)

                                            #########删除id=6 的 员工  gz 表中 也会消失 ##########

                                            mysql> delete from db1.yg where yg_id=6;
                                            Query OK, 1 row affected (0.05 sec)

                                            mysql> select * from gz;
                                            +-------+---------+
                                            | gz_id | pay     |
                                            +-------+---------+
                                            |     4 |  200.00 |
                                            |     5 |  200.00 |
                                            |     1 | 2000.00 |
                                            +-------+---------+
                                            3 rows in set (0.00 sec)

                                    mysql> delete from gz;

                                    mysql> alter table gz add primary key(gz_id);
                                        Query OK, 0 rows affected (0.43 sec)
                                        Records: 0  Duplicates: 0  Warnings: 0

                                        mysql> desc gz;
                                        +-------+------------+------+-----+---------+-------+
                                        | Field | Type       | Null | Key | Default | Extra |
                                        +-------+------------+------+-----+---------+-------+
                                        | gz_id | int(11)    | NO   | PRI | NULL    |       |
                                        | pay   | float(7,2) | YES  |     | NULL    |       |
                                        +-------+------------+------+-----+---------+-------+
                                        2 rows in set (0.00 sec)

                                    mysql> insert into gz values(5,200);
                                        ERROR 1062 (23000): Duplicate entry '5' for key 'PRIMARY'
                                    mysql> insert into gz values(null,200);
                                        ERROR 1048 (23000): Column 'gz_id' cannot be null
                                    mysql> insert into gz values(1,20z00);
                                        ERROR 1054 (42S22): Unknown column '20z00' in 'field list'
                                    mysql> insert into gz values(1,2000);
                                        Query OK, 1 row affected (0.02 sec)
                                        mysql> select * from gz;
                                        +-------+---------+
                                        | gz_id | pay     |
                                        +-------+---------+
                                        |     1 | 2000.00 |
                                        |     5 |  200.00 |
                                        +-------+---------+

                                删除外键:
                                        show create table db1.gz\G;
                                        alter table db1.gz drop foreign key gz_ibfk_1;

                        在已有的表中添加外键 主键  自加(auto_increment)都是可以的 但是建立外键时需要数据匹配.

                                ####向已有的表中添加外键#####
                               alter table db1.gz
                               add
                               foreign key(gz_id) references db1.yg(yg_id)
                               on update cascade on delete cascade
                               engine=innodb;
                               ####向已有表的中添加主键####
                               alter table db1.yg
                               modify
                               yg_id int primary key auto_increment;



   DAY03 数据导入导出
        修改搜索路径
            mysql> show variables like "secure_file_priv";
             默认路径 : /var/lib/mysql-files/
             修改配置文件 :
                        [root@DBA ~]# mkdir /myload
                        [root@DBA ~]# chown mysql /myload
                        [root@DBA ~]# vim /etc/my.cnf

                            secure_file_priv="/myload"

             重启服务:    systemctl restart mysqld
             进入数据库查询位置是否修改:
                        mysql> show variables like "secure_file_priv";
        数据导入
                默认只有root才能导入数据
                建表
                导入
              注意事项:
                    字段分隔符要和文件一致
                    表字段类型和字段个数要和文件匹配
                    导入数据时指定文件的绝对路径
              步骤:命令格式

                    mysql>load data infile "目录/文件"
                    into table库名.表名
                    fields terminated by "分隔符" #### 列
                    lines terminated by "\n";    #### 行


              eg:
                    前面还要 创建文件夹 修改配置文件 重启服务
                mysql> load data infile "/myload/passwd" into table db3.usr fields terminated by ":" lines terminated by "\n";

        数据导出
               作用:把表纪录存储到系统文件里
               注意:导出数据有sql语句决定
                    导出的是表记录,不包括字段名
                    自动创建存储数据文件
                    存储数据文件,具有唯一性
                    注意导出文件是目录必须与secure_file_priv 目录一致(也就是说只能在这里导出)
               命令:
                   1)select命令 into outfile "目录名/文件名";  ### 不指定 分隔符时 默认 分别为 \t  \n
                   2)select命令 into outfile "目录名/文件名"
                     fields terminated by "分割符"; ####指定列分隔符
                   3)select命令 into outfile "目录名/文件名"
                     fields terminated by "分割符"
                     lines terminated by "\n"  ####指定行分割符号
               eg:
                   select * from db1.t23 into outfile "/myload/t23";
                   select * from db3.usr where id<=3 into outfile "/myload/user2.txt";

        表管理记录 (db3.usr)

            1.添加记录
                命令格式
                注意事项:
                        字段值与字段类型匹配
                        字符类型的字段 要用 ""括起来
                        依次给所有字段赋值时,字段名可省略
                        只给部分字段赋值时,必须明确对应字段名称
                        没有赋值的字段使用默认值,或自增长
                   添加一条记录给所有字段可以省略
                   insert into 表名 values(字段值列表);

                   mysql> insert into usr values(22,"lc","x",2000,2000,"test user","/home/bob","/bin/bash")

                   添加n行,给所有列赋值
                   insert into 表名 values(字段值列表1),(字段值列表2);

                   添加一条记录,给指定字段赋值
                   insert into 表名(字段名列表) values(字段值列表);

                   添加N条记录,给指定字段赋值
                   insert into 表名(字段名列表) values(字段值列表1),(字段值列表2),(字段值列表3);

            查看记录
                查看记录注意:
                    * 表示查询所有字段
                    查看当前库表记录时库名可省略
                    字段列表决定显示列个数
                    条件决定显示行的个数
                查看所有
                        select * from 库名.表名;
                条件查询
                       select 字段1,字段N from 库名.表名 where 条件表达式;
            修改记录
                注意:字段值与字段类型匹配
                    对于字符类型,值使用""起来
                    若不使用where限定条件,会更新所有记录字段值
                    限定条件,只更新匹配条件的记录字段的值
                条件修改
                   update 表名 set 字段名=值,字段名=值,字段名=值,... where 条件;

                修改所有
                   update 表名 set 字段名=值,字段名=值,字段名=值,... ;


            删除记录
                注意: 不添加条件删除表中所有
                条件删除
                    delete  from 库名.表名 where 条件表达式;
                删除所有
                    delete  from 库名.表名 ;


        匹配条件
           基本匹配条件(适用于select \ update \ delete)

                数值比较   > < >= <= = !=
                    符号两边要求是数值类型
                    eg
                        select * from usr where id<=6;
                        select * from usr where uid=gid;

                字符比较
                    =   !=  is null  is not null
                    eg:
                        select name,uid,gid from usr where uid=gid;
                        select from usr where name is null;

                范围内比较
                     in       not in      between ...  and ....
                     eg:
                        select name from usr where name in ("root","adm","mysql");
                        select name,uid from user where uid in (3,5,7,9);
                        select name,shell from usr where shell not in ("/bin/bash","/sbin/nologin");
                        select name uid from usr where uid between 50 and 100;
                逻辑比较
                    逻辑与  and  && (多个判断条件同时成立)
                    逻辑或  or   || (多个判断条件,某个条件成立 )
                    逻辑非  not   !
                    eg:
                        select * from usr where name="root" and uid=1 and shell="abc";
                        select * from usr where name="root" && uid=1 && shell="abc";

                空\非空
                    is null / is not null
                    eg:
                        select id from user where shell is null;
                        select name from usr where shell is not null;
                去掉重复数据
                        distinct
                        select distinct shell from usr where uid>10;
                        select distinct shell from usr where uid>=10;
                        select distinct shell from usr;
           高级匹配条件(适用于select \ update \ delete)
                模糊查询
                                          _ 表示一个
                                          % 表示0-n个字符

                    select name from usr where name like "____"; ##匹配任意四个字符 ,这里起始是四个_
                    select name from usr where name like "_%_"; ##匹配任意字符
                    select name from usr where name like "a%";  ##以a开头
                    select name from usr where name like "%a%"; ##必须包含a


                正则匹配
                    语法: where 字段号 regexp '正则表达式';
                    正则符号:^ $ [] | *
                    select name from usr where name regexp  '^r|y$'; ### r开头 或者 y 结尾
                    select name from usr where name regexp  '^r.*y$';  ### .* 任意字符的任意次数, .任意字符 *前一个字符的任意次数
                    select name,uid from usr where uid regexp  '^....$'; ###四位数字
                    insert into usr(name)values("yaya9"),("7yaya"),("ya8ya");
                    select name,uid from usr where uid regexp  '[0-9]';
                四则计算
                 + - * /
                 select name,uid,gid,uid+gid sum from usr where name="bin";
                 select name,uid,gid, uid+gid sum from usr; ###将所有的uid和gid相加
                 select name,uid,gid,(uid+gid)/2 ava from usr where name="root";
                     +------+------+------+--------+
                    | name | uid  | gid  | ava    |
                    +------+------+------+--------+
                    | root |    0 |    1 | 0.5000 |
                    +------+------+------+--------+

                 update usr set gid=gid+1; ### 每一个gid+1

                 alter table usr add age tinyint unsigned default 19 after name;
                 select name,age, 2019-age your_age from usr where name="root";
                    +------+------+----------+
                    | name | age  | your_age |
                    +------+------+----------+
                    | root |   19 |     2000 |
                    +------+------+----------+

           操作查询结果(适用于select)

                 select count(字段名) from usr; 求字段值的个数
                 select min(字段名) from usr;   求字段值的最小值
                 select avg(字段名) from usr;   求字段值的平均值
                 select sum(字段名) from usr;   求字段值的总和
                 select max(字段名) from usr;   求字段值的最大值
                 eg:
                     统计表中所有的行数
                     select count(*) from usr;
                     统计uid的 平均数
                     select avg(uid) from usr;

                 查询结果排序

                     SQL查询 order by 字段名 [asc|desc];
                     -asc 升序列 小--->大  ###默认
                     -desc 降序列 大-->小
                     eg:

                        升序排
                        select name,uid from usr where uid>=10 and uid<=500 order by uid; ##默认省略asc
                                +-----------------+------+
                                | name            | uid  |
                                +-----------------+------+
                                | operator        |   11 |
                                | games           |   12 |
                                | ftp             |   14 |

                        降序排
                        select name,uid from usr where uid>=10 and uid<=500 order by uid desc;
                                +-----------------+------+
                                | name            | uid  |
                                +-----------------+------+
                                | systemd-network |  192 |
                                | nobody          |   99 |
                                | dbus            |   81 |
                                | sshd            |   74 |

                 查询分组
                    SQL查询 group by 字段名;
                    eg:
                        select shell from usr group by shell;
                        select shell from usr where uid<=1000 group by shell;
                        select gid from usr group by gid;
                        mysql> select shell,count(shell)from usr group by shell;
                        +----------------+--------------+
                        | shell          | count(shell) |
                        +----------------+--------------+
                        | NULL           |            0 |
                        | /bin/bash      |            5 |
                        | /bin/false     |            1 |

                 查询结果过滤
                        SQL查询 having 条件;
                   eg:
                    select name from usr where id<20 having name="adm";
                    +------+
                    | name |
                    +------+
                    | adm  |
                    +------+
                 限制查询结果的查询行数
                        SQL查询 limit 数字; ##显示查询结果前多少条记录
                        SQL查询 limit 数字1,数字2; ###显示指定范围内的查询记录
                        数字1 起始行(0表示第一行)
                        数字2 总行数

                        eg:
                            select id,name,password from usr where id<=20; ###默认全部输出
                            select id,name,password from usr where id<=20 limit 10;
                            select id,name,password from usr where id<=20 limit 5;
                            select id,name,password from usr where id<=20 limit 0,2; ###从第一行开始输出 共输出两行
                            select id,name,password from usr where id<=20 limit 1,3; ###从第二行开始输出 共输出三行

        常见的mysql 管理工具

                 phpMyAdmin  浏览器端      需要LNMP支持  开源 免费

                 yum -y install httpd php-mysql php
                 systemctl restart httpd.service
                 systemctl enable httpd.service
                 tar -xf phpMyAdmin-2.11.11-all-languages.tar.gz
                 ls
                 mv phpMyAdmin-2.11.11-all-languages phpMyAdmin
                 cp phpMyAdmin /var/www/html/
                 cd /var/www/html/phpMyAdmin
                 cp config.sample.inc.php config.inc.php
                 vim config.inc.php
                 31  $cfg['blowfish_secret'] = 'plj123';  /* YOU MUST FILL IN THIS FOR COOKIE AUTH! */      ### cookie 认证参数  随便修改为什么
                 17  $cfg['Servers'][$i]['host'] = 'localhost'; ###数据库服务器地址
                 systemctl restart httpd.service

                 访问软件管理数据库服务
                 http://192.168.4.50/phpmyadmin
                 用户名 root
                 密  码 tarena (之前设置的数据可密码)












