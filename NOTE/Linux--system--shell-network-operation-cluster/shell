shell
复杂的操作变得简单化,自动化
在编写脚本时需要考虑,使用费交互式命令
    eg: sleep 5 &
    将sleep 放入后台执行
    安装ksh
        yum repolist
        yum -y install ksh ###安装 ksh 解释器,没有bash 好用
        [root@server0 ~]# ksh
        #
    bash的快捷键
        ctr + a 回到行首
        ctr + e 回到行尾
        ctr + d 结束当前输入
        ctr + z 暂停挂起
        ctr + m 回车
        ctr + u 删除光标至行首的所有内容
        ctr + k 删除光标至行尾的所有内容
        ctr + w 删除光标 前面的一个单词
        ctr + s 冻结终端
        ctr + q 恢复终端
    修改命令的历史纪录
        [root@server0 ~]# vim /etc/profile
        HISTSIZE=1000
        [root@server0 ~]# ls -A
        .bash_history           ####该文件保存了最近的命令;历史记录
    重定向
         覆盖   追加
           >    >>  收集正确信息
           2>   2>> 收集错误信息
           &>   &>> 收集所有信息
           < 输入重定向

    bash 优点
         支持 tab 快捷键  历史命令  别名  重定向  管道 等等
         选项 -x
        pstree 进程树
    脚本编写步骤
        1.声明解释器
        2.书写脚本功能描述,变量含义, 使用位置, 作者(生产环境必写)
        3.编写执行指令
            1)添加x权限
            chmod +x test1.sh
            2)执行命令 时记得 在命令前 添加 ./ 指定当前目录下
            ./test1.sh
            3)或者使用解释器直接执行(可以不用添加权限,使用) ,新开启解释器
            bash test1.sh           //脚本执行完毕后退出新开启的解释器
            4)使用source 直接执行 脚本, 使用当前解释器执行
            source test1.sh    //执行完成后退出当前解释器, source 和 bash 使用时 在脚本中没有exit 时效果时一样的,
                               //但当脚本有了 exit 就会 不同,
                               //表现在 source 会在执行后关闭当前解释器,
                               ///bash则会关闭新开启的(其实脚本执行完毕后退出新开启的解释器,
                               //所以在结尾添加 exit 对于bash 来说区别不大).
    编写一个搭建yum仓库的脚本
            #!/bin/bash
            rm -rf /etc/yum.repos.d/*.repo
            echo '[nsd]
            name = nsd
            baseurl=ftp://172.25.254.250/centos-1804/
            enabled = 1
            gpgcheck = 0
            ' > /etc/yum.repos.d/abc.repo
            yum repolist

            bash -x test.sh 在执行脚本过程中 显示错误信息

    编写一个自动安装 vsftpd的 脚本 并检测服务  是否 启动
            #!/bin/bash
            yum -y install vsftpd &> /dev/null  ###安装 过程不显示
            systemctl restart vsftpd
            systemctl enable vsftpd
            systemctl status vsftpd   ###检测服务是否启动

    变量
        使用固定的名称表示变化的量
        自定义变量
            定义变量 : 变量名称= 变量值
            查看变量 : echo$变量名称
            取消变量 : unset 变量名称
        系统变量
            环境变量
                 一级提示符
                    PS1
                二级提示符
                    PS2
            预定义变量
                $0 显示脚本名
                $$ 显示脚本进程号
                $? 显示上条指令是否成功  非0表示执行失败
                $# 统计变量个数
                $* 显示所有位置变量的内容
            位置变量
                $1 脚本名后第一个参数
                $2 脚本名后第二个参数
                $3 脚本名后第三个参数
                env 查看所有环境变量(了解)
                set 查看所有的变量(了解)
                '' 界定范围 取消字符的特殊定义, 比如$(屏蔽$的作用)
                "" 界定范围
                `` 反撇号 $() 获取指令的输出结果
            关闭回显 stty -echo
            开启回显 stty echo
            全局变量 export a=20  (系统变量默认为全局变量)
            局部变量 a=20(只在源解释器生效)
                [root@server0 opt]# export c=10089
                [root@server0 opt]# bash
                [root@server0 opt]# echo $c
                10089
                [root@server0 opt]# exit
                [root@server0 opt]#
        shell 中的 数学运算
            方法一 expr 值1 运算符 值2
                [root@svr5 ~]# X=1234                              //定义变量X
                [root@svr5 ~]# expr  $X  +  78                      //加法
                1312
                [root@svr5 ~]# expr  $X  -  78                       //减法
                1156
                [root@svr5 ~]# expr  $X  \*  78                      //乘法，操作符应添加\转义 或者 '*'
                96252
                [root@svr5 ~]# expr  $X  /  78                      //除法，仅保留整除结果
                15
                [root@svr5 ~]# expr  $X  %  78                     //(求余数)求模
                64

            方法二  echo $[值1 运算符 值2]  echo $((值1 运算符 值2))

                [root@svr5 ~]# X=1234
                [root@svr5 ~]# echo $[X+78]
                1312
                [root@svr5 ~]# echo $[X-78]
                1156
                [root@svr5 ~]# echo $[X*78]
                96252
                [root@svr5 ~]# echo $[X/78]
                15
                [root@svr5 ~]# echo $[X%78]
                64

            方法三  通常对变量进行计算,不显示结果(通常用来做 变量的增减 定义)
                [root@svr5 ~]# X=123                [root@svr5 ~]# let y=X+22
                [root@svr5 ~]# echo $y
                1256
                [root@svr5 ~]# let X++;  echo $X        # X++(X=X+1)
                [root@svr5 ~]# let X--;  echo $X        # X--(X=X-1)
                [root@svr5 ~]# let X+=78 ; echo $X        # X+=78(X=X+78)
                [root@svr5 ~]# let X-=78 ; echo $X     # X-=78(X=X-78)
                [root@svr5 ~]# let X*=78 ; echo $X     # X*=78(X=X*78)
                [root@svr5 ~]# let X/=78 ; echo $X     # X/=78(X=X/78)
                [root@svr5 ~]# let X%=78 ; echo $X     # X%=78(X=X%78)

            方法四 计算小数
                方法1-3 不支持小数
                交互式计算
                [root@svr5 ~]# bc
                bc 1.06.95
                Copyright 1991-1994, 1997, 1998, 2000, 2004, 2006 Free Software Foundation, Inc.
                This is free software with ABSOLUTELY NO WARRANTY.
                For details type `warranty'.
                12.34+56.78                                        //加法
                69.12
                12.34-56.78                                        //减法
                -44.44
                12.34*56.78                                        //乘法
                700.66
                12.34/56.78                                        //除法
                0
                quit                                              //退出交互计算器
                scale=3                                           // 小数点后3位

                非交互计算
                [root@svr5 ~]# echo 'scale=4;12.34+5.678' | bc
                18.018
                [root@svr5 ~]# echo 'scale=4;12.34*5.678' | bc
                70.0665
                [root@svr5 ~]# echo 'scale=4;12.34/5.678' | bc
                2.1733

    条件测试 (重要)
        作用:对于系统环境进行预判,增减脚本灵活性和成果率
            test 表达式  或   [表达式]
                表达式两边至少要留一个空格
                1)
                test $USER=='root'; echo $?  ###注意空格
                0
                2)
                [ $UID == '1' ] ; echo $?   ###注意空格 每个参数之间用空格隔开 //推荐使用第二种
                1

        && 前面执行成功后执行后面的命令
        || 前面执行失败后执行后面的命令
        ;  前面执行后执行后面命令,无逻辑关系
        -z 检测变量的值是否为空,空为真
                [root@svr5 ~]# var1="nb" ; var2=""
                [root@svr5 ~]# [ -z "$var1" ] && echo "空值" || echo "非空值"
                非空值
                [root@svr5 ~]# [ -z $var2 ] && echo "空值" || echo "非空值"
                空值                                      //变量var2已设置，但无任何值，视为空
                [root@svr5 ~]# [ ! -z $var1 ]                //测试var1是否为非空

        -eq   等于
        -ne   不等
        -gt   大于
        -ge   大于等于
        -lt   小于
        -le   小于等于
         wc -l 统计行数
         who查看 登录用户数量
        eg: 统计server 登录用户数量大于三时邮件报警 管理员
            #!/bin/bash
            n=`who | wc -l`
            [ $n -gt 3 ] && echo 'fbiwarning $n' |mail -s 'fbi' root && echo 'dangerous'|| echo 'seaf'
            crontab -e
            */2 * * * * /opt/test.sh
        -e 文档存在为真 (查询 文件和 目录 是否存在 )
        -d 文档存在,且必须为目录为真(只能查询 目录 是否存在)
        -f 文档存在,且必须文件为真(只能用来筛选文件是否存在)
        -r 判断对象是否可读
           此测试对root用户无效，无论文件是否设置r权限，root都可读
        -w 判断对象是否可写
            此测试同样对root用户无效，无论文件是否设置w权限，root都可写：
        -x 判断对象是否具有可执行权限
            这个取决于文件本身、文件系统级的控制，root或普通用户都适用：
            eg:
                [ -d root ]; echo $?
                1
                [ -d mail ]; echo $?
                0
                ls -ld mail
                drwxrwxr-x. 2 root mail 4096 5月   9 14:04 mail
                [ -r mail ];echo $?
                0
                [ -w mail ];echo $?
                0
                [ -x mail ];echo $?
                0

    判断语句
        格式:
            1)单分支
                    if [条件测试] ; then

                       命令序列

                    fi
            2)双分支
                    if [条件测试] ; then
                        命令序列1
                    else
                        命令序列2
                    fi
            3)多分支
                    if [条件测试] ; then
                        命令序列1
                    elif [条件测试] ; then
                        命令序列2
                        ...
                    else
                        命令序列n

                    fi
            eg:
                #!/bin/bash
                ping -c 5 -i 0.2 -W 1 $1 &> /dev/null
                if [ $? -eq 0  ] ;then
                        echo 'connect'
                else
                        echo 'disconnect'
                fi

    循环语句
        for循环
            for i in 值1 值2
            do
                执行命令
            done

        eg: 使用for循环编写测试 范围 ip 的连通性
            #!/bin/bash
            a=0
            b=0
            for i in {1..10}
            do
            ping -c 2 -i 0.3 -W 1 172.25.0.$i &> /dev/null
                    if [ $? -eq 0 ] ;then
                    echo "172.25.0.${i} connect"
                      let a++
                   else
                    echo "172.25.0.${i} disconnetcion'"
                     let b++
                    fi

            done

            echo "$a connect $b disconnetc"


        while 循环
            while 条件测试
            do
                命令
            done

        eg: 一个自动猜数字的 脚本 范围是 100以内
            #!/bin/bash
            #n=$[RANDOM%101]
            u=0
            while [ 1 -eq 1 ]
            do
            n=$[RANDOM%101]

            s=$[RANDOM%101]

             let u++
            # read -p '输入一个数字' s
              if [ $n -eq $s ] ; then
                   echo ' 似李'
                  echo "${u}次成功"
                  exit
              elif [ $s -gt $n ] ;then
                    echo '大了'
              else
                    echo '小了'
              fi
            done

        case 分支
                命令结束后 添加  `;;` 而非每行 结尾添加
                case 变量 in
                    条件)
                    命令1 ;;
                    条件)
                    命令2 ;;
                    *)
                    默认命令序列
                esac
            eg:创建 自动部署 nginx 的脚本

                #!/bin/bash
                yum -y install gcc openssl-devel pcre-devel
                tar -xf nginx-1.12.2.tar.gz
                cd nginx-1.12.2
                ./configure
                make
                make install

            Nginx默认安装路径为/usr/local/nginx,该目录下会提供4个子目录，分别如下：
            /usr/local/nginx/conf	配置文件目录
            /usr/local/nginx/html	网站页面目录
            /usr/local/nginx/logs	Nginx日志目录
            /usr/local/nginx/sbin	主程序目录
            [root@svr5 ~]# /usr/local/nginx/sbin/nginx                //启动服务
            [root@svr5 ~]# /usr/local/nginx/sbin/nginx    -s stop        //关闭服务
            [root@svr5 ~]# /usr/local/nginx/sbin/nginx    -V            //查看软件信息
            [root@server0 ~]# netstat -ntulp | grep nginx             //查看nginx 状态
            tcp        0      0 0.0.0.0:80              0.0.0.0:*               LISTEN      32743/nginx: master

            netstat 命令
                    查询系统中启动的端口信息 ,
                    -ntulp 连着用 推荐
                    -n以数字格式显示端口号
                    -t显示TCP连接的端口
                    -u显示UDP连接的端口
                    -l显示服务正在监听的端口信息，如httpd启动后，会一直监听80端口
                    -p显示监听端口的服务名称是什么（也就是程序名称
            eg: 使用case 编辑一个 检测 nginx 启动 停止 显示 状态的命令.
                #!/bin/bash
                case $1 in
                start|o) ###这里表示 脚本后接的参数 可以为 start 或者 o 简写 提高输入效率
                        /usr/local/nginx/sbin/nginx ;;
                stop|e)
                        /usr/local/nginx/sbin/nginx -s stop ;;
                restart|r)
                        /usr/local/nginx/sbin/nginx -s stop
                         /usr/local/nginx/sbin/nginx  ;;
                status|u)
                        netstat -ntulp | grep -q nginx   ####这里的 -q 是查询后 不输出结果
                        [ $? -eq 0 ] && echo 'start success' || echo 'not start' ;;
                *)
                        echo 'enter start stop restart status' ;;
                esac

        函数
            格式1:
                 function 函数名 {
                         命令
                                }

            格式2:
                 函数名(){
                        命令序列
                        }
            改变终端颜色输出字符的颜色 并改 回来
            echo -e "\033[31mABCD\033[0M" ##31 表示颜色
                 #!/bin/bash
                co(){
                echo -e "\033[$1m$2\033[0m"
                }
                co 34 SIX
                co 35 SIX
        中断 退出 等待
            wait //等待所有后台结束后退出 程序 ;;配合  & 使用
            exit  //退出整个脚本
            break //退出脚本中的循环,执行循环后的任务
            continue  //退出当前循环进行下一次循环


            eg: 求出 1-20 以内 被 6 整除 数字的 平方
                #!/bin/bash
                for i in {1..20}
                do
                n=$[i%6]
                         [ $n -ne 0 ] && continue
                         echo $[i*i]

                done
        字符串截取及切割
            字符串截取
            字符字符串起始 第一位为0
            ${变量名:起始位置:长度}
            若起始位置为第一个字符 则 起始位可以省略
                ${x::5}

            子串替换的两种用法：
            只替换第一个匹配结果：
            ${变量名/old/new}
            替换全部匹配结果：
            ${变量名//old/new}
            字符串掐头去尾：
            从左向右，最短匹配删除：${变量名#*关键词}
            从左向右，最长匹配删除：${变量名##*关键词}
            从右向左，最短匹配删除：${变量名%关键词*}
            从右向左，最长匹配删除：${变量名%%关键词*}
        eg:
                [root@server0 ~]# a=123asdfasdf
                [root@server0 ~]# echo ${a//asd/123}
                123123f123f

                [root@server0 ~]# echo $a
                root:x:0:0:root:/root:/bin/bash
                [root@server0 ~]# echo ${a%root*}
                root:x:0:0:root:/
                [root@server0 ~]# echo ${a%%root*}

                [root@server0 ~]# echo ${a#*root}
                :x:0:0:root:/root:/bin/bash
                [root@server0 ~]# echo ${a##*root}
                :/bin/bash

        eg:    将 后缀为 txt 的文件修改为 doc
                #!/bin/bash
                for i in `ls *.txt`
                do
                        m=${i%.*}
                        mv $i $m.doc
                        echo 'success'
                done
        字符串初值的处理
                给变量进行备用数值定义:当 用户不输入 数据时  变量 为默认值
                ${p:-132}
                eg:
                #!/bin/bash
                read -p 'username' u
                useradd $u
                read -p  'passwd' p
                echo ${p:-132} | passwd --stdin $u
                #[ $p$# -eq 0 ] && echo 'passwd def'
                #[ $p -z  ] && echo 'passwd def'
                [ -z $p  ] && echo 'passwd def'



    正则表达式   (非常重要啊)
        基本正则表达式

                    基本表

            正则符号                描述
               ^                 匹配行首
               $                 匹配行尾
               []                集合,匹配集合中的任意单个字符  // 或   ###[a-z] 匹配任意字符大小写,- 表示范围
               [^]               对集合取反                  // 或    ###^[^a-z] 匹配不一小写字母开头的行
               .                 匹配任意单个字符
               *                 匹配前一个字符任意次数 [*不允许单独使用]
               \{n,m\}           匹配前一个字符n-m次
               \{n\}             匹配前一个n次
               \{n,\}            匹配前一个字符n次以上
               \{\}              保留



                         扩展表

            正则符号                描述
               +                 单个字符至少匹配一次
               ?                 单个字符最多匹配一次
               {n,m}             单个字符匹配n到m
               ()                组合为整体保留
               |                 或者
               *                 匹配前一个字符任意次数 [*不允许单独使用]
               \b                单词边界

                \w  匹配字母数字下划线 [a-Z0-9]
                \s  匹配空格 ,制表符(也就是tab)
                \d  匹配数字  使用时  添加-p 选项

                grep -n 查找时显示行号
                     -v 查找时取反
                     -i 忽略大小写

            保留(a)(b)  粘贴\1 \2
            eg:  [root@server0 ~]# grep "bash$" /etc/passwd
                    root:x:0:0:root:/root:/bin/bash    //匹配开头
                 [root@server0 ~]# grep "^root" /etc/passwd
                    root:x:0:0:root:/root:/bin/bash    //匹配结尾

                 [root@server0 ~]# grep "[ab]" 1.txt  //查找有字符a或b 的行
                    a
                    abc
                    aa
                    bb
                    abcd
                    xyzaa                                         ^ 这里表示取反
                 [root@server0 ~]# grep "[^ab]" 1.txt  //查找除了字符 a或b 以外的行
                    abc
                    ccc
                    abcd
                    xyzaa
                 [root@server0 ~]# grep "ab." 1.txt   // 查找 有ab或任意单个字符在一起的行
                    abc
                    abcd

                 [root@server0 ~]# grep ".*" 1.txt   // 匹配任意 . 代表任意字符 * 代表 不限次数
                    a
                    abc
                    aa
                    bb
                    ccc
                    abcd
                    xyzaa
                 [root@server0 ~]# grep "c\{2\}" 1.txt    //匹配字符c 两次和行
                    ccc
                 [root@server0 ~]# grep "c\{1,2\}" 1.txt  //匹配字符c 出现 1-2 次的行
                    abc
                    ccc
                    abcd
                 [root@server0 ~]# grep "c\{2,\}" 1.txt     //匹配字符 c 出现 2次 及 以上之上的 行
                    ccc
                 扩展 使用 egroup  , group 不支持扩展

                 [root@server0 ~]# egrep "bc{1,1}" 1.txt    // 匹配字符 bc 出现 1次的行
                    abc
                    abcd
                 [root@server0 ~]# egrep "c{2}" 1.txt         // 匹配c 出现两次的行
                    ccc
                 [root@server0 ~]# egrep "c{1,2}" 1.txt      // 匹配 c 出现1-2 次
                    abc
                    ccc
                    abcd

                 [root@server0 ~]# egrep "c+" 1.txt          //单个字符c 最少匹配一次 (一次以上)
                    abc
                    ccc
                    abcd
                 [root@server0 ~]# egrep "c?" 1.txt      // 单个字符c 最多匹配一次(最多1次)
                    a
                    abc
                    aa
                    bb
                    ccc
                    abcd
                    xyzaa

                 [root@server0 ~]# egrep "ac?" 1.txt   // 单个字符c 最多匹配一次(最多1次) 且a 必须存在
                    a
                    abc
                    aa
                    abcd
                    xyzaa
                    zaa

                 [root@server0 ~]# egrep "ac?|a+" 1.txt  //c 最多一次 a至少一次  a 必须存在
                    a
                    abc
                    aa
                    abcd
                    xyzaa
                    zaa
                 [root@server0 ~]# egrep "a\b" 1.txt    // 以a 结尾且 后面为空字符或者与其他字符隔开
                    a
                    aa
                    xyzaa
                    zaa
                 [root@server0 ~]# egrep "(ab){2}" 1.txt  // 查找单词ab 出现两次

                    ababazc

                 [root@server0 ~]# egrep "\bab" 1.txt   // 查找 单词 ab 且前面无 字符 或者 与字符隔开
                    tta abc
                    ttan abcd
                    ababazc

                 [root@server0 ~]# egrep "[0-9]" 1.txt    //查找数字  字母也相似 [a-z]
                    45646134654
                    1323yttyyaas

        sed 流式编辑器  (非常重要, 主要用来修改配置文件,可以查看和编辑文档 ,逐行处理)
                选项 :
                        -n 屏蔽默认输出
                        -r 支持扩展正则
                        -i 写入文件 (加入这个选项才 意味着 确认写入   )

                        p 输入出文件内容
                        d 删除文件内容
                        s 替换
                        s/old/new
            sed 用法
                  1) 前置命令| sed [选项] '条件指令'
                  2) sed [选项] '条件指令' 文件

                sed -n '$=' 1.txt       //统计文件行数
                sed -n 'p' 1.txt        //看全部
                sed -n '1p' 1.txt       //看第二行
                sed -n '1,3p' 1.txt     //看前三行  ','
                sed -n '1p;3p' 1.txt   //看前第1行和第3行  ';'
                sed -n '2,+2p' 1.txt  //查看从第2行以及,后面两行
                sed -n '1~2p' 1.txt  //查看从奇数行
                sed -n '2~2p' 1.txt  //查看从偶数行
                sed -n '/^root/,/^adm/p' /etc/passwd  //匹配 以root ,开头 adm 结尾的行

                sed 'p' 1.txt      //输出文件所有行,并附加默认输出
                ###注意使用正则表达式的语法
                sed -n '/^root/p' 1.txt   // 输出以root开头的
                sed -n '/^root/!p' 1.txt  // 输出不以root 开头的
                sed -rn '/o{2}/p' 1.txt   // 使用 扩展正则
                sed -n '2,+2p' 1.txt        //删除第1行以及后面两行

                d 删除

                sed -n '2~2d' 1.txt        //删除奇数行
                sed -n '$d' 1.txt        //删除最后一行
                sed -n '/xml/!d' 1.txt        //删除不包含xml的行  ! 取反
                sed  '/svr5/,$d' /etc/hosts  //删除匹配到的svr5一行,到最后一行


                sed -n 's/2017/2077/' 2.txt // 将每行第一个2017 替换为2077
                sed -n 's/2017/2077/g' 2.txt // 将每行所有2017 替换为2077
                sed -n '2s/2017/2077/2' 2.txt // 将第二行的第二个2017 替换为2077
                sed -n '2s/2017/2077/2 ; 2s/2017/2077/3' 2.txt // 将第二行的第二个和第二行第三个2017 替换为2077

                sed 's!/bin/bash!/sbin/sh!' 2.txt  //将bin/bash 替换为 sbin/sh  !为分隔符号同 /
                sed 's/.//2 ; s/.$//' 2.txt   //删除每行第2个字符和最后一个字符

                                                        \1 可视为位置变量
                sed -r 's/(^.)(.*)(.$)/\3\2\1/' 2.txt  //使用扩展正则表达式 将文件的 头和尾互换 ;;()有复制的效果


            eg: 编写一个自动部署 ftp 的 脚本 并开启自动上传功能
                #!/bin/bash
                yum -y install vsftpd
                cp /etc/vsftpd/vsftpd.conf /etc/vsftpd/backup.conf
                sed -i 's/^#anon/anon/' /etc/vsftpd/vsftpd.conf
                chmod 777 /var/ftp/pub
                systemctl restart vsftpd
                systemctl enable vsftpd

                #### 将 passwd 文件 上下倒过来 输出,且 每行从左右倒过来;;; 不加 rev 只上下倒
                tac /etc/passwd | rev
                nigolon/nibs/:/::27:27:x:pmudpct

            sed文本块处理动作
                i    行前插入文本         ###2iyy 在第二行前添加文本yy; 4,7iyy 在4-7 每行前插入
                a    行后插入文本         ###2auu 在第二行后添加文本uu ;/^xx/ayy 在以xx开头的行后添加
                c    替换整行            ###2cyy  将第二行替换为 yy

            多行文本的修改
                    sed -n '2cxx\nyy' m.txt  ####将第二行 替换为xx yyy
                    #### 在 hosts 文件末尾添加 两行
                    sed  '$a192.168.4.5 server0.tarena.com svr5\n192.175.217.56 www.baidu.com' /etc/hosts
            eg:   ###  取出 对应用户的密码 并将其输出
                  ###  取出以bash 结尾 且替换 ':' 之后的部分 为空
                  sed  -n '/bash$/s/:.*//p' /etc/passwd
                  sed  -n '/bash$/p' /etc/passwd | sed -n 's/:.*//p' /etc/passwd
                  ###
                  遍历 文本的写法 while中的选项read 不可更换
                  cat /etc/passwd | while read line ; do echo "[$line]"; done
                  ### 从 shadow 中 取出 root的 密码
                  sed -rn 's/root:([^:]+).*/\1/p' /etc/shadow
            #######################################################################
                  #!/bin/bash
                  sed -n '/bash$/s/:.*//p' /etc/passwd | while read var ;
                  do
                  echo -n "$var -->"
                  sed  -rn "s/$var:([^:]+1).*/\1/p" /etc/shadow
                  done
        awk基本用法(非常重要;;;字符串的处理)
            格式:
                1) 前置命令|awk [选项] '[条件][指令]'
                2) awk[选项] '[条件][指令]' 文件
                有多条指令可以以; 分割
            常用的参数
                -F : 定义分隔符;;; 可省略(默认空格或者tab位)
                -F, 分隔符为','

                    ###显示文件的第三行 第一行
                    eg:awk '{print $3,$1}' user.txt
                    ###取出passwd 中的 用户名
                    awk -F: '{print $1}' /etc/passwd
                    ###取出shadow 中的密码
                    awk -F: '{print $2}' /etc/shadow
                    /var/log/secure 保存的安全相关的 日志文件
                    ### 检测等失败的 ip 地址
                    awk '$6=="Failed"{print $11}' /var/log/secure
                    #### 查看空闲 内存
                    free |awk '{print $3}'
                    ###查看网络流量
                    ifconfig eth0 |awk '/RX p/{print $5}'
            awk 内置变量
                有特殊含义,可直接使用
                    变量           用法
                    FS           保存或设置字段分隔符,例如FS=":" ,与-F功能一样
                    $n           指定分割的第n个字段,如   $1 , $3 分别表示第 1,3 列
                    $0           当前读入的整行文本内容
                    NF           纪录当前处理的字段个数(列数)
                    NR           纪录当前已读入行的数量 (行数)
                awk 过滤的时机
                    开始BEGIN{}
                        读入第一行 文本之前执行
                        初始化操作
                    过程{}
                        逐行处理文本执行相应的处理
                        常见的指令编辑模块
                    结束END{}
                        处理完最后一行文本后执行
                        一般用来输出结果
                eg:
                     输出行列
                    awk -F: '{print NR,NF}' /etc/passwd
                     输入 每行的最后一列
                    awk -F: '{print $NF} '  /etc/passwd
                    统计passwd 中以bash 结尾的 用户数量并打野出来
                    awk -F: 'BEGIN{x=0}/bash$/{print $1;x++}END{print x} '  /etc/passwd

                eg: 如何筛选出系统中cpu使用率最高的部分,并输出
                    ### 显示 系统信息
                    [root@server0 ~]# ps -eo %mem,%cpu,ucmd
                  ### $1  $2   $3
                    %MEM %CPU CMD
                     0.7  0.0 systemd
                     0.0  0.0 kthreadd
                     0.0  0.0 ksoftirqd/0
                                                    A=A+$2
                    ps -eo %mem,%cpu,ucmd | awk '{A[$3]+=$2}END{for (i in A)print A[i],i}' | sort -n
                    ### 显示 系统中内存占用最大的部分
                    ps -eo %mem,%cpu,ucmd | awk '{A[$3]+=$1}END{for (i in A)print A[i],i}' | sort -n


                eg: 编写脚本 要求如下
                    检测cpu 负载              uptime    uptime | awk '{print $(NF-2)}'|  sed 's/,//'
                    网卡流量                  ifconfig   ifconfig eth0 | awk '/RX p/{print $5/1024^2"Mib"}'
                    内存剩余容量               free       free -m | awk '/Mem/{print $4"MIB"}'
                    计算机账户数量             df          df -h | awk '/\/$/{print $(NF-2)}'
                    当前登录计算机账户数量      /etc/passwd /  who  awk 'END{print NR}' /etc/passwd
                    计算机当前开启进程数量      ps aux          ps aux | awk 'END{print NR}'
                    本机安装软件包数量         rpm -qa         rpm -qa | awk 'END{print NR}'
                脚本如下:
                    #!/bin/bash
                    echo -ne "系统负载:\t"
                    uptime | awk '{print $(NF-2)}'|  sed 's/,//'
                                 echo -ne "网卡流量\t"
                    ifconfig eth0 | awk '/RX p/{print $5/1024^2"Mib"}'
                                 echo -ne " 内存剩余容量\t"
                    free -m | awk '/Mem/{print $4"MIB"}'
                                       echo -ne "计算机账户数量\t"
                    df -h | awk '/\/$/{print $(NF-2)}'
                                     echo -ne  " 当前登录计算机账户数量\t"
                    awk 'END{print NR}' /etc/passwd
                                     echo -ne  "计算机当前开启进程数量\t"
                    ps aux | awk 'END{print NR}'
                           echo -ne " 本机安装软件包数量\t"
                    rpm -qa | awk 'END{print NR}'
            补充:
            每秒执行一次 xxx,配合其他命令使用 来持续检测 .
            watch -n 1 'ps aux'
            echo -n  不换行
            echo -e  对转义字符进行解释
            echo -t  tab
            echo -r  回到行首显示
                    ###实现类似 计时器的功能
                    for i in {00..99};do
                    > echo -ne "id:${i}\r "
                    > sleep 1
                    > done
                      id:05
                    ### 进度条  主要用 \033[110Ga 的 功能
                                          110 表示输出的列数,a 代表输出内容
                    #!/bin/bash
                    astr="|-->"
                    for i in {00..100};do
                            echo -en "\033[110G${i}%"
                            echo -en "\033[${i}G${astr}"
                            sleep 0.2
                    done






