
######################################################
SHELL SCRIPT  SHELL 脚本(目前不做要求,之后会专门讲)
脚本:一个可以执行的文件,运行可以实现某种功能(类似于某种程序)
[root@server0 ~]# vim /root/helooworld.sh  #创建脚本
[root@server0 ~]#chmod ugo+x /root/helooworld.sh  #赋予执行权限
[root@server0 ~]# /root/helooworld.sh  #绝对路径执行
	echo hello world !
	uname -r > /root/name.txt
	cat /etc/redhat-release >> /root/name.txt
	cat /root/name.txt

Shell脚本的组成 
练习题 请查看 ENGERINGER---01练习题
#! 环境声明  #! /bin/bash
# 注释文本
# 可执行代码
eg:
	#!/bin/bash
	uname -r #查看内核信息
	hostname #查看主机名称 ###vim  /etc/hostname  主机名位置

	cat /etc/redhat-release #查看 系统信息
	ifconfig | head -2  #查看ip
	grep bin /etc/passwd | tail -2

变量
 以不变的名称存放变化的值
 如何创建变量
   变量名=存放值
   变量名要求:  = 两边不能有空格 (shell规定) 
		变量名只能由数字字母下划线组成,区分大小写且不能以数字开头(用户不可以 系统可以),
		不要使用关键词作为名字,
		若变量名已存在,则会对该变量重新赋值
 调用变量 
     $变量名 
     ${变量名}	 ########变量与常量结合
eg:
	[root@server0 ~]# a=10086
	[root@server0 ~]# echo $a
	10086
	[root@server0 ~]# a=redhat
	[root@server0 ~]# echo ${a}7  ########变量与常量结合
	redhat7
变量分类(运维角度)
环境变量 : 变量名大写,变量的值有系统定义完成(有系统完成,开机的过程中定义完成)
	PWD PAHT USER LOGNAE SHELL HOME
                  当前登录用户
位置变量 : 执行脚本时提供命令行参数 ,系统自动完成
	表示$n, n为序号
	在执行脚本时 后接的第一个参数 会传递给 $1
	[root@server0 ~]# vim /root/user.sh
	echo successfuly useradd $1      参数
	[root@server0 ~]# /root/user.sh nsd001
 	###########################################
	[root@server0 ~]# vim /etc/cat.sh
	#~/bim/bash
	cat -n $1 | head -$2   head / tail 默认显示前10行
	[root@server0 ~]# /etc/cat.sh /etc/passwd

shell 交互 信息
   read 
	1.直接产生交互
	2.记录用户在键盘上的输入
	3.讲用户在键盘的输入复制给一个变量储存
eg:设定用户名和密码创建用户
	[root@server0 ~]# vim /root/user.sh
	[root@server0 ~]# vim /root/user.sh
	#!/bin/bash
	# echo 请输入USERNAME
	read -p ':请输入USERNAME' a
	read -p ':PASSWD' b

	#echo 请输入PASSWD
	#read b
	#read -p 请输入USERNAME
	#read -p 请输入PASSWD

	
预定义变量
	useradd $a &> /dev/null   ### &>  将错误信息和正确信息传递给 下一部
	echo successfuly useradd $a
	echo $b | passwd --stdin $a &> /dev/null
	echo successfuly passwd $a
	        
	$# 统计用户的输入信息(if判断 常用)
	[root@server0 ~]# /root/1.txt 1 2 3 4 5 6 
	#!/bin/bash
	echo $1
	echo $2
	echo $# ###统计输入参数的数量
	1
	2
	6
	$?程序退出后状态显示  (if 判断中 命令是否成功)
	0 正常 
	非0 不正常
自定义变量
   用户自己定义 



重定向输出
(补充追加重定向>>)
 > 只收集正确输出
 2> 只收集错误输入
 &> 收集所有输出
>&2  将正确输出转化为错误 输出
补充: 
  单引号 ''  屏蔽所有的特殊符号 原样输出
  $(hostname) 将变量作为一个参数
 
   反撇号`` 或者$() : 将命令的输出,直接参与下次运行
   	[root@server0 ~]# mkdir /$(hostname)
	[root@server0 ~]# ls /
	bin   dev  home  lib64  mnt  proc  run   server0.example.com  sys  usr
	boot  etc  lib   media  opt  root  sbin  srv                  tmp  var
eg: 创一个以当前日期为名的目录
	[root@server0 ~]# mkdir mydate-$(date +%F)  
#####date +%F 注意这里的+%F   
显示完整日期 [student@gao ME]$ date +%F  2019-04-11

	[root@server0 ~]# ls
	anaconda-ks.cfg  mkdir              Pictures
	Desktop          Music              Public
	Documents        mydate-2019-04-11  sysinfo.sh
	Download         Templates
	helooworld.sh    name.txt           Videos
##############################################################
黑洞设备 
/dev/null 
专门为写脚本产生的无用数据而生 
无限制 把无用的数据 定向到 黑洞即可
####################################################################
条件测试
 [ 测试表达式 ] 注意空格 
常用的测试选项
 -e 文档存在为真 (查询 文件和 目录 是否存在 )
 -d 文档存在,且必须为目录为真(只能查询 目录 是否存在)
 -f 文档存在,且必须文件为真(只能用来筛选文件是否存在)
 eg: 
这是一个 文件测试的脚本 
#!/bin/bash
if [ -f $1  ];then
  echo file
elif [ -d $1 ];then
  echo  doctum
elif [ -e $1 ] ;then
echo EXIT 
else
    echo NULL
    exit 6
fi

比较整数大小(小数之后在学)
  -gt    -ge -eq  -ne  -lt   -le
   大于 大于等于 等于 不等  小于  小于等于
字符串的比较
  == :两个字符串一样为真
echo $?  0为真  ###$?程序退出后状态显示
 != 不等于为真
echo $?  0 为真 ###$?程序退出后状态显示  使用 echo $?
################################
if 选择结构
双分支
	if[ 条件 ];then
 	   命令
	else
	   命令
	fi
###############################
if 多分支处理
	if [ 条件 ];than
	命令1
	elif [ 条件 ];than
	命名2
	  *
	  *
	  *
      elif [ 条件 ]
	命令n
	else
	命令
	fi
eg:检测用户是否存在 ,不存在则创建

[root@server0 ~]# vim /root/user.sh

#!/bin/bash
# echo 请输入USERNAME
       read -p '输入用户:' a
       id $a &> /dev/null
       if [ $? -eq 0 ];then  ####$?程序退出后状态显示  使用 echo $?  查询
            echo 用户存在
            id $a
       else
            echo 用户不存在 
#       read -p '请输入USERNAME' a
            echo 正在创建用户$a
            read -p 'PASSWD' b
            useradd $a &> /dev/null
            echo successfuly useradd $a
            echo $b | passwd --stdin $a &> /dev/null
            echo successfuly passwd $a
        fi
~    
循环结构
	有限次循环
	for循环 结构 
	for 变量名 in 值列表 
	do 
	   命令
	done	
	   命令
值得列表可以不参与循环
数值范围
{起始..结束}
{1..100} = 1-100 连续的数字

#####################################################
系统安全保护
SElinux 安全机制 
linux 内核 已经集成 (2.6以上)
SElinu 运行的三种模式
enforcing (默认)强制    permissive  宽松    disable  彻底禁用
任何模式变为disable(彻底禁用)模式,必须修改配置文件 重启
任何模式的转换都需要修改配置文件 ,重启后生效
 切换运行模式 (下次开机失效)
     (零时设置) 
     gentenforce ##########查看selinu 状态
        enforce  强制模式
     setenforce 0 ################修改当前selinux状态
	Permissive  (宽松模式)
       永久修改 (修改配置文件＃系统下次启动生效)
修改  vim /etc/selinux/config 
      SELINU=permissive  ##########宽松模式
vim 中命令模式下按 C 光标之后被删除
###############################
配置用户环境  (设置永久别名)
 开启新终端后生效
  影响指定用户的bash 解释器
  ~ /.bashrc,每次开启bash 终端生效 ####注意这是一个隐藏文件 
  [root@server0 ~]# vim /root/.bashrc 修改root 用户的
  [student@gao ~]$ vim /home/student/.bashrc   $####修改用户studen 的bash .添加别名
	  alias gos='ssh -X root@172.25.0.11'
	#mount | grep qemu &> /dev/null
	alias god='ssh -X root@172.25.0.10'

  影响所有用户的 bash 解释器
  [root@server0 ~]# vim /etc/bashrc
  source ~/.bashrc ###重新加载bash 配置文件

###################################
防火墙策略的管理(基础阶段)
  在之后的服务学习中注意 selinux 状态 处于 permissive 或者 disable 
一 搭建基本的web服务 (不涉及优化) 
   web 服务 :提供页面内容服务
   1. yum 安装  httpd
   2. 重启 httpd 服务
[root@server0 ~]# systemctl restart httpd 
   3. 本机测试 访问 172.25.0.11
   filefox 访问 172.25.0.11
    在-X远程访问 Firefox 时保证 本机物理机 的Firefox没有开启 ,否则会出现错误
   4.在example.server中写一个网页
     网页默认存放路径: /var/www/html/ 当该路径下没有页面时会自定显示测试页面
     默认页面文件名称: index.html
二 构建FTP服务器
   ftp服务默认共享路径: /var/ftp
  1. 安装 vsftpd
    yum -y install vsftpd
   2. 重启服务 
    systemctl restart vsftpd 
   3.验证 ftp 
    [root@server0 ~]# firefox ftp://172.25.0.11 
#############################
防火墙策略
   作用:隔离
            硬件防火墙 : huawei 思科 h3c 
            软件防火墙 : firewalld linux 默认安装启动
系统服务 :firewalld
     管理工具: firewall-cmd   firewall-cofig(图形)
     预设安全区域
	     首先判定请求 应该划分给某个区域
	     根据不同区域设置不同规则
　　　目前只讲四个区域	
-------public: 仅允许访问本机的sshd ping dhcpd 服务
-------trusted:允许任何访问
-------block: 阻塞任何来访请求 (有明确拒绝,客户端有接受回应)
-------drop:丢弃任何来访数据包 (直接丢弃,客户端没有回应,,,,节省资源)

配置规则位置
     --运行时(runtime)
     --永久(permanent)

 数据包:目标地址 源IP地址 数据
 防火墙判定规则;
	1.查看请求数据包中源IP 地址,然后查看防火墙所有区域,那个区域有源IP规则，则进入该区域


	2.进入默认区域ｐｕｂｌｉｃ（由ｒｏｏｔ指定）
防火墙的规则中不允许　同一个ｓｏｕｒｃｅ　ｉｐ添加到两个块中　不然会报错
################################################33
一　防火墙默认区域的修改
　　查看防火墙默认区域
　　firewall-cmd --get-default-zone 
    firewall-cmd--set-default-zone=block ###设定防火墙默认区域为ｂｌｏｃｋ
  在区域中添加允许访问的服务ＯＲ协议 (背下来)
	　九大协议 常用端口
　　　　　ｈｔｔｐ：超文本传输协议　　           端口: 80
　　　　　ｈｔｔｐｓ：安全超文本传输协议               443
	　ＤＮＳ：　域名解析协议			            53
	　ＦＴＰ　：文件传输协议                        21(用于链接)20(用于传输数据)
	　ＴＦＴＰ：简单文件传输协议                     69
	　ｔｅｌｎｅｔ：　远程管理协议                   23
　　　　　ｐｏｐ３：邮件协议　（收）                 110
	　ＳＭＴＰ：邮件协议　（发）                    25
　　　　　ＳＮＭＰ：　简单的网络管理协议　            161
        Mariadb数据库 mysql                     3306
        imap                                    143
ｅｇ：　给ｓｅｒｖｅｒ0　的ｆｉｒｅｗａｌｌ的ｐｕｂｌｉｃ添加　ｈｔｔｐ　和ｆｔｐ协议
查看ｆｉｒｅｗａｌｌ的ｐｕｂｌｉｃ域的规则
[root@server0 ~]# firewall-cmd --zone=public --list -all　＃＃＃查看区域规则
[root@server0 ~]# firewall-cmd --zone=public --add-service=http
[root@server0 ~]# firewall-cmd --zone=public --list-all 
[root@server0 ~]# firewall-cmd --zone=public --list-all 
public (default, active)
  interfaces: eth0
  sources: 
  services: dhcpv6-client http ssh
  ports: 
  masquerade: no
  forward-ports: 
  icmp-blocks: 
  rich rules: 
＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃
永久的防火墙规则
使用选项
　－－ｐｅｒｍａｎｅｎｔ　
注意设置玩永久防火墙后记得重新加载
ｅｇ：
[root@desktop0 ~]# firewall-cmd --permanent --zone=public --add-service=ftp ＃＃＃＃永久加载策略
　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　需要添加的服务名
[root@desktop0 ~]# firewall-cmd --reload 　＃＃＃＃＃重新加载防火墙策略

[root@desktop0 ~]# firewall-cmd --permanent --zone=public --remove-service=ftp #################删除规则（配置文件）　－－ｐｅｒｍａｎｅｎｔ　修改配置文件
[root@desktop0 ~]# firewall-cmd --reload ＃＃＃＃重新加载防火墙策略


＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃


使用防火墙实现端口转发（实现本机的端口映射）
端口：　标示　服务/协议/程序端口
　　　　可以使用ｒｏｏｔ　用户修改服务/协议/程序的
	端口标示程序（防火墙也就是通过端口来判断服务/程序）
一般来说　服务有着默认端口
　　　本地应用的端口重定向（端口１－－端口２）
　　　比如，访问一下两个地址可以看到相同的页面：
客户端访问：172.250.11：80　-------＞防火墙-----------＞172.25.0.11：8000


[root@server0 ~]# firewall-cmd --permanent --zone=public --add-forward-port=port=8000:proto=tcp:toport=80　＃＃＃＃＃＃＃＃＃＃设置端口转发　注意格式　
　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　这里第二个ｐｏｒｔ就无无法ｔａｂ了＃指定转发端口　指定传输协议　＃＃指定目标端口　　
[root@server0 ~]# firewall-cmd --reload 　　＃＃＃＃＃＃＃＃＃＃重新加载ｆｉｒｅｗａｌｌ
success
[root@server0 ~]# firewall-cmd --zone=public --list-all ＃＃＃注意lsit后面没有空格　
public (default, active)
  interfaces: eth0
  sources: 
  services: dhcpv6-client http ssh
  ports: 
  masquerade: no
  forward-ports: port=8000:proto=tcp:toport=80:toaddr=
  icmp-blocks: 
  rich rules:
＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃
触发挂载
　1.关闭ｓｅｒｖｅｒ，添加光驱
　2.安装软件包　实现挂载软件　ａｕｔｏｆｓ
[root@server0 ~]# yum -y install autofs

[root@server0 ~]# systemctl restart autofs
[root@server0 ~]# systemctl enable autofs　　＃＃＃设置开机自启
[root@server0 ~]# cd /misc/cd　　＃＃＃＃＃＃＃＃＃＃＃＃当用户进入／ｍｉｓｃ／ｃｄ　目录的时候（特定条件）　　ａｕｔｏｆｓ　自动创建挂载点且自动挂载，其他路径不可以，　一段时间后自动卸载，用的时候自动挂载
＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃
[root@server0 ~]# ls /etc/auto.master　　＃＃触发挂载主配置文件
/etc/auto.master
[root@server0 ~]# ls /etc/auto.misc 　　＃＃＃＃挂载配置文件
/etc/auto.misc
触发挂载必须为两层目录
　　　/nsd/　　第一层监控点，由auto.master 设定
	abc　　　
####################
[root@server0 ~]# vim /etc/auto.master　　＃＃＃当我们需要修改　监控点的时候添加（注意不要删除　原本的　写上自己的　规则就好）　/nsd    /etc/test.misc
　　
 监控点　　指定挂载在配置文件的路径
/misc   /etc/auto.misc
翻译：设置挂载点为　/misc ，想要知道挂载什么设备．请看/etc/auto.misc

[root@server0 cd]# vim /etc/test.misc

abc    -fstype=xfs,rw :/dev/vdb1　　＃＃＃＃＃＃＃＃＃＃＃＃＃格式

root@server0 cd]# cd /nsd/abc ####使用

＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃
添加一个ｓｗａｐ分区（交换分区）
　　　作用：在一定程度上缓解内存需求，当物理机器内存不足时讲一部分数据放到ｓｗａｐ中，其他平台叫做　虚拟内存
　Ｌｉｎｕｘ　一般也是使用分区空间来充当交换空间
　可以由多个分区来组成．

怎么设置

[root@desktop0 ~]# fdisk /dev/vdb　＃　创建一个分区
[root@desktop0 ~]# mkswap /dev/vdb1　　＃格式化　为ｓｗａｐ
正在设置交换空间版本 1，大小 = 524284 KiB
无标签，UUID=b9ae5113-aea8-4e4d-8b05-81974f61d1be
[root@desktop0 ~]# blkid /dev/vdb1　　＃查看文件系统类型　　　＃＃＃＃　df -h 相当于　打开我的电脑后看到的　磁盘信息　,lsblk 相当与　磁盘管理后看到的
/dev/vdb1: UUID="b9ae5113-aea8-4e4d-8b05-81974f61d1be" TYPE="swap"
[root@desktop0 ~]# swapon /dev/vdb1 　　＃＃＃＃＃＃＃＃＃＃打开ｓｗａｐ分区
[root@desktop0 ~]# swapon -s　　　　　　　＃＃＃＃＃＃＃＃＃＃查看ｓｗａｐ分区信息
文件名				类型		大小	已用	权限
/dev/vdb1                              	partition	524284	0	-1
[root@desktop0 ~]# swapoff /dev/vdb1 ＃＃＃＃＃＃＃关闭　swap 分区


[root@desktop0 ~]# vim /etc/fstab 　＃＃＃设置ｓｗａｐ分区开机自动挂载

[root@desktop0 ~]# swapon -a 　＃＃＃自动挂载ｓｗａｐ分区
[root@desktop0 ~]# swapon -s　＃＃＃３显示　ｓｗａｐ分区信息
文件名				类型		大小	已用	权限
/dev/vdb1   



＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃３３
iscsi 　网络磁盘服务(共享磁盘/分区) 类似于　ｓｈｅｌｌ　脚本的地位　也就是说必须学好  怎么读 爱斯嘎see
　　作用：主要用在集群中　高可用　
　　工作模式：　基于　ｃ/ｓ架构的虚拟磁盘技术
　　　　　　　　服务器提供磁盘空间，客户机链接并且当成本地磁盘使用
服务端：虚拟机　ｓｅｒｖｅｒ提供磁盘空间　　　
		＃＃＃＃＃装包　配置　启动服务
环境准备　
　1.　ｆｉｒｅｗａｌｌ　设置
	[root@server0 ~]# firewall-cmd --set-default-zone=trusted 
	success
	＃＃＃＃ｄｅｓｋｔｏｐ也要将防火墙　设置为　允许所有
	＃＃安装软件包
	[root@server0 ~]# yum -y install targetcli
	＃＃配置　可以支持全程ｔａｂ
	＃使用ｆｄｉｓｋ　分一个空闲分区　不用格式化(没有文件系统)
	[root@server0 ~]# fdisk /dev/vdb
	
　2.运行targetcli 进行设置	
	将使用targetcli 比喻成　快递运输　主机　他会要求原包装（backstore）　且木箱子(target)   将原包装装进木箱子，　关联起来（lun）　，指定定收件人　（acl 访问控制）
	target，磁盘组
　　		是客户端的访问目标，作为一个框架，由多个lun 组成
	lun，逻辑单元(将后端存储放入磁盘组)
 　　		每一个lun 需要关联到某一个后端设备存储中，在客户端会视为一块虚拟磁盘





	进入targetcli　　＃＃＃＃默认exit退出命令　保存配置文件＃＃　ｃｔｒｌ　＋　Ｃ　是不会保存配置文件的
	[root@server0 ~]# targetcli 
		/> ls　＃查看需要配置的文件
	o- / ..................................................................... [...]
	　／ｄｅｖ／ｖｄｄ１　后端存储
	  o- backstores .......................................................... [...]
	　
	  | o- block .............................................. [Storage Objects: 0]
	  | o- fileio ............................................. [Storage Objects: 0]
	  | o- pscsi .............................................. [Storage Objects: 0]
	  | o- ramdisk ............................................ [Storage Objects: 0]
	  o- iscsi ........................................................ [Targets: 0]
	  o- loopback ..................................................... [Targets: 0]
	1）＃创建后端储存（backstore，后端存储）	
	/> backstores/block create name=iscsi_store dev=/dev/vdb1
	创建成功
	Created block storage object iscsi_store using /dev/vdb1.
	/> 
	2）＃创建　target，磁盘组（木质箱子）
		ISCSI Quanlified Name (iqn)命名规范（不符合创建时不通过）
		iqn.yyy-mm.倒叙域名：自定义标示
		用来识别target 磁盘组，也用来识别客户机身份
		名称例子：
		iqn.2016-02.com.example:server0
	iqn.2016-02.com.example:desktop0
	/> iscsi/ create iqn.2019-04.com.example:server0
	Created target iqn.2019-04.com.example:server0.
	Created TPG 1.＃创建成功
	3）配置　lun ，　关联（木箱子）
	/> iscsi/iqn.2019-04.com.example:server0/tpg1/luns create /backstores/block/iscsi_store 
	Created LUN 0.＃成功
	4）配置acl 访问控制设置客户端声称的名字，（需要手写）名字需要符合iqn 命名规范，设置的名字需要在客户端在写一遍
	/> iscsi/iqn.2019-04.com.example:server0/tpg1/acls create iqn.2019-04.com.example:desktop0
	Created Node ACL for iqn.2019-04.com.example:desktop0　
	Created mapped LUN 0.＃　成功
　　　　5）指定端口，网卡（服务器肯定不止一个网卡）　　　　　　　　　　　＃指定ｉｐ，若不愿指定　可以写成　0.0.0.0，写四0，意味这访问我的任何ＩＰ就好，只要你能ｐｉｎｇ通
	/> iscsi/iqn.2019-04.com.example:server0/tpg1/portals create 172.25.0.11
	Using default IP port 3260　＃默认
	Created network portal 172.25.0.11:3260.＃创建成功
	查看　
	/> ls 
	o- / ........................................... [...]
	  o- backstores ................................ [...]
	  | o- block .................... [Storage Objects: 1]
	  | | o- iscsi_store  [/dev/vdb1 (3.0GiB) write-thru activated]
	  | o- fileio ................... [Storage Objects: 0]
	  | o- pscsi .................... [Storage Objects: 0]
	  | o- ramdisk .................. [Storage Objects: 0]
	  o- iscsi .............................. [Targets: 1]
	  | o- iqn.2019-04.com.example:server0 ..... [TPGs: 1]
	  |   o- tpg1 ................. [no-gen-acls, no-auth]
	  |     o- acls ............................ [ACLs: 1]
	  |     | o- iqn.2019-04.com.example:desktop0  [Mapped LUNs: 1]
	  |     |   o- mapped_lun0  [lun0 block/iscsi_store (rw)]
	  |     o- luns ............................ [LUNs: 1]
	  |     | o- lun0 .... [block/iscsi_store (/dev/vdb1)]
	  |     o- portals ...................... [Portals: 1]
	  |       o- 172.25.0.11:3260 ................... [OK]
	  o- loopback ........................... [Targets: 0]
	/> exit 保存（不要用ｃｔｒｌ　＋　Ｃ）
	/> exit
	Global pref auto_save_on_exit=true
	Last 10 configs saved in /etc/target/backup.
	Configuration saved to /etc/target/saveconfig.json
　　　3.重启服务
	[root@server0 ~]# systemctl restart target　＃重启服务
	[root@server0 ~]# systemctl enable target　　＃开机自启
	ln -s '/usr/lib/systemd/system/target.service' '/etc/systemd/system/multi-user.target.wants/target.service'　
	＃制作快捷方式，不是报错
	[root@server0 ~]# 

客户端：
1.安装软件包　iscsi-initiator-utils
	[root@desktop0 ~]# yum -y install iscsi-initiator-utils
2.修改配置文件，指定客户端生的命令
	[root@desktop0 ~]# vim /etc/iscsi/initiatorname.iscsi 
	InitiatorName=iqn.2019-04.com.example:desktop0
3.数据库重启服务　iscsid 服务，用于识别客户端 声称名字＃修改完　配置文件后需要重启服务
	[root@desktop0 ~]# systemctl restart iscsid
	有时会出现　需要使用　systemctl daemon-reload 　刷新命令
4.发现，链接　iscsi 磁盘 ###告诉快递的位置
	iscsiadm 
	由于命令太长　使用mna iscsiadm 　／example  在查找例子 　ＥＸＡＭＬＰＥＳ中的　将第一个例子复制出来
	[root@desktop0 ~]# man iscsiadm
	[root@desktop0 ~]# iscsiadm --mode discoverydb --type sendtargets --portal 172.25.0.11 --discover
	172.25.0.11:3260,1 iqn.2019-04.com.example:server0
5.重启　iscsi 服务（客户端）
	[root@desktop0 ~]# systemctl restart iscsi　　＃＃＃＃＃重启服务　＃＃这个　服务名字ｉｓｃｓｉ　　没有　ｄ
	[root@desktop0 ~]# systemctl enable iscsi　　＃＃＃＃＃＃＃开机自启
	[root@desktop0 ~]# lsblk 
	NAME   MAJ:MIN RM SIZE RO TYPE MOUNTPOINT　　＃查看磁盘
	sda      8:0    0   3G  0 disk 　　＃＃＃ｉｓｃｓｉ　磁盘　　　　　　　
	vda    253:0    0  10G  0 disk 
	└─vda1 253:1    0  10G  0 part /
	vdb    253:16   0  10G  0 disk 
	[root@desktop0 ~]# 
systemctl students
＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃
提问ＩＱＮ的两个作用：　1.用来识别target 磁盘组，2.也用来识别客户机身份

＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃

数据库的基本管理　　
什么是数据库：	
	存放数据的仓库
数据库结构:
在数据库中，有许多的库，每个库中存在表格
分类：　
ＭＩＣＳＲＯＦＴ　－－－　ＳＱＬ　ＳＥＲＶＥＲ　
ＩＢＭ　　　　　　－－－　ＤＢ２
甲骨文　　　　　　－－－　Orcale  MySQL 
社区开源　　　　　－－－　Maira DB　和　MySQL 的作者是一个人
（软件）Maria DB
一.环境准备＆重启服务
安装　　
	[root@server0 ~]# yum -y install mariadb-server (服务端软件)
重启服务
	[root@server0 ~]# systemctl restart mariadb
卸载　 ####这个是和删根一样的操作，别用
	[root@server0 ~]# yum remove mariadb-server　
二.数据库基本操作
＃＃＃＃＃＃＃＃＃＃＃＃＃所有命名都已　；　结尾　，不然报错
增删改查
[root@server0 ~]# mysql　　＃＃＃进入数据库
	Welcome to the MariaDB monitor.  Commands end with ; or \g.
	Your MariaDB connection id is 2
	Server version: 5.5.35-MariaDB MariaDB Server

	Copyright (c) 2000, 2013, Oracle, Monty Program Ab and others.

	Type 'help;' or '\h' for help. Type '\c' to clear the current input statement.

MariaDB [(none)]> 
MariaDB [(none)]> show databases;＃＃＃＃查看数据库　，注意这里的ｄａｔａｂａｓｅｓ　有ｓ　
MariaDB [(none)]> show databases;
+--------------------+
| Database           |
+--------------------+
| information_schema |
| gaoyaun            |
| mysql              |
| nsd1903            |
| performance_schema |
| test               |
+--------------------+
6 rows in set (0.00 sec)



MariaDB [(none)]> create database gaoyaun;＃＃＃＃＃＃创建库　　ｄａｔａｂａｓｅ　　没有ｓ
Query OK, 1 row affected (0.00 sec)


MariaDB [(none)]> drop database nsd1903;　＃＃＃＃删除库
Query OK, 0 rows affected (0.00 sec)



三.为数据库管理员设置密码
　　数据库管理员：　ｒｏｏｔ　，数据库所有用户信息由数据库中的ＭＹＳＱＬ管理
　　系统管理员：　　ｒｏｏｔ　，系统所有的用户信息，由　／ｅｔｃ／ｐａｓｓｗｄ管理
设置数据库管理员密码
[root@server0 ~]# mysqladmin -u root password '123'###注意格式　
登录
[root@server0 ~]# mysql -u root -p 　＃交互式
Enter password: 
MariaDB [(none)]> 

[root@server0 ~]#　mysql -u root -p123 ## 非交互　
MariaDB [(none)]> 

四.表格操作;表记录，表字段
　　　　　　　行　　　列
	　　　３表记录　　５表字段
	编号　姓名　性别　联系方式　　　地址　
	 1　　ａ　　ｗ　　　ａａａ　　　ｎ　
     2　　ｂ　　ｍ　　　ｂｂｂ　　　ｗ
　　　3　　ｃ　　ｗ	 ｃｃｃ　　　ｅ

增删改查　: instal delea update  select
　　　＃＃＃＃进入　mysql 库
	MariaDB [(none)]> use mysql;
	###进入其他库　
	show tables;
	####查看表结构
      desc user;

数据库的导入／恢复　
　　　
[root@server0 ~]# mysql -u root -p123 nsd1903 < /root/users.sql 

表格查询：　
select　　表字段　from 表名

MariaDB [nsd1903]> select * from base  ####相对路径路径　
MariaDB [mysql]> select * from nsd1903.base;　＃＃＃＃＃绝对路径
+------+---------+------------+
| id   | name    | password   |
+------+---------+------------+
|    1 | Tom     | 123        |
|    2 | Barbara | 456        |
|    3 | James   | solicitous |
|    4 | Smith   | tarena     |
|    5 | Barbara | pwd123     |
+------+---------+------------+

MariaDB [nsd1903]> select id,name from base;
+------+---------+
| id   | name    |
+------+---------+
|    1 | Tom     |
|    2 | Barbara |
|    3 | James   |
|    4 | Smith   |
|    5 | Barbara |
+------+---------+

有条件查询：
　查找指定条件的
	  			字段		            字段
MariaDB [nsd1903]> select * from base where password='123';
+------+------+----------+
| id   | name | password |
+------+------+----------+
|    1 | Tom  | 123      |
+------+------+----------+


MariaDB [nsd1903]> select name,password from base where name='tom';
+------+----------+
| name | password |
+------+----------+
| Tom  | 123      |
+------+----------+


MariaDB [nsd1903]> select id,name from base where name='tom';
+------+------+
| id   | name |
+------+------+
|    1 | Tom  |
+------+------+

禁止网络进行链接，只服务与本机
[root@server0 ~]# vim /etc/my.cnf　　＃主配置文件
skip-networking //手写
systemctl restart mariadb  //重启服务
＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃
数据库授权　
　－除了　root 用户，此nsd1903数据库只能被　lisi 查询，密码123　＃＃不需要创建系统用户
　	
	GRANT 权限列表　ON 数据库名 TO　用户名@客户地址 IDENTIFIED BY '密码'; 
	grant select on nsd1903.* to lisi@localhost identified by '123'; 
	当用户ｌｉｓｉ在本地使用　123　登录

联合多表查询
        查询　有多少人姓名　Ｂarbara　同时住在　ＳＵＮＮＹＶＡＬＥ
MariaDB [nsd1903]> select count(*) from base,location where base.name='Barbara' and location.city='Sunnyvale' and base.id=location.id; 



禁止空密码root 用户访问 mariadb 数据库 
MariaDB [nsd1903]> use mysql  # 进入mysql                    表            表字段
MariaDB [mysql]> select user,host,password from user; ##查看user中的 user,host,password
+------+---------------------+-------------------------------------------+
| user | host                | password                                  |
+------+---------------------+-------------------------------------------+
| root | localhost           | *23AE809DDACAF96AF0FD78ED04B6A265E05AA257 |
| root | server0.example.com |                                           |
| root | 127.0.0.1           |                                           |
| root | ::1                 |                                           |
|      | localhost           |                                           |
|      | server0.example.com |                                           |
| lisi | localhost           | *23AE809DDACAF96AF0FD78ED04B6A265E05AA257 |
+------+---------------------+-------------------------------------------+
7 rows in set (0.00 sec)

MariaDB [mysql]> delete from user where password='';      # 删除表中密码为空的
Query OK, 5 rows affected (0.00 sec)

MariaDB [mysql]> select user,host,password from user;    ##查看user表中 表字段
+------+-----------+-------------------------------------------+
| user | host      | password                                  |
+------+-----------+-------------------------------------------+
| root | localhost | *23AE809DDACAF96AF0FD78ED04B6A265E05AA257 |
| lisi | localhost | *23AE809DDACAF96AF0FD78ED04B6A265E05AA257 |
+------+-----------+-------------------------------------------+
2 rows in set (0.00 sec)


MariaDB [mysql]> flush privileges;####刷新user所有记录 

##########################################
selinux 和 Firewall 状态
配置nfs (nfs共享文件夹) linux之间共享文件
	network file system ,网络文件系统
	-用途:为客户机提供共享使用的文件夹
	-协议:NFS(TCP/UDP 2049) RPC(TCP/UDP 111)
软件包 nfs-utils
服务名 nfs-server
服务端:
1.安装软件包
rpm -q nfs-utlis
nfs-utils-1.3.0-0.el7.x86_64

2.创建共享目录
[root@server0 ~]# mkdir /public
[root@server0 ~]# echo 'I AM STUDENT' > /public/1.txt  
3.修改配置文件/etc/exports ,指定共享目录
-- 文件夹路径  客户机地址(权限)  客户机地址(权限) .....    ##可以写多个客户机地址
 /public      *(ro) ##readonly                  
客户端:
linux需要nfs-utlis软件的支持 来挂在 nfs
在Linux中 共享文件与win不同 , win 直接输入 ip 访问,然而 Linux 需要挂载.
1.查看服务端共享路径并重启服务
showmount -e 172.25.0.11 
Export list for 172.25.0.11:
/public *
[root@server0 ~]# systemctl restart nfs-server
2.挂载 
#####注意格式

[root@desktop0 ~]# mkdir /mnt/nfs
[root@desktop0 ~]# mount 172.25.0.11:/public /mnt/nfs
[root@desktop0 ~]# df -h   #####查看文件系统信息
文件系统             容量  已用  可用 已用% 挂载点
/dev/vda1             10G  3.0G  7.1G   30% /
devtmpfs             906M     0  906M    0% /dev
tmpfs                921M   80K  921M    1% /dev/shm
tmpfs                921M   17M  904M    2% /run
tmpfs                921M     0  921M    0% /sys/fs/cg

3.开机挂载

[root@desktop0 ~]# vim /etc/fstab 
172.25.0.11:/public /mnt/nfs nfs    defaults,_netdev  0         0  
  设备路径                 挂载点  文件系统   参数(别写错了)          备份标记  检测标记


############################################
WEB 服务器
 基于B/S(browser/server)其核心依然是cs 架构的网页服务 
-服务端提供网页
-浏览器下载并显示网页
记得 将防火墙设置为trusted，才能使用 desktop 访问 serve
firewall-cmd --set-default-zone=trusted
server
   20  yum -y install httpd
   23  systemctl restart httpd           # 网页默认路径 /var/www/html/
   26  echo '<h1> I AM STUDENT </h1>' > /var/www/html/index.html
   27  echo '<h1><marquee> I AM STUDENT </h1>' > /var/www/html/index.html

desktop
firefox 172.25.0.11

#############################
WEB服务器软件  (重要啊 面试比问)
 httpd(Apache 软件基金会) nginx(为主) tomcat (兼容JAVA) 都要学习

eg :请大家用Apache 搭一个web环境

默认设置
-listen :监听地
址:端口(80)
-ServerName: 本站点注册的DNS名称(空缺)

	DNS服务器:本次实验由classroom提供(之后自己搭建)
	 server0.example.com	
	 www0.example.cpom
	 webapp0.example.com
注意server的防火墙 是否关闭 (为trusted)
测试域名能否解析  nslookup  域名
[root@server0 ~]# nslookup webapp0.exsample.com

-DocunmetRoot: 网页文件根目录(默认/var/www/html)

[root@server0 ~]# vim /etc/httpd/conf/httpd.conf
	只修改 DocumentRoot 行 
	修改为  DocumentRoot "/var/www/myweb"
[root@server0 ~]# echo '<h1><marquee> I AM MYWEB</h1>' > /var/www/myweb/index.html
重启服务
[root@server0 ~]# systemctl restart httpd
网络路径与实际路径
	客户端访问:
	Firefox 172.25.0.11:80-->服务端 httpd--->DocumentRoot /var/www/myweb-->index.html

服务端 /var/www/myweb/abc/index.html	
客户端 Firefox 172.25.0.11/abc ##注意这里的路径 ,网页文件起点 已经在Documentroot中指定了,这里只要接着写/abc/

########################################
客户端
########################################
配置文件的调用
 重要:由于 主配置文件和调用配置文件使用时在 DOCUMENTROOT 选项中只能有一个生效所以,当有一个站点使用虚拟主机之后其他站点必须使用虚拟主机,否则会按照web优先级显示页面
配置文件路径
[root@server0 ~]# vim /etc/httpd/conf/httpd.conf  ##主配置文件 在工作中 不推荐修改主配置文件 改错了 排错麻烦
[root@server0 ~]# vim /etc/httpd/conf.d/*.conf    ##调用配置文件

为什么分文件写呢? 为了方便自己排错,方便调用,若配置文件过大会影响读取配置文件的速度(重启服务)
#########################################################

虚拟WEB主机 (面试考)
作用:由同一个服务器提供多个不同的站点
区分方式
-基于域名的虚拟主机(主要使用)
-基于端口的虚拟主机(较少使用)
-基于IP的虚拟主机(绝迹江湖)
配置文件(调用配置文件)路径
[root@server0 ~]# /etc/httpd/conf.d/xxxx.conf

写在调用配置文件中

<VirtualHost *:80>
	ServerName  server0.examlpe.com
	DocumentRtoot /var/www/myweb ###由于selinux会限制文件的存放位置,所以在没有修改selinux时不要吧 DocumentROOT 位置放在 其他地方
</VirtualHost>

[root@server0 ~]# mkdir /var/www/qq
[root@server0 ~]# echo '<h1>tencent'> /var/www/qq/index.com

##########################
虚拟web主机的优先级,由上到下优先级变小
若使用了虚拟主机,所有的页面必须使用虚拟web主机来访问
###################################
补充: Samba 共享服务(Windows与Linux 跨平台共享服务)  我选择 nfs
	协议:SMB(沟通验证身份)   CIFS(储存或传输数据)
默认情况必须通过用户验证,才能访问.
专门用于Samba共享服务,验证的用户:Samba共享账号
特点: 
    1.必须要有相应的本地用户相对应
    2.采用独立的密码设置
	也可以使用不能登录的用户只用于验证
虚拟机 server
1.环境准备 samb

 yum -y install samba


2.创建samba共享账号
   pdbedit -a harry   #添加 共享账号 ##必须在本地添加一个账号
   pdbedit -X harry   #-X删除
   pdbedit -L         # 查看所有的samba共享账号	
3.修改配置文件
 [root@server0 ~]# vim /etc/samba/smb.conf 
在命名模式下输入G 到全文最后一行 gg到全文首行

	[nsd]	##设置共享名 Windows中 用得到
	path = /common  ##设置实际共享目录

	默认是连用户的家一起共享出来
4.重启服务
[root@server0 ~]# systemctl restart smb  ##服务名与软件名不同

虚拟机 desktop
1.安装软件包,支持samba共享挂载,让本机识别cifs协议
 yum -y install cifs-utils
 mkdir /mnt/smb #创建挂载点
2.挂载访问samba共享

[root@desktop0 ~]# mount -o user=harry,pass= //172.25.0.11/nsd /mnt/smb/

3.修改SELINUX 策略,布尔值策略(功能的开关)
[root@desktop0 ~]# getenforce  #查看SeLinux状态
Enforcing

[root@server0 ~]# getsebool -a | grep samba #查看bool 状态

samba_export_all_ro --> off
samba_export_all_rw --> off

[root@server0 ~]# setsebool samba_export_all_ro=on ##开启Samba export服务


3.开机自动挂载

vim /etc/fstab 

//172.25.0.11/nsd /mnt/smb/ cifs defaults,_netdev,user=harry,pass=  0 0



############################
课程准备
搭建web服务
要求要有三个 不同的页面 使用三个不同的域名


#############################
web访问限制控制
客户机地址限制
位置: 调用配置文件

若格式忘记的话,可主配置文件,中可以查到
[root@server0 ~]# vim /etc/httpd/conf/httpd.conf

   ######对//var/www设置
		<Directory "/var/www">
		    AllowOverride None
		    # Allow open access:
		    Require all granted  ###　允许所有来源访问
		</Directory>


###url重写(伪静态技术)需要读取,有时候，我们需要修改apache默认配置，但是，
#####我们却不想对apache的http.conf进行太多的修改，所以我们使用.htaccess(分布式配置文件)来达到我们的目的。
####.htaccess提供了针对每个目录改变配置的方法，即在一个特定的目录中放置一个包含指令的文件，
####其中的指令作用于此目录及其所有子目录。不过，我们需要让apache来读取它，这里就需要修改apache下的http.conf了。

我们的apache都有自己项目的默认根目录，在DocumentRoot "D:/www"下面(这里以我的路径为例子) ,有一个叫<Directory>的东西，
它里面有这样一段代码：AllowOverride None，如果我们把None改成All，那么我们的www目录下所有项目都能读取到.htaccess了。

一个单词就解决了我们的问题，固然方便，但是它的弊端也很多。例如每次访问项目时，apache都会对每一个.htaccess文件进行读取，
处理速度大幅度降低；每一个项目都能进行apache的配置修改，安全性大大降低等。　所以默认设置为none





使用: <Directory></Directory>
对于目录设置的 权限子目录默认继承,
除非对于子目录有明确规定





eg:
<Directory 目标地址1>
Require all denied /granted 拒绝/允许/
Require ip 172.0.0.1::1 172.25.0.11 允许部分ip访问/
</Diretcory>

<Directory /var/www/web01>
Require all denied #拒绝所有人访问
</Diretcory>

<Directory /var/www/web02>
Require all granted #允许所有人访问
</Diretcory>

<Directory /var/www/web02>
Require ip 172.0.0.1::1 172.25.0.11 #允许部分用户访问
</Diretcory>

###############
自定WEB根目录
 调整web站点 server0.example.com的网页目录
  要求修改selinux 为permissive 宽松模式
  主配置文件中设定了 网页根目录 /var/www 
  我们可以在调用配置文件中修改  网页文件根目录
	
 
要求如下 
1)新建 /webroot 作为站点目录

	mkdir /webroot
	echo 'i am webroot' > /webroot/index.html
	vim /etc/httpd/conf.d/ruler.conf #调用配置文件--允许访问设置

		<Directory /var/www/web02/pirment>
		Require ip 172.25.0.11
		</Directory>
		<Directory /webroot>
		 Require all granted   ###允许所有访问
		</Directory>
	vim /etc/httpd/conf.d/html.conf #调用配置文件--虚拟主机设置
		<virtualhost *:80>
		documentroot /webroot
		servername server0.example.com
		</virtualhost>

2)修改selinux策略,安全上下文(标签)
###查看selinux的标签值
	[root@server0 ~]# ls -Zd /var/www/ ### -Zd 查看selinux中标记
	drwxr-xr-x. root root system_u:object_r:httpd_sys_content_t:s0 /var/www/
	[root@server0 ~]# ls -Zd /webroot/
	drwxr-xr-x. root root unconfined_u:object_r:default_t:s0 /webroot/

  参照表中目录,重新设定目录的属性
	--chcon [-R] --reference=目录模板 新目录
	--chcon -R --reference=/var/www  /webroot
	eg:
	  chcon -R --reference=/var/www /webroot

	  firefox server0.example.com

###############################################
部署动态网站

静态网站
    服务端的原始网页 与浏览器中访问的网页相同
    由web服务软件处理所有请求
    有文本 图片等静态资源
动态网站
   服务端的原始网页 不等于浏览器访问网页
   由web服务软件接受请求,动态程序转后端模块处理
  PHP网页 python网页 JSP网页
#################################
eg:
部署Python动态网页,为站点 webapp0.example.com
虚拟机
1.下载 网页文件
	[root@server0 ~]# vim /etc/httpd/conf.d/html.conf 
	[root@server0 ~]# cd /var/www/web03

	[root@server0 web03]# wget http://classroom.example.com/pub/materials/webinfo.wsgi

	[root@server0 web03]# ls
	index.html  webinfo.wsgi

2. 实现客户端方便访问,设置页面跳转(页面别名 地址重写) ####重点 操作 务必学会
当客户端访问 网络路径,讲实际路径 页面呈现

	[root@server0 ~]# vim /etc/httpd/conf.d/html.conf

	<virtualhost *:80>
	documentroot /var/www/web03
	alias /  /var/www/web03/webinfo.wsgi #注意alias的位置 必须在Documentroot之下
	servername webapp0.example.com
	</virtualhost>

  	alise 网络路径 实际路径
   	alias /  /var/www/web03/webinfo.wsgi
 
   	alias  / :用户直接输入域名
	[root@server0 ~]# systemctl restart httpd  ###重启服务
	[root@server0 ~]# firefox webapp0.example.com #本地测试
3.server上安装mod_wsgi
   yum -y install mod_wsgi

4.修改配置文件.添加翻译配置
 
	[root@server0 ~]# vim /etc/httpd/conf.d/html.conf

	<virtualhost *:80>
	documentroot /var/www/web03
	WsgiScriptalias /  /var/www/web03/webinfo.wsgi 	
	#注意alias的位置 必须在Documentroot之下,需要在Alisa前面添加wsgiScript
	servername webapp0.example.com
	</virtualhost>
5.修改端口
     这一步 selinux  会影响 httpd 服务启动
	listen 8909 ####httpd 监听端口 修改侦听端口
	<virtualhost *:8909> ###  设置虚拟web主机端口 (网页提供访问端口)
	documentroot /var/www/web03
	wsgiscriptalias /  /var/www/web03/webinfo.wsgi
	servername webapp0.example.com
	</virtualhost>
6.修改selinux  策略 ,非默认端口开放策略

	[root@server0 ~]# vim /etc/httpd/conf.d/html.conf 

	listen 8909
	<virtualhost *:8909>
	documentroot /var/www/web03
	wsgiscriptalias /  /var/www/web03/webinfo.wsgi
	servername webapp0.example.c    om
	</virtualhost>

	[root@server0 ~]# semanage port -a -t http_port_t -p tcp 8909
			
 			-a 添加 -t类型  -p协议
	libsemanage.semanage_exec_prog: Child process /sbin/load_policy did not exit cleanly.
	libsemanage.semanage_reload_policy: load_policy returned error code -1.
	ValueError: 无法提交 semanage 事务
	[root@server0 ~]# systemctl restart httpd
	[root@server0 ~]# firefox webapp0.example.com:8909

#####################################################
web服务中,端口优先级最高
############################################
安全web服务(第一阶段,作为补充内容)

	  PKI 公钥基础设施
	公钥:主要用来加密数据
	私钥:解密数据
	数字证书:证明拥有者的合法性权威性 (单位名称 ,有效期,公钥,颁发机构及签名)
	Certificate Authority, 数字证书授权中心:负责证书的申请 审核 颁发 鉴定 撤销

	公私钥 算是比较安全的 非对称算法

一个安全的网站 所需要的: 
	网站证书
	根证书
	数字证书
	公私钥
部署安全web server服务器
1.部署网站证书 
	 cd /etc/pki/tls/certs
	 wget http://classroom.example.com/pub/tls/certs/server0.crt
2.部署根证书
 在当前路径下
 	wget http://classroom.example.com/pub/example-ca.crt
3.部署解密 秘钥

路径/etc/pki/tls/private

	[root@server0 certs]# cd /etc/pki/tls/private/

	[root@server0 private]# wget  http://classroom.example.com/pub/tls/private/server0.key


4.安装软件,实现加密web传输 mod_ssl
 	yum -y install mod_ssl
	[root@server0 private]# cd /etc/httpd/conf.d/
	[root@server0 conf.d]# ls
	autoindex.conf  README      ssl.conf      welcome.conf
	html.conf       ruler.conf  userdir.conf
5.修改配置文件
	vim 末行模式  :set nu 开启行号 
	vim ssl.conf 

59行	<VirtualHost _default_:443>  ###设置端口
	  DocumentRoot "/var/www/web01"
      ServerName www0.example.com:443
	<VirtualHost>
100 SSLCertificateFile /etc/pki/tls/certs/server0.crt ###指定网站证书

107 SSLCertificateKeyFile /etc/pki/tls/private/server0.key###指定秘钥

122 SSLCACertificateFile /etc/pki/tls/certs/example-ca.crt ##指定CA 证书


重启服务

systemctl restart httpd


访问
Firefox firefox https://webapp0.example.com

##########################
Apache  httpd 服务的日志

通用日志格式(Common Log Format)
这是一个典型的记录格式：

LogFormat "%h %l %u %t \"%r\" %>s %b" common
CustomLog logs/access_log common

它定义了一种特定的记录格式字符串，并给它起了个别名叫common ，其中的"%"指示服务器用某种信息替换，其他字符则不作替换。
引号(")必须加反斜杠转义，以避免被解释为字符串的结束。格式字符串还可以包含特殊的控制符，如换行符"\n" 、制表符"\t"。

我们也可以 自定义httpd的错误 信息格式
#########################################
eg:
127.0.0.1 - frank [10/Oct/2000:13:55:36 -0700] "GET /apache_pb.gif HTTP/1.0" 200 2326

127.0.0.1 (%h)
    这是发送请求到服务器的客户的IP地址。如果HostnameLookups设为 On ，则服务器会尝试解析这个IP地址的主机名并替换此处的IP地址，但并不推荐这样做，因为它会显著拖慢服务器，最好是用一个日志后续处理器来判断主机名，比如logresolve 。如果客户和服务器之间存在代理，那么记录中的这个IP地址就是那个代理的IP地址，而不是客户机的真实IP地址。
- (%l)
    这是由客户端identd进程判断的RFC1413身份(identity)，输出中的符号"-"表示此处的信息无效。除非在严格控制的内部网络中，此信息通常很不可靠，不应该被使用。只有在将IdentityCheck指令设为 On 时，Apache才会试图得到这项信息。
frank (%u)
    这是HTTP认证系统得到的访问该网页的客户标识(userid)，环境变量REMOTE_USER会被设为该值并提供给CGI脚本。如果状态码是401，表示客户未通过认证，则此值没有意义。如果网页没有设置密码保护，则此项将是"-"。
[10/Oct/2000:13:55:36 -0700] (%t)
    这是服务器完成请求处理时的时间，其格式是：
        [日/月/年:时:分:秒 时区]
        日 = 2数字
        月 = 3字母
        年 = 4数字
        时 = 2数字
        分 = 2数字
        秒 = 2数字
        时区 = (+|-)4数字

    可以在格式字符串中使用 %{format}t 来改变时间的输出形式，其中的format与C标准库中的strftime()用法相同。
"GET /apache_pb.gif HTTP/1.0" (\"%r\")
    引号中是客户端发出的包含许多有用信息的请求行。可以看出，该客户的动作是GET ，请求的资源是/apache_pb.gif ，使用的协议是HTTP/1.0 。另外，还可以记录其他信息，如：格式字符串"%m %U%q %H"会记录动作、路径、查询字符串、协议，其输出和"%r"一样。
200 (%>s)
    这是服务器返回给客户端的状态码。这个信息非常有价值，因为它指示了请求的结果，或者是被成功响应了(以2开头)，或者被重定向了(以3开头)，或者出错了(以4开头)，或者产生了服务器端错误(以5开头)。完整的状态码列表参见HTTP规范(RFC2616第10章)。
2326 (%b)
    最后这项是返回给客户端的不包括响应头的字节数。如果没有信息返回，则此项应该是"-"，如果希望记录为"0"的形式，就应该用%B 。
    组合日志格式(Combined Log Format)
    另一种常用的记录格式是组合日志格式，形式如下：

LogFormat "%h %l %u %t \"%r\" %>s %b \"%{Referer}i\" \"%{User-agent}i\"" combined
CustomLog log/access_log combined
    这种格式与通用日志格式类似，但是多了两个 %{header}i 项，其中的header可以是任何请求头。这种格式的记录形如：

127.0.0.1 - frank [10/Oct/2000:13:55:36 -0700] "GET /apache_pb.gif HTTP/1.0" 200 2326 "http://www.example.com/start.html" "Mozilla/4.08 [en] (Win98; I ;Nav)"
    其中，多出来的项是：

    "http://www.example.com/start.html" (\"%{Referer}i\")
    "Referer"请求头。此项指明了该请求是被从哪个网页提交过来的，这个网页应该包含有/apache_pb.gif或者其连接。
    "Mozilla/4.08 [en] (Win98; I ;Nav)" (\"%{User-agent}i\")
    "User-Agent"请求头。此项是客户端提供的浏览器识别信息。

##############################3
邮件服务器
 DNS 服务器 : classroom # 由于目前没有学校DNS服务的搭建

1.server 安装postfix,提供邮件服务软甲

[root@server0 ~]# yum -y install postfix

2.Firewall 设置 trusted 且修改 /etc/post/main.cf

 99 myorigin = server0.example.com
 99 myorigin = $mydomain ##变量调用 #默认补全后缀
 116 inet_interfaces = all  ##本机任何一张网卡都提供 邮件服务
 164 mydestination = $myhostname, localhost.$mydomain, localhost
 164 mydestination = server0.example.com ##判断为本域邮件依据
##重启服务
[root@server0 ~]# systemctl restart postfix.service

####使用mail 命令发信
记得先创建收件人 发件人
mail -s '邮件标题' -r 发件人  收件人@收件域


    [root@server0 ~]# mail -s '买车吗' -r yg xln
    买 奔驰吗?  66 万 ,漏油内种. 一公里没开
    .
    EOT



非交互
echo dc | mail -s '主题' -r 发件人  收件人

mail 收信
mail -u 用户

    [root@server0 ~]# mail -u xln
        Heirloom Mail version 12.5 7/5/10.  Type ? for help.
        "/var/mail/xln": 1 message 1 new
        >N  1 yg@server0.example.c  Thu Apr 18 10:36  18/637   "买车吗"
        &
        Message  1:
#############################
parted分区工具(GPT分区专用)
全程支持tab
GPT最多: 128 主分区
不像fdisk上 w 才写入磁盘, parted 在 你回车时候就已经修改硬盘信息了

[root@server0 ~]# parted /dev/vdb
(parted) mktable gpt ###指定分区模式 ,每个分区只能执行一次
(parted) mkpart #交互式,不支持 中文特殊字符
分区名称? #中文特殊字符
文件系统类型? #xfs ...
起始点? 0 #默认设置
结束点? +2G
(parted) print  #显示分区信息

rm 删除分区####
rm 2 # 分区编号
#############
配置 ipv6
128二进制,冒号分割的十六进制,
eg: 配置 2003:ac18::308/64

nmcli connection show #查看网卡信息
v4 v6 都可以 使用这条命令
nmcli connection modify
   配置                                 #网卡名称 上面查看              #手动                                                    #开机自动链接
[root@server0 ~]# nmcli connection modify 'System eth0' ipv6.method  manual ipv6.addresses '2003:ac18::305/64' connection.autoconnect yes
  激活链接
[root@server0 ~]# nmcli connection up 'System eth0'
[root@server0 ~]# ifconfig |head -5
    eth0: flags=4163<UP,BROADCAST,RUNNING,MULTICAST>  mtu 1500
            inet 172.25.0.11  netmask 255.255.255.0  broadcast 172.25.0.255
            inet6 2003:ac18::305  prefixlen 64  scopeid 0x0<global>

ping6 2003:ac18::305  ###用ping 不识别
################################
链路聚合
team  聚合链路
 由多块网卡一起组建而成的虚拟网卡
 作用1 论询式(team-slave) 流量负载均衡
 作用2 热备份(activebackup) 链接冗余


怎么做:
1.创建虚拟网卡
team0
参考man teamd.conf
                                 配置文件名字     网卡名字                              这里的 '' "" 不能改变
nmcli connection add type team config-name team0 ifname team0 autoconnect yes config '{"runner" :{"name": "activebackup"}}'

由于这条命令不会覆盖错位的数据 所以 需要删除后 重新 输入
                                       虚拟网卡名字
[root@server0 ~]# nmcli connection delete team0

2.添加成员

[root@server0 ~]# nmcli connection add type team-slave con-name team-1 ifname eth1 master team0
[root@server0 ~]# nmcli connection add type team-slave con-name team-2 ifname eth2 master team0

配置文件
[root@server0 ~]# ls /etc/sysconfig/network-scripts/


3.配置 IP 并激活
###配置 ip
[root@server0 ~]# nmcli connection modify team0 ipv4.method manual ipv4.addresses 192.168.1.1/24 connection.autoconnect yes
[root@server0 ~]# nmcli connection up team0   #####激活
Connection successfully activated (D-Bus active path: /org/freedesktop/NetworkManager/ActiveConnection/7)

[root@server0 ~]# teamdctl team0 state  ##查看链路聚合信息






