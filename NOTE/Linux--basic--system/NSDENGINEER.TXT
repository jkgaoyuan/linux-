Skip to content
 
Search or jump to…

Pull requests
Issues
Marketplace
Explore
 
@jkgaoyuan 
 Watch 0
 Star 0  Fork 0 jkgaoyuan/linux-
 Code  Issues 0  Pull requests 0  Projects 0  Wiki  Insights  Settings
Branch: master 
linux-/NOTE/Linux--basic--system/NSDENGINEER.TXT
Find file Copy path
@jkgaoyuan jkgaoyuan Update NSDENGINEER.TXT
747b0b2 24 seconds from now
1 contributor
219 lines (198 sloc)  5.56 KB
RawBlameHistory
  
######################################################
SHELL SCRIPT  SHELL 脚本(目前不做要求,之后会专门讲)
脚本:一个可以执行的文件,运行可以实现某种功能(类似于某种程序)
[root@server0 ~]# vim /root/helooworld.sh  #创建脚本
[root@server0 ~]#chmod ugo+x /root/helooworld.sh  #赋予执行权限
[root@server0 ~]# /root/helooworld.sh  #绝对路径执行
	echo hello world !
	uname -r > /root/name.txt
	cat /etc/redhat-release >> /root/name.txt
	cat /root/name.txt

Shell脚本的组成 
练习题 请查看 ENGERINGER---01练习题
#! 环境声明  #! /bin/bash
# 注释文本
# 可执行代码
eg:
	#!/bin/bash
	uname -r
	hostname
	cat /etc/redhat-release
	ifconfig | head -2
	grep bin /etc/passwd | tail -2

变量
 以不变的名称存放变化的值
 如何创建变量
   变量名=存放值
   变量名要求:  = 两边不能有空格 (shell规定) 
		变量名只能由数字字母下划线组成,区分大小写且不能以数字开头(用户不可以 系统可以),
		不要使用关键词作为名字,
		若变量名已存在,则会对该变量重新赋值
 调用变量 
     $变量名 
     ${变量名}	 ########变量与常量结合
eg:
	[root@server0 ~]# a=10086
	[root@server0 ~]# echo $a
	10086
	[root@server0 ~]# a=redhat
	[root@server0 ~]# echo ${a}7  ########变量与常量结合
	redhat7
变量分类(运维角度)
环境变量 : 变量名大写,变量的值有系统定义完成(有系统完成,开机的过程中定义完成)
	PWD PAHT USER LOGNAE SHELL HOME
                  当前登录用户
位置变量 : 执行脚本时提供命令行参数 ,系统自动完成
	表示$n, n为序号
	在执行脚本时 后接的第一个参数 会传递给 $1
	[root@server0 ~]# vim /root/user.sh
	echo successfuly useradd $1      参数
	[root@server0 ~]# /root/user.sh nsd001
 	###########################################
	[root@server0 ~]# vim /etc/cat.sh
	#~/bim/bash
	cat -n $1 | head -$2   head / tail 默认显示前10行
	[root@server0 ~]# /etc/cat.sh /etc/passwd

shell 交互 信息
   read 
	1.直接产生交互
	2.记录用户在键盘上的输入
	3.讲用户在键盘的输入复制给一个变量储存
eg:设定用户名和密码创建用户
	[root@server0 ~]# vim /root/user.sh
	#!/bin/bash
	# echo 请输入USERNAME
	read -p ':请输入USERNAME' a
	read -p ':PASSWD' b

	#echo 请输入PASSWD
	#read b
	#read -p 请输入USERNAME
	#read -p 请输入PASSWD

	
预定义变量
	useradd $a &> /dev/null
	echo successfuly useradd $a
	echo $b | passwd --stdin $a &> /dev/null
	echo successfuly passwd $a
	        
	$# 统计用户的输入信息(if判断 常用)
	[root@server0 ~]# /root/1.txt 1 2 3 4 5 6 
	#!/bin/bash
	echo $1
	echo $2
	echo $#
	1
	2
	6
	$?程序退出后状态显示  (if 判断中 命令是否成功)
	0 正常 
	非0 不正常
自定义变量
   用户自己定义 



重定向输出
(补充追加重定向>>)
 > 只收集正确输出
 2> 只收集错误输入
 &> 收集所有输出
>&2  将正确输出转化为错误 输出
补充: 
  单引号 ''  屏蔽所有的特殊符号 原样输出
 
   反撇号`` 或者$() : 将命令的输出,直接参与下次运行
   	[root@server0 ~]# mkdir /$(hostname)
	[root@server0 ~]# ls /
	bin   dev  home  lib64  mnt  proc  run   server0.example.com  sys  usr
	boot  etc  lib   media  opt  root  sbin  srv                  tmp  var
eg: 创一个以当前日期为名的目录
	[root@server0 ~]# mkdir mydate-$(date +%F)  
#####date +%F 注意这里的+%F   
显示完整日期 [student@gao ME]$ date +%F  2019-04-11

	[root@server0 ~]# ls
	anaconda-ks.cfg  mkdir              Pictures
	Desktop          Music              Public
	Documents        mydate-2019-04-11  sysinfo.sh
	Download         Templates
	helooworld.sh    name.txt           Videos
##############################################################
黑洞设备 
/dev/null 
专门为写脚本产生的无用数据而生 
无限制 把无用的数据 定向到 黑洞即可
####################################################################
条件测试
 [ 测试表达式 ] 注意空格 
常用的测试选项
 -e 文档存在为真
 -d 文档存在,且必须为目录为真
 -f 文档存在,且必须文件为真
 eg: 
这是一个 文件测试的脚本 
#!/bin/bash
if [ -f $1  ];then
  echo file
elif [ -d $1 ];then
  echo  doctum
elif [ -e $1 ] ;then
echo EXIT 
else
    echo NULL
    exit 6
fi

比较整数大小(小数之后在学)
  -gt    -ge -eq  -ne  -lt   -le
   大于 大于等于 等于 不等  小于  小于等于
字符串的比较
  == :两个字符串一样为真
echo $?  0为真
 != 不等于为真
echo $?  0 为真 
################################
if 选择结构
双分支
	if[ 条件 ];then
 	   命令
	else
	   命令
	fi
###############################
if 多分支处理
	if [ 条件 ];than
	命令1
	elif [ 条件 ];than
	命名2
	  *
	  *
	  *
      elif [ 条件 ]
	命令n
	else
	命令
	fi
eg:检测用户是否存在 ,不存在则创建

[root@server0 ~]# vim /root/user.sh

#!/bin/bash
# echo 请输入USERNAME
       read -p '输入用户:' a
       id $a &> /dev/null
       if [ $? -eq 0 ];then
            echo 用户存在
            id $a
       else
            echo 用户不存在 
#       read -p '请输入USERNAME' a
            echo 正在创建用户$a
            read -p 'PASSWD' b
            useradd $a &> /dev/null
            echo successfuly useradd $a
            echo $b | passwd --stdin $a &> /dev/null
            echo successfuly passwd $a
        fi
~    
循环结构
	有限次循环
	for循环 结构 
	for 变量名 in 值列表 
	do 
	   命令
	done	
	   命令
值得列表可以不参与循环
数值范围
{起始..结束}
{1..100} = 1-100 连续的数字





© 2019 GitHub, Inc.
Terms
Privacy
Security
Status
Help
Contact GitHub
Pricing
API
Training
Blog
About

#####################################################
系统安全保护
SElinux 安全机制 
linux 内核 已经集成 (2.6以上)
SElinu 运行的三种模式
enforcing (默认)强制    permissive  宽松    disable  彻底禁用
任何模式变为disable(彻底禁用)模式,必须修改配置文件 重启
任何模式的转换都需要修改配置文件 ,重启后生效
 切换运行模式 (下次开机失效)
     (零时设置) 
     gentenforce ##########查看selinu 状态
        enforce  强制模式
     setenforce 0 ################修改当前selinux状态
	Permissive  (宽松模式)
       永久修改 (修改配置文件＃系统下次启动生效)
修改  vim /etc/selinux/config 
      SELINU=permissive  ##########宽松模式
vim 中命令模式下按 C 光标之后被删除
###############################
配置用户环境
 开启新终端后生效
  影响指定用户的bash 解释器
  ~ /.bashrc,每次开启bash 终端生效 ####注意这是一个隐藏文件 
  [root@server0 ~]# vim /root/.bashrc 修改root 用户的
  [student@gao ~]$ vim /home/student/.bashrc   $####修改用户studen 的bash .添加别名
	  alias gos='ssh -X root@172.25.0.11'
	#mount | grep qemu &> /dev/null
	alias god='ssh -X root@172.25.0.10'

  影响所有用户的 bash 解释器
  [root@server0 ~]# vim /etc/bashrc
###################################
防火墙策略的管理(基础阶段)
  在之后的服务学习中注意 selinux 状态 处于 permissive 或者 disable 
一 搭建基本的web服务 (不涉及优化) 
   web 服务 :提供页面内容服务
  1. yum 安装  httpd 
   2. 重启 httpd 服务
[root@server0 ~]# systemctl restart httpd 
   3. 本机测试 访问 182.25.0.11 
   filefox 访问 172.25.0.11
    在-X远程访问 Firefox 时保证 本机物理机 的Firefox没有开启 ,否则会出现错误
   4.在example.server中写一个网页
     网页默认存放路径: /var/www/html/ 当该路径下没有页面时会自定显示测试页面
     默认页面文件名称: index.html
二 构建FTP服务器
   ftp服务默认共享路径: /var/ftp
  1. 安装 vsftp
    yum -y install vsftpd
   2. 重启服务 
    systemctl restart vsftpd 
   3.验证 ftp 
    [root@server0 ~]# firefox ftp://172.25.0.11 
#############################
防火墙策略
   作用:隔离
            硬件防火墙 : huawei 思科 h3c 
            软件防火墙 : firewalld linux 默认安装启动
系统服务 :firewalld
     管理工具: firewall-cmd   firewall-cofig(图形)
     预设安全区域
	     首先判定请求 应该划分给某个区域
	     根据不同区域设置不同规则
　　　目前只讲四个区域	
-------public: 仅允许访问本机的sshd ping dhcpd 服务
-------trusted:允许任何访问
-------block: 阻塞任何来访请求 (有明确拒绝,客户端有接受回应)
-------drop:丢弃任何来访数据包 (直接丢弃,客户端没有回应,,,,节省资源)

配置规则位置
     --运行时(runtime)
     --永久(permanent)

 数据包:目标地址 源IP地址 数据
 防火墙判定规则;
	1.查看请求数据包中源IP 地址,然后查看防火墙所有区域,那个区域有源IP规则，则进入该区域


	2.进入默认区域ｐｕｂｌｉｃ（由ｒｏｏｔ指定）
防火墙的规则中不允许　同一个ｓｏｕｒｃｅ　ｉｐ添加到两个块中　不然会报错
################################################33
一　防火墙默认区域的修改
　　查看防火墙默认区域
　　firewall-cmd --get-default-zone 
    firewall-cmd--set-default-zone=block ###设定防火墙默认区域为ｂｌｏｃｋ
  在区域中添加允许访问的服务ＯＲ协议 (背下来)
	　九大协议
　　　　　ｈｔｔｐ：超文本传输协议　　           端口: 80
　　　　　ｈｔｔｐｓ：安全超文本传输协议              443
	　ＤＮＳ：　域名解析协议			 53                        
	　ＦＴＰ　：文件传输协议                       21
	　ＴＦＴＰ：简单文件传输协议                   69
	　ｔｅｌｎｅｔ：　远程管理协议                 23
　　　　　ｐｏｐ３：邮件协议　（收）                  110
	　ＳＭＴＰ：邮件协议　（发）                   25
　　　　　ＳＮＭＰ：　简单的网络管理协议　            161
ｅｇ：　给ｓｅｒｖｅｒ0　的ｆｉｒｅｗａｌｌ的ｐｕｂｌｉｃ添加　ｈｔｔｐ　和ｆｔｐ协议
查看ｆｉｒｅｗａｌｌ的ｐｕｂｌｉｃ域的规则
[root@server0 ~]# firewall-cmd --zone=public --list -all　＃＃＃查看区域规则
[root@server0 ~]# firewall-cmd --zone=public --add-service=http
[root@server0 ~]# firewall-cmd --zone=public --list-all 
[root@server0 ~]# firewall-cmd --zone=public --list-all 
public (default, active)
  interfaces: eth0
  sources: 
  services: dhcpv6-client http ssh
  ports: 
  masquerade: no
  forward-ports: 
  icmp-blocks: 
  rich rules: 
＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃
永久的防火墙规则
使用选项
　－－ｐｅｒｍａｎｅｎｔ　
注意设置玩永久防火墙后记得重新加载
ｅｇ：
[root@desktop0 ~]# firewall-cmd --permanent --zone=public --add-service=ftp ＃＃＃＃永久加载策略
　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　需要添加的服务名
[root@desktop0 ~]# firewall-cmd --reload 　＃＃＃＃＃重新加载防火墙策略

[root@desktop0 ~]# firewall-cmd --permanent --zone=public --remove-service=ftp #################删除规则（配置文件）　－－ｐｅｒｍａｎｅｎｔ　修改配置文件
[root@desktop0 ~]# firewall-cmd --reload ＃＃＃＃重新加载防火墙策略


＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃


使用防火墙实现端口转发（实现本机的端口映射）
端口：　标示　服务/协议/程序端口
　　　　可以使用ｒｏｏｔ　用户修改服务/协议/程序的
	端口标示程序（防火墙也就是通过端口来判断服务/程序）
一般来说　服务有着默认端口
　　　本地应用的端口重定向（端口１－－端口２）
　　　比如，访问一下两个地址可以看到相同的页面：
客户端访问：172.250.11：80　-------＞防火墙-----------＞172.25.0.11：8000


[root@server0 ~]# firewall-cmd --permanent --zone=public --add-forward-port=port=8000:proto=tcp:toport=80　＃＃＃＃＃＃＃＃＃＃设置端口转发　注意格式　
　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　这里第二个ｐｏｒｔ就无无法ｔａｂ了＃指定转发端口　指定传输协议　＃＃指定目标端口　　
[root@server0 ~]# firewall-cmd --reload 　　＃＃＃＃＃＃＃＃＃＃重新加载ｆｉｒｅｗａｌｌ
success
[root@server0 ~]# firewall-cmd --zone=public --list-all ＃＃＃注意lsit后面没有空格　
public (default, active)
  interfaces: eth0
  sources: 
  services: dhcpv6-client http ssh
  ports: 
  masquerade: no
  forward-ports: port=8000:proto=tcp:toport=80:toaddr=
  icmp-blocks: 
  rich rules:
＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃
触发挂载
　1.关闭ｓｅｒｖｅｒ，添加光驱
　2.安装软件包　实现挂载软件　ａｕｔｏｆｓ
[root@server0 ~]# yum -y install autofs

[root@server0 ~]# systemctl restart autofs
[root@server0 ~]# systemctl enable autofs　　＃＃＃设置开机自启
[root@server0 ~]# cd /misc/cd　　＃＃＃＃＃＃＃＃＃＃＃＃当用户进入／ｍｉｓｃ／ｃｄ　目录的时候（特定条件）　　ａｕｔｏｆｓ　自动创建挂载点且自动挂载，其他路径不可以，　一段时间后自动卸载，用的时候自动挂载
＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃
[root@server0 ~]# ls /etc/auto.master　　＃＃触发挂载主配置文件
/etc/auto.master
[root@server0 ~]# ls /etc/auto.misc 　　＃＃＃＃挂载配置文件
/etc/auto.misc
触发挂载必须为两层目录
　　　/nsd/　　第一层监控点，由auto.master 设定
	abc　　　
####################
[root@server0 ~]# vim /etc/auto.master　　＃＃＃当我们需要修改　监控点的时候添加（注意不要删除　原本的　写上自己的　规则就好）　/nsd    /etc/test.misc
　　
 监控点　　指定挂载在配置文件的路径
/misc   /etc/auto.misc
翻译：设置挂载点为　/misc ，想要知道挂载什么设备．请看/etc/auto.misc

[root@server0 cd]# vim /etc/test.misc

abc    -fstype=xfs,rw :/dev/vdb1　　＃＃＃＃＃＃＃＃＃＃＃＃＃格式

root@server0 cd]# cd /nsd/abc ####使用

＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃
添加一个ｓｗａｐ分区（交换分区）
　　　作用：在一定程度上缓解内存需求，当物理机器内存不足时讲一部分数据放到ｓｗａｐ中，其他平台叫做　虚拟内存
　Ｌｉｎｕｘ　一般也是使用分区空间来充当交换空间
　可以由多个分区来组成．

怎么设置

[root@desktop0 ~]# fdisk /dev/vdb　＃　创建一个分区
[root@desktop0 ~]# mkswap /dev/vdb1　　＃格式化　为ｓｗａｐ
正在设置交换空间版本 1，大小 = 524284 KiB
无标签，UUID=b9ae5113-aea8-4e4d-8b05-81974f61d1be
[root@desktop0 ~]# blkid /dev/vdb1　　＃查看文件系统类型　　　＃＃＃＃　df -h 相当于　打开我的电脑后看到的　磁盘信息　,lsblk 相当与　磁盘管理后看到的
/dev/vdb1: UUID="b9ae5113-aea8-4e4d-8b05-81974f61d1be" TYPE="swap"
[root@desktop0 ~]# swapon /dev/vdb1 　　＃＃＃＃＃＃＃＃＃＃打开ｓｗａｐ分区
[root@desktop0 ~]# swapon -s　　　　　　　＃＃＃＃＃＃＃＃＃＃查看ｓｗａｐ分区信息
文件名				类型		大小	已用	权限
/dev/vdb1                              	partition	524284	0	-1
[root@desktop0 ~]# swapoff /dev/vdb1 ＃＃＃＃＃＃＃关闭　swap 分区


[root@desktop0 ~]# vim /etc/fstab 　＃＃＃设置ｓｗａｐ分区开机自动挂载

[root@desktop0 ~]# swapon -a 　＃＃＃自动挂载ｓｗａｐ分区
[root@desktop0 ~]# swapon -s　＃＃＃３显示　ｓｗａｐ分区信息
文件名				类型		大小	已用	权限
/dev/vdb1   



＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃３３
ｉｓｃｓｉ　网络磁盘服务  类似于　ｓｈｅｌｌ　脚本的地位　也就是说必须学好
　　作用：主要用在集群中　高可用　
　　工作模式：　基于　ｃ/ｓ架构的虚拟磁盘技术
　　　　　　　　服务器提供磁盘空间，客户机链接并且当成本地磁盘使用
服务端：虚拟机　ｓｅｒｖｅｒ提供磁盘空间　　　
		＃＃＃＃＃装包　配置　启动服务
环境准备　
　1.　ｆｉｒｅｗａｌｌ　设置
	[root@server0 ~]# firewall-cmd --set-default-zone=trusted 
	success
	＃＃＃＃ｄｅｓｋｔｏｐ也要将防火墙　设置为　允许所有
	＃＃安装软件包
	[root@server0 ~]# yum -y install targetcli 
	＃＃配置　可以支持全程ｔａｂ
	＃使用ｆｄｉｓｋ　分一个空闲分区　不用格式化(没有文件系统)
	[root@server0 ~]# fdisk /dev/vdb
	
　2.运行targetcli 进行设置	
	将使用targetcli 比喻成　快递运输　主机　他会要求原包装（backstore）　且木箱子(target)   将原包装装进木箱子，　关联起来（lun）　，指定定收件人　（acl 访问控制）
	target，磁盘组
　　		是客户端的访问目标，作为一个框架，由多个lun 组成
	lun，逻辑单元(将后端存储放入磁盘组)
 　　		每一个lun 需要关联到某一个后端设备存储中，在客户端会视为一块虚拟磁盘





	进入targetcli　　＃＃＃＃默认exit退出命令　保存配置文件＃＃　ｃｔｒｌ　＋　Ｃ　是不会保存配置文件的
	[root@server0 ~]# targetcli 
		/> ls　＃查看需要配置的文件
	o- / ..................................................................... [...]
	　／ｄｅｖ／ｖｄｄ１　后端存储
	  o- backstores .......................................................... [...]
	　
	  | o- block .............................................. [Storage Objects: 0]
	  | o- fileio ............................................. [Storage Objects: 0]
	  | o- pscsi .............................................. [Storage Objects: 0]
	  | o- ramdisk ............................................ [Storage Objects: 0]
	  o- iscsi ........................................................ [Targets: 0]
	  o- loopback ..................................................... [Targets: 0]
	1）＃创建后端储存（backstore，后端存储）	
	/> backstores/block create name=iscsi_store dev=/dev/vdb1
	创建成功
	Created block storage object iscsi_store using /dev/vdb1.
	/> 
	2）＃创建　target，磁盘组（木质箱子）
		ISCSI Quanlified Name (iqn)命名规范（不符合创建时不通过）
		iqn.yyy-mm.倒叙域名：自定义标示
		用来识别target 磁盘组，也用来识别客户机身份
		名称例子：
		iqn.2016-02.com.example:server0
	iqn.2016-02.com.example:desktop0
	/> iscsi/ create iqn.2019-04.com.example:server0
	Created target iqn.2019-04.com.example:server0.
	Created TPG 1.＃创建成功
	3）配置　lun ，　关联（木箱子）
	/> iscsi/iqn.2019-04.com.example:server0/tpg1/luns create /backstores/block/iscsi_store 
	Created LUN 0.＃成功
	4）配置acl 访问控制设置客户端声称的名字，（需要手写）名字需要符合iqn 命名规范，设置的名字需要在客户端在写一遍
	/> iscsi/iqn.2019-04.com.example:server0/tpg1/acls create iqn.2019-04.com.example:desktop0
	Created Node ACL for iqn.2019-04.com.example:desktop0　
	Created mapped LUN 0.＃　成功
　　　　5）指定端口，网卡（服务器肯定不止一个网卡）　　　　　　　　　　　＃指定ｉｐ，若不愿指定　可以写成　0.0.0.0，写四0，意味这访问我的任何ＩＰ就好，只要你能ｐｉｎｇ通
	/> iscsi/iqn.2019-04.com.example:server0/tpg1/portals create 172.25.0.11
	Using default IP port 3260　＃默认
	Created network portal 172.25.0.11:3260.＃创建成功
	查看　
	/> ls 
	o- / ........................................... [...]
	  o- backstores ................................ [...]
	  | o- block .................... [Storage Objects: 1]
	  | | o- iscsi_store  [/dev/vdb1 (3.0GiB) write-thru activated]
	  | o- fileio ................... [Storage Objects: 0]
	  | o- pscsi .................... [Storage Objects: 0]
	  | o- ramdisk .................. [Storage Objects: 0]
	  o- iscsi .............................. [Targets: 1]
	  | o- iqn.2019-04.com.example:server0 ..... [TPGs: 1]
	  |   o- tpg1 ................. [no-gen-acls, no-auth]
	  |     o- acls ............................ [ACLs: 1]
	  |     | o- iqn.2019-04.com.example:desktop0  [Mapped LUNs: 1]
	  |     |   o- mapped_lun0  [lun0 block/iscsi_store (rw)]
	  |     o- luns ............................ [LUNs: 1]
	  |     | o- lun0 .... [block/iscsi_store (/dev/vdb1)]
	  |     o- portals ...................... [Portals: 1]
	  |       o- 172.25.0.11:3260 ................... [OK]
	  o- loopback ........................... [Targets: 0]
	/> exit 保存（不要用ｃｔｒｌ　＋　Ｃ）
	/> exit
	Global pref auto_save_on_exit=true
	Last 10 configs saved in /etc/target/backup.
	Configuration saved to /etc/target/saveconfig.json
　　　3.重启服务
	[root@server0 ~]# systemctl restart target　＃重启服务
	[root@server0 ~]# systemctl enable target　　＃开机自启
	ln -s '/usr/lib/systemd/system/target.service' '/etc/systemd/system/multi-user.target.wants/target.service'　
	＃制作快捷方式，不是报错
	[root@server0 ~]# 

客户端：
1.安装软件包　iscsi-initiator-utils
	[root@desktop0 ~]# yum -y install iscsi-initiator-utils
2.修改配置文件，指定客户端生的命令
	[root@desktop0 ~]# vim /etc/iscsi/initiatorname.iscsi 
	InitiatorName=iqn.2019-04.com.example:desktop0
3.重启服务　iscsid 服务，用于识别客户端声称名字＃修改完　配置文件后需要重启服务
	[root@desktop0 ~]# systemctl restart iscsid
	有时会出现　需要使用　systemctl daemon-reload 　刷新命令
4.发现，链接　iscsi 磁盘 ###告诉快递的位置
	iscsiadm 
	由于命令太长　使用mna iscsiadm 　／example  在查找例子 　ＥＸＡＭＬＰＥＳ中的　将第一个例子复制出来
	[root@desktop0 ~]# man iscsiadm
	[root@desktop0 ~]# iscsiadm --mode discoverydb --type sendtargets --portal 172.25.0.11 --discover
	172.25.0.11:3260,1 iqn.2019-04.com.example:server0
5.重启　iscsi 服务（客户端）
	[root@desktop0 ~]# systemctl restart iscsi　　＃＃＃＃＃重启服务　＃＃这个　服务名字ｉｓｃｓｉ　　没有　ｄ
	[root@desktop0 ~]# systemctl enable iscsi　　＃＃＃＃＃＃＃开机自启
	[root@desktop0 ~]# lsblk 
	NAME   MAJ:MIN RM SIZE RO TYPE MOUNTPOINT　　＃查看磁盘
	sda      8:0    0   3G  0 disk 　　＃＃＃ｉｓｃｓｉ　磁盘　　　　　　　
	vda    253:0    0  10G  0 disk 
	└─vda1 253:1    0  10G  0 part /
	vdb    253:16   0  10G  0 disk 
	[root@desktop0 ~]# 
systemctl students
＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃
提问ＩＱＮ的两个作用：　1.用来识别target 磁盘组，2.也用来识别客户机身份

＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃

数据库的基本管理　　
什么是数据库：	
	存放数据的仓库
数据库结构:
在数据库中，有许多的库，每个库中存在表格
分类：　
ＭＩＣＳＲＯＦＴ　－－－　ＳＱＬ　ＳＥＲＶＥＲ　
ＩＢＭ　　　　　　－－－　ＤＢ２
甲骨文　　　　　　－－－　Orcale  MySQL 
社区开源　　　　　－－－　Maira DB　和　MySQL 的作者是一个人
（软件）Maria DB
一.环境准备＆重启服务
安装　　
	[root@server0 ~]# yum -y install mariadb-server
重启服务
	[root@server0 ~]# systemctl restart mariadb
卸载　 ####这个是和删根一样的操作，别用
	[root@server0 ~]# yum remove mariadb-server　
二.数据库基本操作
＃＃＃＃＃＃＃＃＃＃＃＃＃所有命名都已　；　结尾　，不然报错
增删改查
[root@server0 ~]# mysql　　＃＃＃进入数据库
	Welcome to the MariaDB monitor.  Commands end with ; or \g.
	Your MariaDB connection id is 2
	Server version: 5.5.35-MariaDB MariaDB Server

	Copyright (c) 2000, 2013, Oracle, Monty Program Ab and others.

	Type 'help;' or '\h' for help. Type '\c' to clear the current input statement.

MariaDB [(none)]> 
MariaDB [(none)]> show databases;＃＃＃＃查看数据库　，注意这里的ｄａｔａｂａｓｅｓ　有ｓ　
MariaDB [(none)]> show databases;
+--------------------+
| Database           |
+--------------------+
| information_schema |
| gaoyaun            |
| mysql              |
| nsd1903            |
| performance_schema |
| test               |
+--------------------+
6 rows in set (0.00 sec)



MariaDB [(none)]> create database gaoyaun;＃＃＃＃＃＃创建库　　ｄａｔａｂａｓｅ　　没有ｓ
Query OK, 1 row affected (0.00 sec)


MariaDB [(none)]> drop database nsd1903;　＃＃＃＃删除库
Query OK, 0 rows affected (0.00 sec)



三.为数据库管理员设置密码
　　数据库管理员：　ｒｏｏｔ　，数据库所有用户信息由数据库中的ＭＹＳＱＬ管理
　　系统管理员：　　ｒｏｏｔ　，系统所有的用户信息，由　／ｅｔｃ／ｐａｓｓｗｄ管理
设置数据库管理员密码
[root@server0 ~]# mysqladmin -u root password '123'###注意格式　
登录
[root@server0 ~]# mysql -u root -p 　＃交互式
Enter password: 
MariaDB [(none)]> 

[root@server0 ~]#　mysql -u root -p123 ## 非交互　
MariaDB [(none)]> 

四.表格操作;表记录，表字段
　　　　　　　行　　　列
	　　　３表记录　　５表字段
	编号　姓名　性别　联系方式　　　地址　
	　1　　ａ　　ｗ　　　ａａａ　　　ｎ　
　　　　　2　　ｂ　　ｍ　　　ｂｂｂ　　　ｗ
　　　　　3　　ｃ　　ｗ	ｃｃｃ　　　ｅ

增删改查　: instal delea update  select
　　　＃＃＃＃进入　mysql 库
	MariaDB [(none)]> use mysql;
	###进入其他库　
	show tables;
	####查看表结构
      desc user;

数据库的导入／恢复　
　　　
[root@server0 ~]# mysql -u root -p123 nsd1903 < /root/users.sql 

表格查询：　
select　　表字段　from 表名

MariaDB [nsd1903]> select * from base  ####相对路径路径　
MariaDB [mysql]> select * from nsd1903.base;　＃＃＃＃＃绝对路径
+------+---------+------------+
| id   | name    | password   |
+------+---------+------------+
|    1 | Tom     | 123        |
|    2 | Barbara | 456        |
|    3 | James   | solicitous |
|    4 | Smith   | tarena     |
|    5 | Barbara | pwd123     |
+------+---------+------------+

MariaDB [nsd1903]> select id,name from base;
+------+---------+
| id   | name    |
+------+---------+
|    1 | Tom     |
|    2 | Barbara |
|    3 | James   |
|    4 | Smith   |
|    5 | Barbara |
+------+---------+

有条件查询：
　查找指定条件的
	  			字段		            字段
MariaDB [nsd1903]> select * from base where password='123';
+------+------+----------+
| id   | name | password |
+------+------+----------+
|    1 | Tom  | 123      |
+------+------+----------+


MariaDB [nsd1903]> select name,password from base where name='tom';
+------+----------+
| name | password |
+------+----------+
| Tom  | 123      |
+------+----------+


MariaDB [nsd1903]> select id,name from base where name='tom';
+------+------+
| id   | name |
+------+------+
|    1 | Tom  |
+------+------+

禁止网络进行链接，只服务与本机
[root@server0 ~]# vim /etc/my.cnf　　＃主配置文件
skip-networking //手写
systemctl restart mariadb  //重启服务
＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃
数据库授权　
　－除了　root 用户，此nsd1903数据库只能被　lisi 查询，密码123　＃＃不需要创建系统用户
　	
	GRANT 权限列表　ON 数据库名 TO　用户名@客户地址 IDENTIFIED BY '密码'; 
	grant select on nsd1903.* to lisi@localhost identified by '123'; 
	当用户ｌｉｓｉ在本地使用　123　登录

联合多表查询
        查询　有多少人姓名　Ｂarbara　同时住在　ＳＵＮＮＹＶＡＬＥ
MariaDB [nsd1903]> select count(*) from base,location where base.name='Barbara' and location.city='Sunnyvale' and base.id=location.id; 



禁止空密码root 用户访问 mariadb 数据库 
MariaDB [nsd1903]> use mysql  # 进入mysql                    表            表字段
MariaDB [mysql]> select user,host,password from user; ##查看user中的 user,host,password
+------+---------------------+-------------------------------------------+
| user | host                | password                                  |
+------+---------------------+-------------------------------------------+
| root | localhost           | *23AE809DDACAF96AF0FD78ED04B6A265E05AA257 |
| root | server0.example.com |                                           |
| root | 127.0.0.1           |                                           |
| root | ::1                 |                                           |
|      | localhost           |                                           |
|      | server0.example.com |                                           |
| lisi | localhost           | *23AE809DDACAF96AF0FD78ED04B6A265E05AA257 |
+------+---------------------+-------------------------------------------+
7 rows in set (0.00 sec)

MariaDB [mysql]> delete from user where password='';      # 删除表中密码为空的
Query OK, 5 rows affected (0.00 sec)

MariaDB [mysql]> select user,host,password from user;    ##查看user表中 表字段
+------+-----------+-------------------------------------------+
| user | host      | password                                  |
+------+-----------+-------------------------------------------+
| root | localhost | *23AE809DDACAF96AF0FD78ED04B6A265E05AA257 |
| lisi | localhost | *23AE809DDACAF96AF0FD78ED04B6A265E05AA257 |
+------+-----------+-------------------------------------------+
2 rows in set (0.00 sec)


MariaDB [mysql]> flush privileges;####刷新user所有记录 

























