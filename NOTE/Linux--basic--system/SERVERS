新教学环境的搭建
clone- vm7
调用 脚本进行虚拟机的创建
ROOT
password 123456
真机管理虚拟机
1.直接管理 无需ip 显示开机过程
             虚拟机的名字
virsh console  A


作用:只用来配置IP

退出 : ctrl + ]
2.配置 ip
虚拟机 A
 192.168.4.7/24
 主机名 svr7.tedu.cn

虚拟机 B
 192.168.4.207/24
 主机名 pc207.tedu.cn

添加别名只对 student 生效
[student@student ~]$ vim /home/student/.bashrc
    alias goa='ssh -X root@192.168.4.7'

    alias gob='ssh -X root@192.168.4.207'

查看虚拟机文件内容
[root@pc207 ~]# cat /etc/motd
为虚拟机搭建yum
服务端 :构建 web / ftp服务 共享仓库内容
在真机上安装 vsftpd
    [student@room9pc01 ~]$ rpm -q vsftpd
    vsftpd-3.0.2-22.el7.x86_64
    1. 查看服务状态
        [student@room9pc01 ~]$ systemctl status vsftpd
        ● vsftpd.service - Vsftpd ftp daemon
    2.  创建 /var/ftp/centos-1804
        /var/ftp/ 默认共享位置
        开机自动挂载
        mount -a 检测
        vim /etc/fstab
                                                                          光盘文件系统
        /var/lib/libvirt/images/iso /CentOS7-1804.iso  /var/ftp/centos-1804 iso9660 defaults 0 0

        检测
        [student@room9pc01 ~]$ firefox ftp://192.168.4.254
        A B 都要执行上面操作
常见的一级目录以及用法
        /boot  系统引导必须项目
        /bin /sbin  命令程序文件
        /etc   系统配置文件
        /dev  物理设备
        /root  /home
        /var  经常变化文件  日志文件
        /proc 存放内存中的映射数据,不占用磁盘空间
        /tmp  零时文件   ~]$ ls -ld /tmp/
                            drwxrwxrwt. 29 root root 4096 4月  19 11:32 /tmp/
权限数值的表示
        r = 4
        w = 2
        x = 1
        SUID = 4           S`出现在 x 位置 `
        SGID = 2           S`出现在 x 位置 `
        Sticky Bite = 1    t`出现在 x 位置 `
        注意这里数字 是数字 不能和 字母连用 是能数字与数字 字母与字母

        [student@room9pc01 ~]$ chmod o+7 /etc/
        chmod: 无效模式："o+7"
        设置特殊权限
        第一个数字是附加权限的求和
        [root@svr7 ~]# chmod 7751 /public/ (大规模修改用,精确修改还的用字母)
        [root@svr7 ~]# ls -ld /public/
        drwsr-s--t 2 root root 6 4月  19 11:40 /public/
        [root@svr7 ~]#
        history -c 清空历史命令
        vim /etc/profile
        默认1k行
        !str  (常用)
        !xxx
        执行历史命令中最近以str开头的命令
          vim /etc/profile
          [root@svr7 ~]# systemctl restart httpd
          [root@svr7 ~]# !sys
          systemctl restart httpd
统计文件或者目录信息
         du

        [root@svr7 ~]# du -sh /root/
        13M	/root/
date查看/调整系统 时间  #####常常充当变量用
        date %F  显示Y- M -D
        date +%Y  只显示年
        date +%m 只显示月
        date +%d  只显示日
        date +%H  只显示小时
        date +%M  只显示分钟
        date +%S  只显示秒
软硬链接  ------制作快捷方式
    1.软连接(最多)
        ln -s /路径/软文件  /路径/快捷方式 (青色)
                  当你不起名字时候默认和源文件名相同
                  原始文件被干掉后软链接不可用
                  可以夸分区
        [root@svr7 ~]# mkdir /public/
        [root@svr7 ~]# ln -s /public/ /root/zz
        [root@svr7 ~]# ls
        Desktop  zz

    2.硬连接  (限制比较大)

        ln  /路径/软文件  /路径/快捷方式 (原始文件被干掉后硬链接依然可用)
        并且不可已跨分区使用,不能用在目录上
获取帮助
    1.利用help
        xxx --help
    2.权威帮助信息
        man  xxx
        mna 5 passwd ###5 表示文字帮助信息
        man 默认查看命令帮助信息
ZIP 归档工具,具有夸平台压缩归档格式
        zip [-r] 备份文件.zip  被归档文件    -r 递归  目录必须加

   释放zip
        unzip 备份文件.zip [-d] 目标文件夹   -d 指定目录,目录不从在会自动创建
        检测ce
将 ftp 上rhce测试脚本
        desktop0.sh  rht-labcheck  server0.sh
下载到/home/student/bin
        运行 rht-labcheck 进行检查

自定义yum 仓库(客户端)
      1.将ftp中 tools.tar.gz下载到真机桌面
      2.将真机的tools.tar.gz上传到虚拟机A的root下
         scp依赖于ssh
         scp /本地路经/源文件  root@对方ip:/对方路径
      3.生产仓库数据文件
         yum -y install createrepo
         createrepo /tools/other/
      4.修改yum配置文件
         vim /etc/yum.repos.d/local.repo
         [A-repo]
         name=other
         baseurl=file:///tools/other
         enabled=1
         gpgcheck=0
      5. 显示安装路径
         rpm -ql XXX
         rpm -ql cmatrix


      在命令后面加上 & 将 程序放入后台

vim 编辑技巧
    vi :linux基本的文本编辑器
    依然和vim一样有三个模式
    命令模式
    12G 跳转到第12行
    GG 末尾
    gg开头
    yy复制
    p黏贴
    dd删除当前行
    d$ 或者 D 从光标处删除到行尾
    C 从光标处删除到行尾,进入插入模式
    d^ 从光标处删除到行首
    u 撤销
    U 撤销当前行所有操作
    ctrl + r 取消前一次撤销操作 (反撤销)
    shift + ZZ   保存且退出(命令模式)

    / 查询
   末行 模式
   :w  保存
   :q! 强制退出
   :W /root/newfile
   :set nu 显示行号
   :r /xxx/xxx  在当前行插入文件 ###常用
   字符串的替换
   :%s /old/new/g  替换文件所有的 old
   :s /old/new/g  替换光标当前行所有old
   :s /old/new/   替换光标所在行的第一个 old
   :1,10 s/old/new/g   替换第1-10行所在行所有old
   开关参数的控制
   :set nu或nonu
   :set ai或noai 自动缩进
   将文件直接导入本文件
   :r  文件路径   #############注意光标的位置,会直接将文件放在光标之后
###################################################


Linux 安装  nfs-3g

mount.nfs-3g  /dev/xxxx  /挂载点/
##################################

kvm 虚拟化

概述 :
virtualization 资源管理

kvm构建以及管理

虚拟化软件
vmware
virtualpc Hyper-v(MICROSOFT)
KVM RHEV (REDHAT)
XEN  (CITRIX)
ORACLe VM VIRTUAALBOX (ORACLE)

安装 kvm 所需要的软件包

– qemu-kvm	:为 kvm 提供底层仿真支持
– libvirt-daemon	:libvirtd 守护进程,管理虚拟机
– libvirt-client	:用户端软件,提供客户端管理命令
– libvirt-daemon-driver-qemu	:libvirtd 连接 qemu 的驱动
– virt-manager	:图形管理工具

 systemctl restart libvirted
 systemctl enable libvirtd

 LANG=en virt-manager  ##启动服务

需要cpu支出虚拟化功能
在bios中开启 虚拟化功能

如何管理kvm

virt-manager

virsh 控制工具
  virsh console  虚拟机名字 ###真机直接管理虚拟机 不需要IP
  virsh nodeinfo          ####查看kvm节点信息
  virsh list(--all)              ####列出虚拟机
  virsh net-list(--all)   ##列出虚拟网络
  virsh dominfo   虚拟机名字        ###查看指定虚拟机的信息
  virsh autostart  虚拟机名字  ###将虚拟机设置为开机自启
  virsh autostart --disable  虚拟机名字 ###将虚拟机开机自启取消
  virsh start|reboot|shutdown  虚拟机名字 ###
  virsh destroy   虚拟机名字 ###强制关闭
一台虚拟机的构成
    xml 配置文件 (虚拟机配置文件) :定义虚拟机的名称 UUID CPU 内存
 磁盘 网卡 等 参数信息
    磁盘镜像文件 :保存 虚拟机的操作系统以及文档信息   路径取决于 xml文件定义
    存放 xml文件  /etc/libvirt/qemu
    在本机中 文件默认存放于 /var/lib/libvirt/images/
    导出xml配置文件
       查看 vrish dumpxml  虚拟机名称
       备份 virsh dumpxml  虚拟机名 > 虚拟机名.xml
       虚拟机名称 ,UUID  虚拟机磁盘文件路径 网卡MAC 地址
 ###########################################
  新建一个虚拟机
  nsd01 2g 内存 网络 private 1  9g disk  网络类型 private 1  最小化安装 自动分区 root 密码 1
 #############################################
  利用虚拟机nsd01作为模板,复制一份手动生产全新虚拟机 nsd2
  1.将虚拟机磁盘文件复制一份修改磁盘文件名称
  /var/lib/libvirt/images/
  [root@room9pc01 images]# cp nsd01.qcow2 nsd02.qcow2
   df -h 查看文件大小 /xmlq
  2.将nsd01的xml文件复制,修改 磁盘文件的位置
    [root@room9pc01 qemu]# virsh dumpxml nsd01  > /xmlfire/nsd02.xml
    [root@room9pc01 qemu]# vim /xmlfire/nsd02.xml
    生成uuid ,将原本的UUID替换
    uuidgen
    修改磁盘文件 位置
    <source file='/var/lib/libvirt/images/nsd02.qcow2'/>
    修改mac地址 ,删除 ,删除后\kvm会自己生成
    <mac address='56:54:00:98:05:e6'/>
  3.导入虚拟机信息
    [root@room9pc01 qemu]# virsh define /xmlfire/nsd02.xml
    定义域 nsd02（从 /xmlfire/nsd02
    启动管理软件
    [root@room9pc01 qemu]# virt-manager
  4.删除命令
    vrish undefine nsd02  ###只是删除 /etc/libvirt/qemu 下的 xml删除了 ,
    [root@room9pc01 qemu]# ls /etc/libvirt/qemu
    1.txt      B.xml          desktop.xml  nsd01.xml
    autostart  classroom.xml  D.xml        server.xml
    A.xml      C.xml          networks     win2008.xml

  使用 virsh edit xxx  可以达到  修改 复制xml 导入 这三条命令  除了复制磁盘文件 (命令行常用,但是脚本中用不到)

cow(写时复制)技术(快速克隆虚拟机关键技术) (也是docker技术的关键)
 copy on write
 特点:
     直接映射原始盘的数据内容
     当原始盘的旧数据有修改时,在修改之前自动将旧数据存入前端盘
     对前端盘的修改写不到原始盘
     前端盘在生成的时候 其实是一对快捷方式 (可能是软连接 ?)
快速创建qcow文件
     qemu-img 通过 -b 选项复用指定原始盘  -f 指定文件类型(qcow2 / rar )
     qemu-img create 磁盘文件 #快速产生一个任意大小的磁盘文件,内容为空
     qemu-img info 磁盘文件  ##查看磁盘文件信息
     qemu-img  create -f qcow2 -d /var/lib/libvirt/images/nsd01.qcow2 /var/lib/libvirt/images/nsd06.qcow2  10G
     qemu-img create  -f  文件类型 -d 原始盘 前端盘 前端盘大小
###############################
    1.以nsd01通过写实复制技术产生虚拟机前端盘
      images]# qemu-img create -f qcow2 -b /var/lib/libvirt/images/nsd01.qcow2 /var/lib/libvirt/images/nsd06.qcow2 10G
    2.产生并修改xml文件
     virsh edit xxx.xml
    3.开机
     virsh start xxx
配置虚拟机系统
    离线访问虚拟机磁盘文件内容
    guestmount -a 虚拟机磁盘路径 -i /挂载节点

########################## 扩展虚拟机磁盘
教学环境(在虚拟机上用 )  扩展磁盘空间当虚拟机磁盘不够用时
LANG=en growpart /dev/vda 1  ##扩展/dev/vda 的第一个分区空间
lsblk
blkid /dev/vda1
xfs_growfs /dev/vda1###扩展/dev/vda1 文件系统
df -h


##########################
DNS 解析的作用  端口 53
  域名解析服务
    两个功能
    正向解析 : 根据注册的域名查看对应的ip (最常用的)(web服务:域名到 ip)
    反向解析 : 根据ip查找域名  (邮件服务 ip到 域名)

    虽然 你在浏览器中输入的域名 但其实 实际起作用的还是ip地址
    DNS分为三类 :一级 DNS二级DNS  三级DNS
    通常由服务器用来解析那一类地址(一类地址,二类地址,三类地址) 用来区分 哪一级DNS
    所有的域名都要以 . 结尾 规定 ;  . 称为根域   专门维护 . 的服务器称为根域名服务器
##########################################
        根域:
        一级域名: cn        hk  kr  jp  tw  us
        二级域名  .com.cn   .net.cn   org.cn
        三级域名  xxx.com.cn         nb.com.cn
        Full Qualified Domain Name  (FQDN) 完全合格主机

        主机头部,正确申请的域名结尾
        CNNIC--中国互联网信息中心  墙 ?
#######################################
    虚拟机A构建基本DNS服务
        1.安装 bind  bind-chroot
            伯克利发明
            bind.x86_64 32:9.9.4-61.el7 // 域名服务包
            服务: named
            端口: 53
            主配置文件: /etc/named.conf  // S设置本机复制解析的域名
            地址库文件: /var/named/      //FQDN 与 ip地址额关系
            SVR7
               vim /var/named.conf
               options {
                    listen-on port 53 { any; }; 或者删除这一行就意味着 为任何人服务
                  directory       "/var/named";
                       };
               zone "tedu.cn" IN {
                                    type hint;
                                    file "tedu.cn.zone";
                                   };

            [root@svr7 named]# cp -p named.localhost  tedu.cn.zone
            [root@svr7 named]# pwd
            /var/named
            [root@svr7 var]# vim /var/named/tedu.cn.zone


                    tedu.cn. NS     svr7               ##申明负责解析tedu.cn域名为svr7 主机
                    svr7     A      192.168.4.7        ###申明svr7 主机的ip地址为  192.168.4.7
                    www      A      192.168.4.2        ###正常解析纪录
                    ftp      A      192.168.4.250      ###正常解析纪录
                    AAAA 是ipv6 用的
            [root@svr7 named]# systemctl restart named
            bind-chroot.x86_64 32:9.9.4-61.el7   // 提供 虚拟根支持(牢笼政策)

            发现 bind 中病毒 将bind 放在 /var/named/chroot

        虚拟机B PC7
            1.指定dns服务器地址(客户机)  nmtui也可以
                [root@pc207 ~]# vim  /etc/resolve.conf
                search tedu.cn
                nameserver 192.168.4.7
            2.测试dns 服务
                [root@pc207 ~]# nslookup svr7
                Server:		192.168.4.7
                Address:	192.168.4.7#53

                Name:	svr7.tedu.cn
                Address: 192.168.4.7

###################################################
虚拟机负责qq.com的解析
        1.修改主配置文件
            [root@svr7 named]# vim /etc/named.conf

            zone "qq.com" IN {
                type hint;
                file "qq.com.zone";
                            };
        2.修改地址库文件
            [root@svr7 named]# vim /var/named/qq.com.zone
            qq.com  NS  svr7
            svr7    A   192.168.4.7
            www     A    1.1.1.1
            ftp     A    2.2.2.2
        3.测试访问

            [root@pc207 ~]# nslookup www.qq.com
            Server:		192.168.4.7
            Address:	192.168.4.7#53

            Name:	www.qq.com
            Address: 1.1.1.1

#####################################
 特殊的解析纪录
        1.基于域名的负载均衡(但是现在不用了)

            在地址库文件中,对于一个地址添加多个,A纪录 ,客户端访问的请求会随机分配到 其中的任意一个
            [root@svr7 named]# vim /var/named/qq.com.zone
                qq.com.  NS  svr7  ########NS 前面的域名需要 添加  " . "
                svr7    A   192.168.4.7
                www     A    1.1.1.1
                www     A    1.1.1.3
                www     A    1.1.1.6
                ftp     A    2.2.2.2
                *       A      1.2.3.4  ###不管前面写啥 只要域名正确就解析到这和地址


        2.有规律的泛域名解析
            内置函数:$GENERATE 制造连续范围的数字
            $GENERATE  起始-结束
            eg:
            server
            vim /var/named/qq.com.zone
            $GENERATE 1-50  PC$  A  192.168.10.$
            desktop
            nslookup PC1.qq.com
            Server:		192.168.4.7
            Address:	192.168.4.7#53

            Name:	PC1.qq.com
            Address: 192.168.10.1

            tts     CNAME   ftp  ######tts的解析地址和ftp解析地址相同

            eg:
                [root@pc207 ~]# nslookup tts.qq.com
                Server:		192.168.4.7
                Address:	192.168.4.7#53

                tts.qq.com	canonical name = ftp.qq.com.  ####注意这句话
                Name:	ftp.qq.com
                Address: 6.6.6.6

        面试提问: DNS服务器资源解析纪录类型 ? ##目前基础阶段
                A      地址解析记录
                CNAME  声明DNS 服务器记录
                NS   解析记录别名
        客户端解析域名优先级
        1./etc/hosts         ## 直接提供解析结果 ,若这个文件解析不了才会找dns 解析,且只能在本机有效
        2./etc/resolv.conf   ##DNS 服务器地址
################################################################
        子域授权
        虚拟机A 负责 qq.com
        虚拟机B 负责 bj.qq.com
 ###################################################

         DNS子域授权

             父域:www.qq.com
             子域:www.bj.qq.com

          虚拟机A负责解析qq.com域名
          虚拟机B负责解析bj.qq.com域名

        虚拟机B:搭建为DNS服务器,负责解析的域名为bj.qq.com
        [root@pc207 ~]# yum -y install bind bind-chroot
        [root@pc207 ~]# cp /etc/named.conf /etc/named.bak
        [root@pc207 ~]# vim /etc/named.conf
         options {
                directory       "/var/named";
          };
         zone "bj.qq.com" IN {
                type master;
                file "bj.qq.com.zone";
          };
        [root@pc207 ~]# cd /var/named/
        [root@pc207 named]# cp -p named.localhost bj.qq.com.zone
        [root@pc207 named]# vim bj.qq.com.zone
        bj.qq.com.      NS      pc207
        pc207           A       192.168.4.207
        www             A       50.60.70.80
        [root@pc207 /]# systemctl restart named
        [root@pc207 /]# nslookup  www.bj.qq.com  192.168.4.207




        子域授权

            虚拟机A负责解析qq.com域名
            虚拟机B负责解析bj.qq.com域名

            解析子域的域名,请求虚拟机A,可以解析
        虚拟机A:
        [root@svr7 ~]# vim /var/named/qq.com.zone
         qq.com.       NS  svr7
         bj.qq.com.    NS  pc207
         svr7           A  192.168.4.7
         pc207          A  192.168.4.207
         www            A  192.168.4.10
         ftp            A  2.2.2.2
        [root@svr7 ~]# systemctl restart named
        [root@pc207 /]# nslookup www.bj.qq.com 192.168.4.7
        Server:		192.168.4.7
        Address:	192.168.4.7#53

        Non-authoritative answer:   #非权威解答
        Name:	www.bj.qq.com
        Address: 50.60.70.80
        [root@pc207 /]#


##########################################
        递归查询:接受客户端请求,本机与其他dns服务器交流并将 解析结果带回来
        根域名 是不支持的
        迭代查询 : 本机与其他DNS服务器交流
        根域名支持
##########################################
        缓存dns,提高解析速度(企业内部网络)
        在虚拟机A dns服务器  ####之前已经搭好
        在虚拟机B 缓存dns服务器 ###修改 options 删除 zone
               options {
                        directory       "/var/named";
                        forwarders { 192.168.4.7; };  ###转发给4.7
                };

        在虚拟机C 客户机  ###测试
                [root@C ~]# nslookup ftp.tedu.cn 192.168.4.207
                Server:		192.168.4.207
                Address:	192.168.4.207#53

                Non-authoritative answer:
                Name:	ftp.tedu.cn
                Address: 192.168.4.250
#################################################
Split 分离解析
        什么是: 当收到客户端 的dns查询请求的时候
                能够区分客户机的来源地址
                为客户端提供最近的服务器
                为不同类别的客户提供不同的解析结果(IP地址)


        配置:
        1.匹配即停止
        2.分类要合理,每一个客户端都要找到自己分类
        viem "name0"{
        match-clients { 来源地址;....; };    #匹配客户机来源
        zone "12306.cn" IN { ...地址库1; };
        };
        viem "name1"{
        match-clients{ 来源地址;...; };        #匹配来源
        zone "12306.cn" IN { ...地址库; };
        };
        viem "name3"{
        match-clients{ any; };             #匹配来源 ,上面都不符合的话他将是最后一个 负责解析
        zone "12306.cn" IN { ...地址库; };
        };
    eg:A 纪录分离解析  -----以 www.tedu.cn 为例子
    客户机解析结果
            192.168.4.207---------->  192.168.4.100
            其他地址---------------->  1.2.3.4



            [root@svr7 named]# vim /etc/named.con
                        options {
                    directory       "/var/named";

             };

            view "nsd" {
            match-clients { 192.168.4.207; };
              zone "tedu.cn" IN {
                    type master;
                    file "tedu.cn.zone";
                        };
            };

            view "other" {
            match-clients { any; };
            zone "tedu.cn" IN {
                    type master;
                    file "tedu.cn.other";
                        };
            };

            [root@svr7 named]# vim tedu.cn.other
            tedu.cn.  NS      svr7
            svr7      A      192.168.4.7
            www      A      1.2.3.4
            [root@svr7 named]# vim tedu.cn.zone
            tedu.cn.  NS      svr7
            svr7     A      192.168.4.7
            www      A      192.168.4.100

            [root@svr7 named]# !sys
            [root@pc207 ~]# nslookup www.tedu.cn
            Server:		192.168.4.7
            Address:	192.168.4.7#53

            Name:	www.tedu.cn
            Address: 192.168.4.100




###########################################

192.168.4.207---------->tedu.cn------------> 解析地址 Address: 192.168.4.100
other IP访问------------>tedu.com-----------> 解析地址Address: 1.2.3.4

192.168.4.207---------->sina.com------------> 解析地址 Address: 192.168.4.200
other IP访问------------>tedu.com-----------> 解析地址Address: 10.20.30.40


    [root@svr7 named]# vim /etc/named.conf   #####修改主配置文件

        options {
                directory       "/var/named";

         };
            ####正确写法 ###### 一个match-clients 只能用一次
        view "nsd-yedu" {
        match-clients { 192.168.4.207; };
          zone "tedu.cn" IN {
                type master;
                file "tedu.cn.zone";
                    };
           zone "sina.com" IN {
                type master;
                file "sina.com.zone";

               };

        };
        ########## 错误写法  虽然 服务重启成功 但是无法解析
         #view "nsd-sina"
        #{match-clients { 192.168.4.207; };
        #zone "sina.com" IN {
        #       type master;
        #       file "sina.com.zone";

         #      };
        #};




        view "other-tedu" {
        match-clients { any; };
        zone "tedu.cn" IN {
                type master;
                file "tedu.cn.other";
                    };
    [root@svr7 named]# vim /var/named/sina.com.zone  ##### 添加地址库文件
        sina.com.  NS      svr7
        svr7     A      192.168.4.7
        www      A      192.168.4.200
    [root@svr7 named]# vim /var/named/sina.com.other  ##### 添加地址库文件
        sina.com.  NS      svr7
        svr7     A      192.168.4.7
        www      A      10.20.30.40

    [root@pc207 ~]# nslookup www.sina.com   #####测试访问
    [root@pc207 ~]# nslookup www.sina.com
        Server:		192.168.4.7
        Address:	192.168.4.7#53

        Name:	www.sina.com
        Address: 192.168.4.200



    [root@pc207 ~]# nslookup www.tedu.cn #####测试访问
        Server:		192.168.4.7
        Address:	192.168.4.7#53

        Name:	www.tedu.cn
        Address: 192.168.4.100

#############################
    acl test={ 192.168.4.7; 192.168.4.8; 192.168.4.9;  };  ##类似于变量的功能方便之后调用

       match-clients { test; }; ##调用

#############################################

    RAID 磁盘阵列
            廉价冗余磁盘阵列
            Redundant Arrays of Inexpensive Disk
          什么是:
             通过软件/硬件技术,将多个较小的/低速的磁盘整合称为一个大磁盘
              阵列的价值:提高I/O效率,硬件级别的数据冗余
              不同RAID级别的功能,特性不同
          作用:提高磁盘的高可用
          分类:
              RAID0  , 条带模式

                    同一个文档分散存放在不同磁盘
                    并行写入以提高效率
                    至少两块磁盘
              RAID1  , 镜像模式
                    一个文档复制多份,分别写入不同的磁盘
                    多份拷贝提高可靠性,效率无提升
                    至少两块磁盘
              RAID0+1 ,RAID1+0(绝迹江湖)
                    整合RAID0,RAID1的优势
                    并行存储提高效率,镜像写入提高可靠性
                    至少四块磁盘

                   0+1
                      分别将两组磁盘做成RAID0,将两个RAID0再作成RAID1
                   1+0
                      分别将两组磁盘做成RAID1,将两个RAID1再作成RAID0

              RAID5
                    至少需要三块磁盘
                    需要至少一块用来存放校验数据
                    相当于RADI0 和 RADI1 的折中方案
              RAID6 高可用(银行)
                    相当于扩展的RAID5阵列,提供两份独立的校验方案
                    至少需要两块磁盘存放校验数据
                    至少需要四块磁盘组成
############################################################
   进程管理
           程序:静态的代码  占用磁盘空间
           进程:动态代码   占用CPU MEMORY

           进程整体也是树型结构
           父进程与子进程
           特殊进程:僵尸进程(程序假死)  孤儿进程(程序执行过程中,父进程的突然终止只剩子进程)
           唯一编号 PID
           当父进程kill之后,其子进程也会被kill
           systemd:所有进程的父进程,也负责管理孤儿进程,
   查看进程树
            pstree
            pstree lisi 显示某用户开启的进程
   显示进程的详细信息
            ps
                 选项:
                 aux  列出正在运行的所有进程
                 -elf  ppid 父进程id  列出正在运行的所有进程

   统计命令
            wc

                        eg:
            统计正在运行的进程又少个?
            ps aux | wc -l
            ps -elf | wc -l
            统计当前有多少用户?
            wc -l /etc/passwd
            wc -l /etc/shadow
            统计 /etc/下 所有以 conf结尾的文档?
            [root@server0 ~]# find /etc/   -name '*.conf' | wc -l
            395

   进程动态排名
            top [-d刷新秒数] [-u用户名]  查看 系统运行时间

             CPU 工作负载  1MIN  5MIN  15MIN
            load average: 0.00, 0.01, 0.05

   pgrep [-l 进程名]  [-x 进程名] [-U 用户名]
           -l 输出进程名 而不仅是pid
           -x 精确匹配完整进程名
           -U 检索指定用户的进程
   控制进程
          进程的前后台调度
          正在运行
          ctrl + z  将正在运行的程序暂停并放入后台
          jobs -l ()查看后台
          bg 将后台任务继续运行
          fg 将后台程序恢复到前台继续运行
          $ 后台运行
#######################################
    杀死进程
          #############[-9] 强制执行 能不用就不用
          ctrl + c 结束当前正在运行的程序
          kill [-9] PID  kill [-9] %PID
          killall  [-9] 进程名
          pkill 查找条件 (包含条件的都要杀)
###########################################
            杀死一个用户开启的所有进程(强制踢出一个用户)
            [root@server0 ~]# killall -9 -u lisi
#######################################
日志管理
              什么是日志:纪录系统,程序运行中发生的各种时间
              作用:通过查看日志,;了解以及排除故障
              信息安全控制依据
              记录内核消息,各种服务的公共消息
                /var/log/message
              记录系统启动过程中的相关信息
                /var/log/dmesg
              记录与cron计划任务相关的消息
                /var/log/cron
              记录邮件收发相关
                /var/log/maillog
              记录与访问限制相关安全消息
                /var/log/sucure
        追踪日志消息
            tailf  文件名
        专用分析工具
            Webmin 系统管理套件
            ....
        用户登录分析
            users , who ,w 命令
            查看已登录的用户 详细程度依次递增
            last ,lastb 命令
            查看最近登录成功/失败的用户消息
        日志级别
            数值越小代表越优先
            0-7
        3   ERR  运行出现错误
        4   WARNING 可能会影响系统功能的事件
journalctl 工具
        journalctl(rht7 以上才有)
        提取systemd-journal 服务搜集日志
        journalctl -u


#####################################
systemd
        一个高效的系统&服务管理器
        开机服务并启动,各系统服务间的精确依赖
        配置路径:  /etc/systemd/system/
        服务目录:  /lib/systemd/system/
        主要管理工具  systemctl
        systemctl restart 重启服务
        systemctl start   开启服务
        systemctl status  查看服务当前状态
        systemctl stop    停止服务
        systemctl enable  设置开机自启
        systemctl disable 关闭卡机自启

运行级别的切换(rhel6/5)
        init 5  切换到图形界面
        init 0  关机
        init 3  多用户字符界面(支持网络) 服务器默认运行级别
        init 2  多用户字符界面(不支持支持网络)
        init 5  重启
        init 1  单用户破解密码
rhel7 运行模式
        切换到字符界面
              systemctl isolate multi-user.target
        切换到图形
              systemctl isolate graphical.target

        设定默认的运行模式
              systemctl set-default multi-user.target ##字符界面
              systemctl set-default graphical.target  ##图形界面
        查看默认的运行模式
              systemctl get-default

###########################################################################################
开机启动项目:(默认) 1.本机硬盘 2.光驱设备 3.u盘 4.网络  (顺序可以修改)


DHCP 原理 : 广播进行,先到先得,一个网络只能有一个dhcp服务器 #####工作时请先询问 网络工程师

        DHCP 地址分配的四次会话
            DISCOVERY    --->    OFFER        --->      REQUEST       --->         ACK
           寻找 DHCP服务器       dhcp服务器回应         提供dhcp服务分配ip       确认网络中没有 ip地址冲突

        虚拟机 A :
                安装软件  dhcp
                配置文件  /etc/dhcp/dhcpd.conf
                其服务    dhcpd
        安装 dhcp 服务
        [root@svr7 etc]# yum -y install dhcp
        修改配置文件
        (将 /usr/share/doc/dhcp*/dhcpd.conf.example 中的配置文件导入 dhcp.conf 中 修改到如下;使用 :r /usr/share/doc/dhcp*/dhcpd.conf.example
 导入)
        vim /etc/dhcp/dhcpd.conf

                  subnet 192.168.4.0 netmask 255.255.255.0 {  ###分配的网段
                  range 192.168.4.100  192.168.4.200;         ##分配的ip范围
                  option domain-name-servers 192.168.4.7;     ##分配dns地址
                #  option domain-name "internal.example.org"; ###### 域名
                  option routers 192.168.4.254;               ##指定网关地址,一般为路由地址
                #  option broadcast-address 10.5.5.31;        ##广播地址
                  default-lease-time 600;                     ###地址租约时间
                  max-lease-time 7200;
                }
####################################################################################################
网络装机的概述 (云平台的基础) (必须会 面试必考)

        优势:
            规模化   同时装配多台主机
            自动化   装系统 配置 各种服务
            远程实现 不需要光盘

什么是PXE网络
        PXE  pre-boot execution  environment
            预启动执行环境,在操作系统之前运行
            可远程安装
        pxe 装机: 服务提供的顺序是, hdcp提供ip ,TFTP提供 引导 驱动,HTTP提供RPM软件包
        服务端(PXE装机服务器)
        DHCP服务  分配ip 定位引导程序
        TFTP服务  提供引导程序下载
        HTTP服务  (或FTP/NFS)提供yum 安装源
        客户机要求:
                网卡支持PXE 协议
                主板支持从网卡启动


##############################################################################
PXE 的安装  #####面试必考

        1.搭建DHCP服务
            由于已经安装好,我们需要修改配置文件
            [root@svr7 etc]# vim /etc/dhcp/dhcpd.conf  ####dhcp配置文件
            在{}中添加如下两行
            next-server 192.168.4.7; ###指定下一个服务地址
            filename "pxelinux.0";  ####指定引导文件名称 注意这里的双引号不能用单引号
            "pxelinux.0" 网卡引导文件(安装说明书) 二进制文件
            重启服务
            systemctl restart dhcpd
        2.搭建TFTP服务
            安装
                 yum -y install tftp-server ####注意安装包的名
            默认共享位置
                 /var/lib/tftpboot/
            启动服务
                 systemctl restart tftp
            部署pxelinux.0
                1)查询 该文件是由那个服务产生
                    yum provides 路径
                    yum provides */pxelinux.0  ###查询那个包产生 pxelinux.0 这个文件
                    已加载插件：fastestmirror
                    Loading mirror speeds from cached hostfile
                    syslinux-4.05-13.el7.x86_64
                2)安装 syslinux
                    查询pxelinux.0 文件产生的位置
                    rpm -ql syslinux | grep pxelinux.0
                3)将文件复制到(tftp)默认共享的位置 /var/lib/tftpboot/
                    cp /usr/share/syslinux/pxelinux.0 /var/lib/tftpboot/
                4)产生pxe菜单
                    isolinux.cfg
                    菜单文件 默认位置 ( isolinux/isolinux.cfg)
                    从光盘中获取菜单文件
                    由于虚拟机没有光驱,所以关机添加光驱
                    wget 或者 mount 直接挂载iso文件
                    挂载 iso
                        mount /dev/cdrom /mnt/
                    创建文件夹
                        mkdir /var/lib/tftpboot/pxelinux.cfg
                    拷贝到文件夹并将名称修改为default /var/lib/tftpboot/pxelinux.cfg/
                        cp /mnt/isolinux/isolinux.cfg /var/lib/tftpboot/pxelinux.cfg/default

                5)图形模块vesamenu.c32 和背景图片 splash.png
                    cp /mnt/isolinux/vesamenu.c32 /mnt/isolinux/splash.png /var/lib/tftpboot
                    ls /var/lib/tftpboot/  ##查看文件
                    pxelinux.0  pxelinux.cfg  splash.png  vesamenu.c32

                6)启动内核  vmlinuz 和驱动程序 initrd.img
                    将内核和驱动程序复制到  TFTP的 默认共享位置 /var/lib/tftpboot
                    cp /mnt/isolinux/vmlinuz /mnt/isolinux/initrd.img /var/lib/tftpboot/

                7)修改菜单文件
                     vim /var/lib/tftpboot/pxelinux.cfg/default
                     修改文件
                     1 gg 跳转到第一行
                       1 default vesamenu.c32 ###图形模块
                       2 timeout 600         ###延时 60s 单位 ms
                       4 display boot.msg
                       10 menu background splash.png   ###指定背景图片
                       11 menu title CentOS 7          ###启动标题
                       61 label linux
                       62   menu label ^Install CentOS 7 ###启动项标题 ^I 表示 该选项的快捷键是 I
                       63   menu default                ###设置读秒结束后默认启动项目
                       64   kernel vmlinuz
                       65   append initrd=initrd.img
                       ##同理
                       66 label check
                       67   menu label Test this ^media & install CentOS 7 ###启动项标题 ^m 表示 该选项的快捷键是 m

                8)设置服务的开机自启
                     [root@svr7 ~]# systemctl restart dhcpd
                     [root@svr7 ~]# systemctl enable dhcpd
                     [root@svr7 ~]# systemctl restart tftp
                     [root@svr7 ~]# systemctl enable tftp
        3.构建web服务,共享iso 内容
            1)安装httpd 重启服务
                yum -y install httpd
                [root@svr7 ~]# systemctl restart httpd.service
                [root@svr7 ~]# systemctl enable httpd.service
            2)共享光盘内容
                [root@svr7 ~]# mkdir /var/www/html/centos/
                [root@svr7 ~]# mount /dev/cdrom /var/www/html/centos/
                mount: /dev/sr0 写保护，将以只读方式挂载
                [root@svr7 ~]# firefox 192.168.4.7/centos  ##访问测试
           4) 部署无人值守安装,生成应答文件
                [root@svr7 ~]# yum -y install system-config-kickstart
                LANG=en system-config-kickstart
                首先查看软件包选择是否可用(redhate7 会显示disable)
                package select
                需要yum仓库的支持,必须要求 yum光盘表示[development]
                重启软件
                system-config-kickstart
                basic configuration : 时区 上海  安装完成重启
                installation method : profrom new installation
                                      installation source   httpd
                                      httpserver 192.168.4.7  ###http主机ip
                                      http directory centos   ###和http配置中创建的 centos 对应
                partition information : master boot record clear master record
                                        partition  remove all existing partitions
                                        disk label initialize the disk label
                                        layout  add  / xfs  full disk
                network configuration   add network driver etho dhcp
                authentication 跳过
                Firewall       disable
                selinux        disable
                display configuration 跳过
                package select system --> base
                posinstallation script   user a interpret    /bin/bash
                                        useradd lisi
                                        echo 123 | psswd --stdin lisi
                保存 至 root下
        4.利用web服务,将应答文件 ks.cfg ,共享给客户端
                [root@svr7 ~]#  cp /root/ks.cfg /var/www/html/
        5.修改pxe配置文件 修改 应答文件位置

                 [root@svr7 ~]# vim /var/lib/tftpboot/pxelinux.cfg/default
            65   append initrd=initrd.img ks=http://192.168.4.7/ks.cfg  ####注意这里的IP地址应和 DHCP 的配置文件中 DNS 的地址相同


验证:
                    新建虚拟机  安装选择 PXE   网络private1   内存 2G  其他随机
                    由于目前 PXE 安装文件并没有 完成 所以 看到 安装的 界面就算完成
思路:                DHCP服务->  IP 地址  -> next-server  filename
                    tftp服务 -> pxelinux.0
                    pxelinux.0 -> 读取默认菜单文件
                    default ->图形模块  背景图片 启动内核 驱动程序  应答文件
                    ks.cfg 应答文件 ->分区 语言  键盘类型  装包
                    url --url='http://192.168.4.7/centos' #当 next-server 地址变化 这里也要变化
#############################################################
cobbler 装机平台 (pxe)  ( 新技术越来越多)
        主要适用于centos 系统, 适合多平台的的安装
        集中管理所需服务,如DHCP,DNS TFTP,WEB
        内建 一个镜像版本仓库
        内建ks应答文件
        提供yum 管理 web  api 借口 电源管理

        优点就是自动化程度高
        缺点修改ks.cfg 有点儿难
        1)将cobbler.zip 安装包 scp到虚拟机
            [student@room9pc01 ~]$ scp /home/student/桌面/cobbler.zip root@192.168.4.7:/root/
        2)解压
            [root@svr7 ~]# unzip cobbler.zip -d /
            将文件解压到/opt/     下
            [root@svr7 cobbler]# unzip cobbler_rpm.zip -d /opt/
        3)安装 并 检测
            [root@svr7 cobbler]# yum -y install /opt/cobbler/*.rpm mod_ssl dhcp httpd
            [root@svr7 cobbler]# rpm -q cobbler
            cobbler-2.8.2-1.el7.x86_64
            一下是需要查看是否安装完成的程序列表
            cobbler
            cobbler-web
        4)配置 cobbler
            只要修改四行 对于格式有着严格要求
            [root@svr7 cobbler]# vim /etc/cobbler/settings
            next_server: 192.168.4.7
            server: 192.168.4.7
            manage_dhcp: 1
            pxe_just_once: 1
        5)配置cobbler 的dhcp
            [root@svr7 cobbler]# vim /etc/cobbler/dhcp.template
            [root@svr7 cobbler]# vim /etc/cobbler/dhcp.template
             :%s /192.168.1/192.168.4/g
        6)绝对路径解压释放 cobbler_boot.tar.gz
            [root@svr7 cobbler]# tar -xPf cobbler_boot.tar.gz
            ####在解压过程中 依照压缩前的 路径 将 文件释放到 源位置
        7)启动服务
            #######一次启动多个服务  推荐使用
            [root@svr7 cobbler]# for i in cobblerd httpd tftp rsyncd
            > do
            > systemctl restart $i
            > systemctl enable  $i
            > done
        8)测试
            [root@svr7 cobbler]# cobbler sync
            *** TASK COMPLETE ***
            测试完成
        9)导入安装镜像文件
            mount /dev/cdrom /dvd
            df -h
            cobbler import --path=/dvd --name=dc
            扩展虚拟机磁盘  309 查询行

            LANG=en growpart /dev/vda 1  ##扩展/dev/vda 的第一个分区空间
            lsblk
            blkid /dev/vda1
            xfs_growfs /dev/vda1###扩展/dev/vda1 文件系统
            df -h

 ####################################################################
rsync 同步操作
       同步与复制的差异:
            复制完全拷贝
            同步只有第一次是复制,之后时只修改 改变的部分
       什么是:
       用法: rsync [选项] 源目录 目标目录   ####将整个源目录中同步到目标文件夹
            rsync [选项] /源目录/ /目标目录/ ####将源目录中的 文件/文件夹 同步到 目标文件夹
            ##########################################
            eg:1
            [root@F /]# rsync -av /nsd01/ /nsd03/
            ./
            11
            aa
            bb
            #################################
            eg:2
            [root@F /]# touch /nsd03/aaaa
            [root@F /]# touch /nsd03/aa000
            [root@F /]# touch /nsd03/aa000
            [root@F /]# rsync -av --delete /nsd01/ nsd03/
            sending incremental file list
            deleting aaaa
            deleting aa000
            ./


            选项:  -r 递归 包括目录/子目录及其所有文件
                  -n 测试同步过程,不做实际修改
                  -l 保留符号链接文件
                  -a 归档模式 相当于 -rlptgoD
                  -v 显示详细的操作信息
                  -z 传输过程中启用压缩/解压缩  (5G以上) ####常用
                  -p -t 保留文件的权限 时间标记
                  -o -g 保留文件的属主 / 属组标记
                  -D 保留设备文件及其其他特殊文件
                  --delete 删除 目标目录中多余的部分
                  -av ####常用
                  -av --delete 同步过程中参考源文件地址且删除 目标目录中多余的部分  ####常用
#####################################################
远程同步(rsync + ssh )
       虚拟机A目录/nsd1903 与虚拟机B 目录/opt
       rsync + ssh = rsync + scp
       远程的ssh目录保存同步
       下行:rsync [] user@host 远程目录 本地目录
       上行:rsync [] 本地目录 user@host:远程目录
       [root@F /]# rsync -av --delete /nsd01/ root@192.168.4.7:/opt/nsd/
################################################
实时同步
        虚拟机 A 目录 /nsd1903/  与 虚拟机 B 目录/nsd/ 实时同步
        rsync + scp
        scp 是需要密码的(需要验证)
            两种办法认证:
                密码
                公私钥
                公钥 : 锁子 私钥 : 钥匙
                拥有私钥的人可以访问拥有公钥的人 ##重要
            1)生成公私钥  ssh-keygen ###一路回车
                       /root/.ssh ###存放地点
                        id_rsa     ##私钥
                        id_rsa.pub ##公钥  公钥给比人 私钥 自己保留
                        know_host 曾经远程管理的每个机器的纪录
            2) 将公钥传递给虚拟机B
                [root@svr7 .ssh]# ssh-copy-id root@192.168.4.207
                会要求输入密码 可能会将原本的
            3)authorized_keys 当公钥传递过来的时候会保存为 这个文件
            4)监控目录内容变化  使用  intoifywait 工具
                intoifywait [选项] 目标文件夹
                -r 递归监控 包含子目录和文件
                -m 持续监控 (捕获一个事件后不退出)
                -q 减少屏幕输出信息  qq 关闭输出信息
                -e 指定监视的 modify move create delete attribu 的事件
            5)编辑shell脚本 实现同步操作
                循环解决重复性操作
                for i in []
                do
                    命令
                done
                死循环:无限次的循环
                while [条件]
                do
                    重复执行的操作
                done

                [root@svr7 nsd1903]# vim /root/rsync.sh
                #!/bin/bash
                while inotifwait -rqq /nsd1903
                do
                 rsync -a --delete /nsd1903/ root@192.168.4.207:/opt/nsd
                done
                [root@svr7 nsd1903]#  /root/rsync.sh
                [root@svr7 nsd1903]# touch 1233
                [root@svr7 nsd1903]# touch 12
                [root@svr7 nsd1903]# touch 1000
                [root@svr7 nsd1903]# ls
                [root@B ~]# ls /opt/nsd/
                1000  12  1233

##################################################
源码的编译与安装 ###重要
        今天学校安装 封装 之后在学
            rpm包 rpm -ivh 或者 yum install
            源码包 gcc  make 开发工具 ---->可以执行的程序---->运行安装
        源码编译安装的优势:

        源码编译安装的过程:
            0.下载源码包
            0.1安装 gcc  make 开发工具
            1.tar解包,释放源代码到指定目录
            2../configure 配置,指定安装目录/功能模块
            3.make 编译,生成可以执行的二级制文件
            4.make install 安装,将编译好的文件复制到安装目录
###########################################################
        安装软件包  intoify-tools 工具 (这是个源码包需要编译)
        0.安装 gcc 和 make 开发工具(安装依赖关系的软件)
        1.在物理机上上传 intoify-tools tar 包 到虚拟机A/root中
            scp /intoify-tools.tar.gz root@192.168.4.7:/root
        2.在虚拟机上解压
            cp tools.tar.gz /opt/
            tar -xf tools.tar.gz
        3. ./configure 配置,指定安装目录,功能模块选择
            --prefix=指定安装位置   eg:--prefix=/opt/myapp
            eg:./configure --prefix=/opt/myapp
            ##检测系统是否安装gcc,检测系统是否可以支持编译安装
            [root@svr7 inotify-tools-3.13]# ./configure

        4.make 编译 生成可执行的二进制文件
            [root@svr7 inotify-tools-3.13]# make
        5.make install 安装,将编译好的文件复制到安装目录
            [root@svr7 inotify-tools-3.13]# make install
            [root@svr7 inotify-tools-3.13]# ls /usr/local/bin/inotifywait
            /usr/local/bin/inotifywait




