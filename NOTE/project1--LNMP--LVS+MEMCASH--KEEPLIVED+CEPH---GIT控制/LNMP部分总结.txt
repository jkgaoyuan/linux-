我们在购买服务器时生成的pem 文件是私钥 文件  公钥会留在 服务器中 我们只需要指定私钥文件 通过 ssh -i 指定私钥文件.


通常我们用nginx和 Tomcat来作为 后端 web服务器
负载均衡
    软件:
        lvs/nginx/haproxy

    lvs 只能支持做4层的负载均衡/nginx可以做 7 层 动静分离, 在大型的web集群中通常,
                用lvs来做 四层负载均衡, nginx七层 动静分离
         按照4/7层的web架构可以快速扩建web集群
    haproxy  4/7层 也可以实现 负载均衡 常于 keeplived 连用
    听李欣的的可在整理

负载均衡的高可用

        keeplived
        lvs(负载均衡) 配合keeplived 做高可用
        或者 haproxy + keeplived 也可以实现


            需要注意的是:

                keeplived 和 lvs 连用时 keeplive 的 配置中需要指定  virtural server 部分
                如下
                和 haproxy 连用 时 则不需要 virtual server部分

                                #virtual_server 192.168.1.66 80 {
                                #   delay_loop 6
                                #   lb_algo rr
                                #   lb_kind DR
                                # #  persistence_timeout 50
                                #   protocol TCP

                                #   real_server 192.168.1.62 80 {
                                #       weight 1
                                #       TCP_CHECK {
                                #           connect_timeout 3
                                #           nb_get_retry 3
                                #           delay_before_retry 3
                                #      }

                                #   }

                                #  real_server 192.168.1.63 80 {
                                #       weight 2
                                #       TCP_CHECK {
                                #           connect_timeout 3
                                #           nb_get_retry 3
                                #           delay_before_retry 3
                                #      }
                                #   }


                                #}


 Keepalived+LVS服务器

 Keepalived为LVS调度器提供高可用功能，防止调度器单点故障，为用户提供Web服务





数据库

mycat maxscale读写分离 数据分片













lnmp 搭建 虽然有 一键安装脚本但是还是希望自己能够 独立安装

关于升级 curl

安装仓库
rpm -Uvh  http://www.city-fan.org/ftp/contrib/yum-repo/rhel6/x86_64/city-fan.org-release-2-1.rhel6.noarch.rpm
查看repo 包含的 curl 版本
yum --showduplicates list curl --disablerepo="*" --enablerepo="city*"
启用 repo
vim /etc/yum.repos.d/city-fan.org.repo
    enabled = 1
更新
    yum update curl
如果提示缺少依赖 libnghttp2.so.14()(64bit)
    rpm -ivh http://dl.fedoraproject.org/pub/epel/6/x86_64/Packages/l/libnghttp2-1.6.0-1.el6.1.x86_64.rpm
安装完成后 重复
    yum update curl 或者直接 安装
    curl -V 查看版本
php 7.3 安装
参考:
https://segmentfault.com/a/1190000017547464?utm_source=tag-newest

    1.下载源码
    wget http://cn2.php.net/distributions/php-7.3.0.tar.gz
    2. 创建安装目录 解压 编译
    mkdir /usr/local/php7.3
    tar -xf php-7.3.0.tar.gz
Web 集群并发量
 因素一：服务器网络带宽
 因素二：服务器系统内存（注意是内存不是硬盘哦）
 因素三：web容器
 因素四：程序代码

1：服务器网络带宽
       假如你的服务器带宽是5M，如果你的http求头是8k，那么你的服务器最大并发数是 5M/8k =640
2：操作系统内存
        假如你的操作系统内存是8G，如果你的每个请求占用内存256K，那么你的服务器最大支持并发数就是8G/256K=32758。这就是为啥购买服务器，内存越大，配置越高 支持的并发数越大的原因（当然money越多）。
3：web容器
       web容器的选择和配置也是至关重要的，比如说tomcat 的 baseio 和nio的区别就很大，tomcat配置一般启用的是线程池，maxThreads 一般配置为操作系统支持的最大并发数
4：程序代码
        程序代码放到第四才介绍，可见他的重要性，做了这么多年的程序猿，以前要是想提高并发，我总是抓破头皮的想如何提高代码质量，其实他别不那么重要（也许这样说你会感到很沮丧），更直接的且有效的方式就是提高服务器的配置即。但是，代码质量也是起着不可小觑的作用的，通常在所有的硬件条件都确定的情况下，入门级测试并发工具是 loaderrunner，我们通常挑选系统常用且耗资源的请求来测试，即可得到我们软件的并发量了。