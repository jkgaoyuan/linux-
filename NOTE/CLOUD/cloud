没有git的安装 git

准备软件  git clone git://43.254.90.134/nsd1903.git
         cd nsd1903/
         git pull  //同步
         eip 100 修改IP地址(老师写的jue本)
         vim /etc/
环境介绍  修改专用的虚拟机模板
      修改文件   /etc/clone.conf
      适合旧版本的 教学系统
      clone-vm7
      新版本 系统
      base-vm
      账户root
      密码a

DAY01 云平台的部署与管理
一.虚拟化
        1.1 介绍
            vmware(linux才是本体) 和 kvm(redhat)  rhev(redhat)

            vmware(window软件)= esxi+vcenter

            esxi= linux+ vm (虚拟化软件)
            vcenter  管理软件(Windows)

        1.2 安装虚拟化服务器平台
            KVM/QEMU/LIBVIRTD
            kvm是linux一个内核的模块,需要cpu支持, intel-vt/ amd-v 内存 ept / rvi

            QEMU  虚拟化仿真工具 通过ioctl与内核kvm交互完成虚拟化硬件支持

            libvirtd 是一个对虚拟化管理接口和工具  提供用户程序  virsh virt-install virt-manager virt-view

            lsmod 列出所有的内核模块
            ps -efww -ef显示进程 ww显示完整的信息

        1.3 必备软件
            qemu-kvm
            libvirt-daemon  //libvirtd 后台守护进程
            libvirt-client //客户端软件 提供客户端管理命令
            libvirt-daemon-driver-qemu  //libvirtd 链接qemu驱动

        1.4 kvm虚拟机的组成
            内核虚拟化模块  KVM
            系统设备仿真    QEMU
            虚拟机管理程序  LIBVIRT

            两部分构成
            配置文件位置  /etc/libvirt/qemu/
            磁盘镜像文件位置  /var/lib/libvirt/images/
二.virsh 管理
        2.1 virsh命令介绍

            提供管理虚拟机的命令借口
            -支持交互模式 ,查看/创建/停止/关闭
            -格式 : virsh 控制命令 [虚拟机名] 参数


            虚拟机控制
            
            -list[-all]  列出虚拟机
            -start|shutdown|reboot 虚拟机停止 重启 (正常关机)
            -destroy 强制停止虚拟机 //拔电源
            -define|undefine 根据 xml文件创建/删除虚拟机
            -console 链接虚拟机的console
            -resert  重置虚拟机
            虚拟机管理

            -edit       修改虚拟机配置  //修改完成直接生效,不推荐使用vim打开(需要重启生效)
            -autostart  设置虚拟机自启动
            -domiflist  查看虚拟机网卡
            -domblklist 查看虚拟机磁盘信息

            虚拟网络管理
            -net-list[-all]
            -net-start 启动虚拟交换机
            -net-destroy 强制关闭虚拟交换机
            -net-define  创建虚拟交换机
            -net-undefine 删除虚拟交换机
            -net-edit    修改虚拟交换机配置文件
            -net-autostart 开机自启



             eg:
                ~]$ virsh list --all //非交互
                [student@room9pc01 ~]$ virsh
                欢迎使用 virsh，虚拟化的交互式终端。

                输入：'help' 来获得命令的帮助信息
                       'quit' 退出

                virsh # list
                 Id    名称                         状态
                ----------------------------------------------------
                 1     mysql_22_slave                 running
                 2     mysql_11_master                running
                 3     monitor55                      running
                 4     tedu_node002                   running

                只有链接到同一个虚拟交换机的虚拟机是可以互通的(配置同网段ip)
                ~]$ virsh domiflist tedu_node002 //查看当前主机链接的虚拟交换机
                接口     类型     源        型号      MAC
                -------------------------------------------------------
                vnet12     bridge     vbr        virtio      52:54:00:67:fc:90

                 ~]$ virsh domblklist tedu_node002   //查看当前虚拟机的磁盘信息
                目标     源
                ------------------------------------------------
                vda        /var/lib/libvirt/images/tedu_node002.img

        2.2 常用磁盘镜像类型

            RAW(物理磁盘)  QCOW2(用多少写多少)
            qcow2 核心: copy on write 技术

            qemu-img 是虚拟机记得磁盘管理指令,支持非常多的磁盘格式

            qemu-img  命令 阐述 块文件名称 大小

            常用命令
                -create 创建磁盘
                -convert 转换磁盘格式
                -info   查看磁盘信息
                -resize 扩容磁盘空间
            选项:
                -f 指定文件系统
                -f qcow2
                -b 指定后端盘
                -b node.img
                eg:
                     查看磁盘文件信息/
                     1 ~]$  qemu-img info  /var/lib/libvirt/images/tedu_node002.img
                            image: /var/lib/libvirt/images/tedu_node002.img
                            file format: qcow2
                            virtual size: 20G (21474836480 bytes)
                            disk size: 25M
                            cluster_size: 65536
                            backing file: /var/lib/libvirt/images/.node_base.qcow2
                            Format specific information:
                                compat: 1.1
                                lazy refcounts: false

                     创建 -f 指定磁盘文件类型 50G表示最大可容量
                      ~]$ qemu-img create -f qcow2 ./f1.img 50G
                          Formatting './f1.img', fmt=qcow2 size=53687091200 encryption=off cluster_size=65536 lazy_refcounts=off

                     创建教学系统中创建虚拟机使用的前端盘
                          这里使用的后端盘可以由我们自己全新安装,配置完成后 img 文件 就是这里使用的模板(这里需要取消虚拟机定义,修改为qcow2)
                          //查找虚拟机的前端盘

                          ~]$ virsh domblklist tedu_node002
                                目标     源
                                ------------------------------------------------
                                vda        /var/lib/libvirt/images/tedu_node002.img


                          //查找后端盘
                          ~]$ qemu-img info /var/lib/libvirt/images/tedu_node002.img

                                image: /var/lib/libvirt/images/tedu_node002.img
                                file format: qcow2
                                virtual size: 20G (21474836480 bytes)
                                disk size: 9.6M
                                cluster_size: 65536
                                backing file: /var/lib/libvirt/images/.node_base.qcow2  //后端磁盘文件
                                Format specific information:
                                    compat: 1.1
                                    lazy refcounts: false

                          ~]$ cd /var/lib/libvirt/images
                          //创建前端盘
                          记得删除旧的前端盘
                          images]$ qemu-img create -f qcow2 ./tedu_node002.img -b /var/lib/libvirt/images/.node_base.qcow2  20G

                          使用后端盘创建镜像
                                qemu-img create -b 后端模板文件 -f 格式  磁盘路径  大小

        2.3 virsh 管理

            xml 文件管理
                命令 virsh edit 主机名

                eg:修改如下
                    virsh  edit tedu_node002.
                      <memory unit='KiB'>4588282</memory>   //最大内存
                      <currentMemory unit='KiB'>4588282</currentMemory>  //当前内存
                      <vcpu placement='static'>4</vcpu>  //cpu个数
                      <disk type='file' device='disk'>
                      <source file='/var/lib/libvirt/images/tedu_node002.img'/>  //磁盘
                      <interface type='bridge'>
                      <source bridge='vbr'/> //链接的虚拟交换机

                创建虚拟机

                    创建虚拟机前端盘

                        qemu-img create -f qcow2 /var/lib/libvirt/images/nsd1903.img -b /var/lib/libvirt/images/.node_base.qcow2 30G

                    创建虚拟机配置文件
                        cp /var/lib/libvirt/images/.node_base.xml /etc/libvirt/qemu/nsd1903.xml
                        vim /etc/libvirt/qemu/nsd1903.xml
                        修改为  <name>nsd1903</name>
                               <source file='/var/lib/libvirt/images/nsd1903.img'/>
                    定义虚拟机
                        virsh define /etc/libvirt/qemu/nsd1903.xml
                    开机
                        virsh start nsd1903

            网卡机器配置文件
                /etc/sysconfig/network-scripts/xxx xx主机名





            virsh 扩容硬盘

                virsh domblklist 主机名
                //扩容硬盘
                virsh blockresize --path [绝对路径] -- size xxG 主机名

                思路:
                    先扩容磁盘
                    扩容分区
                    扩容文件系统
            eg:扩容nsd1903 虚拟机
                物理机
                virsh domblklist nsd1903
                virsh blockresize --path /var/lib/libvirt/images/nsd1903.img --size 50G nsd1903

                虚拟机nsd1903
                LANG=en growpart /dev/vda 1
                xfs_growfs /dev/vda1
                df -h



三.云平台
        3.1 云平台介绍
            IaaS (infrastructure  as a service) 基础设置即服务

                iaas 通常分为 公有云(全部托管) 私有云(自建机房) 和 混合云(两种混合)
                提供给消费者所有云计算的基础设施,包括处理cpu 内存 存储 网络
            PaaS (Platform as a service)平台即服务
                不仅仅是单充的基础平台,还针对平台的技术支持服务,对于平台进行的应用系统开发优化等服务
            SaaS (software as a service )软件即服务
                通过internet提供软件(软件商店)
        3.2 openstack 简介

            iaas 解决方案
            开源的云计算管理平台
            Apache 授权
四.华为云

        基于openstack 开发而来的



DAY02 OPENSTACK
一.openstack
    基于python开发

    每个版本命令都可能不太一样,一般我们通过web页面来管理.
    每年2个大版本的更新
        1.1 openstack主要组件(核心组件)
            Horizon
                用于管理openstack的各种服务,基于web的管理接口
                通过图形界面实现创建用户.管理网络 启动实例

                dashborad python页面的解释器

            Keystack
                组件之间的认证
                提供了集中的目录服务
                也支持多种身份认证模式, 如密码 令牌 aws登录
                为用户提供其他服务提供sso认证服务

                验证谁是horizon

            Neutron
                一种软件定义的网络服务
                用于创建网络 子网 路由器 管理浮动 ip
                可以实现虚拟交换机 虚拟路由器
                可用于在项目中创建vpn

                通过(vxlan[扩展vlan]解决)
                不同公司之间需要隔离,相同公司之间需要通信
                所有安装 nova的机器上都要安装

            Cinder
                为虚拟机提供存储卷的服务
                为运行的Nova中的实例提供永久的块存储
                可以通过快照进行数据备份
                经常应用在实例存储环境中,如数据文件


            Glance
                扮演虚拟机镜像注册的角色
                允许用户为直接存储拷贝服务器镜像
                这些镜像可以直接用来创建新的虚拟机模板

                qcow2(后端盘)
            Nova
                在节点上用于管理虚拟机的服务
                Nova是一个分布式的服务,能够与keystone交互实现认证,与Glance交互实现镜像管理
                Nova被设计在成标准硬件上能够进行水平扩展
                启动实例,有需要则下载镜像

                除了安装 Horizon 的机器都要安装

            master :
                   Neutron  Horizon
            slave:
                  Nova    Neutron   Keystack

            机器的准备 :  卸载 networkmanager 和 防火墙(iptables/Firewalls)

        1.2  安装openstack

            准备三台虚拟机
                使用base模板 虚拟机
                openstack RAM 6G  disk 50G
                nova01  RAM 4.5G  disk 100G
                nova02  RAM 4.5G  disk 100G

            更改 ip

                vim /etc/sysconfig/network-scripts/ifcfg-eth0
                # Generated by dracut initrd
                DEVICE="eth0"
                ONBOOT="yes"
                NM_CONTROLLED="no"
                TYPE="Ethernet"
                BOOTPROTO="static"
                PERSISTENT_DHCLIENT="yes"
                IPADDR="192.168.1.10"  // 11 //12
                NETMASK="255.255.255.0"
                GATEWAY="192.168.1.254"

            修改hosts文件并检查是否可以相互ping同
                vim /etc/hosts
                192.168.1.10 openstack
                192.168.1.11 nova_01
                192.168.1.12 nova_02


            修改DNS
                 vim /etc/resolv.conf
                    #search localhost   //注释掉这一行
            同步时间

                vim /etc/chrony.conf

                    server 192.168.1.254 iburst
                    systemctl restart chronyd.service

                    测试 chronyc sources -v/timedatectl

            检查防火墙和networkmanager 是否安装

                若安装必须卸载
                68  rpm -qa | grep firewall
                69  rpm -qa | grep -i networkmanager



            配置对应的yum源软件已经在 linux-soft中提供

                /linux-soft/04/openstack/
                    RHEL7-extras.iso  RHEL7OSP-10.iso
                分别将上面的两个iso文件 挂载到 ftp下对应的文件夹中
                /var/ftp/extras
                /var/ftp/openstack

                在openstack中我们只需要 如下两个仓库
                 /var/ftp/openstack/rhel-7-server-openstack-10-devtools-rpms/
                 /var/ftp/openstack/rhel-7-server-openstack-10-rpms/
                将上面的仓库配置为yum源并检查
                    [openstack1]
                    name=ops1
                    baseurl="ftp://192.168.1.254/openstack/rhel-7-server-openstack-10-rpms"
                    enabled=1
                    gpgcheck=0

                    [openstack2]
                    name=ops2
                    baseurl="ftp://192.168.1.254/openstack/rhel-7-server-openstack-10-devtools-rpms"
                    enabled=1
                    gpgcheck=0

                    [extarts]
                    name=extars
                    baseurl="ftp://192.168.1.254/extras"
                    enabled=1
                    gpgcheck=0


            检查上面修改是否准确修改

                安装额外的软件包
                是否卸载firewalld 和 NetworkManager
                检查配置主机网络参数（静态IP）
                主机名必须能够相互 ping 通
                检查配置主机yum源（4个，10670）
                依赖软件包是否安装
                检查NTP服务器是否可用
                检查 /etc/resolv.conf 不能有 search 开头的行



            安装 packstack

                安装依赖软件 (三台都要安装)
                yum install -y qemu-kvm libvirt-client libvirt-daemon libvirt-daemon-driver-qemu python-setuptools

                packstack --gen-answer-file answer.ini   //生成应答文件

                //answer.ini与answer.txt是一样的，只是用vim打开answer.ini文件有颜色
                Packstack changed given value  to required value /root/.ssh/id_rsa.pub
                [root@openstack ~]# vim answer.ini
                42  CONFIG_SWIFT_INSTALL=n
                45  CONFIG_CEILOMETER_INSTALL=n                   //计费相关模块
                49  CONFIG_AODH_INSTALL=n                         //计费相关模块
                53  CONFIG_GNOCCHI_INSTALL=n                     //计费相关模块
                75  CONFIG_NTP_SERVERS=192.168.1.254   //时间服务器的地址
                98  CONFIG_COMPUTE_HOSTS=192.168.1.11
                102 CONFIG_NETWORK_HOSTS=192.168.1.10,192.168.1.11
                 333 CONFIG_KEYSTONE_ADMIN_PW=a     //修改管理员的密码
                840 CONFIG_NEUTRON_ML2_TYPE_DRIVERS=flat,vxlan   //驱动类型
                 876 CONFIG_NEUTRON_ML2_VXLAN_GROUP=239.1.1.5
                //设置组播地址,最后一个随意不能为0和255,其他固定
                 910 CONFIG_NEUTRON_OVS_BRIDGE_MAPPINGS=physnet1:br-ex  //物理网桥的名称
                 921 CONFIG_NEUTRON_OVS_BRIDGE_IFACES=br-ex:eth0
                //br-ex桥的名称与eth0连接，管理eth0,网桥与哪个物理网卡连接
                1179 CONFIG_PROVISION_DEMO=n   //DEMO是否测试
                 [root@openstack ~]# packstack --answer-file=answer.ini  //安装openstack
                Welcome to the Packstack setup utility
                The installation log file is available at: /var/tmp/packstack/20190423-170603-b43g_i/openstack-setup.log
                Installing:
                Clean Up                                             [ DONE ]
                Discovering ip protocol version                      [ DONE ]
                root@192.168.1.11's password:
                root@192.168.1.10's password:
                Setting up ssh keys
                **** Installation completed successfully ******        //出现这个为成功

                ************************************************************
                过程中出现错误请检查 硬盘 容量 足够 ,yum,依赖软件是否安装,dns,ip,ntp等.


            网络管理
                我们在虚拟机上查看网卡实际上查看的是真机上虚拟出来的虚拟交换机的端口,虚拟机之间通信都是通过虚拟交换机转发.
                查看外部OVS网桥

                    1）查看br-ex网桥配置（br-ex为OVS网桥设备）
                        [root@openstack ~]# cat /etc/sysconfig/network-scripts/ifcfg-br-ex
                        ONBOOT="yes"
                        NM_CONTROLLED="no"
                        IPADDR="192.168.1.10"
                        PREFIX=24
                        GATEWAY=192.168.1.254
                        DEVICE=br-ex
                        NAME=br-ex
                        DEVICETYPE=ovs
                        OVSBOOTPROTO="static"
                        TYPE=OVSBridge
                    2）查看eth0网卡配置（该网卡为OVS网桥的接口）
                        [root@openstack ~]# cat /etc/sysconfig/network-scripts/ifcfg-eth0
                        DEVICE=eth0
                        NAME=eth0
                        DEVICETYPE=ovs
                        TYPE=OVSPort
                        OVS_BRIDGE=br-ex
                        ONBOOT=yes
                        BOOTPROTO=none
                    3）验证OVS配置
                        [root@openstack ~]# ovs-vsctl show
                            Bridge br-ex
                                Controller "tcp:127.0.0.1:6633"
                                    is_connected: true
                                fail_mode: secure
                                Port br-ex
                                    Interface br-ex
                                        type: internal
                                Port phy-br-ex
                                    Interface phy-br-ex
                                        type: patch
                                        options: {peer=int-br-ex}
                                Port "eth0"
                                    Interface "eth0"
                            ovs_version: "2.5.0"


            修改/etc/httpd/conf.d/15-horizon_vhost.conf 配置文件，使其可以成功登录openstack
                在WSGIProcessGroup apache下
                添加如下
                WSGIApplicationGroup %{GLOBAL}
                重启httpd或者重新载入配置文件
                apachectl  graceful  //重新载入配置文件
            访问1.10登录


    DAY03
        openstack项目管理
            之前版本把项目也叫做租户
            openstack的一切管理都是从项目开始
                项目的目的是分配资源
                项目的资源是按照 需求的总数划分的 比如 多少核cpu 多少内存 多少储存 带宽的等(具体的划分可以由客户自己分配)

            项目管理员
                授权用户时,角色确认为member,admin是openstack的管理用户,并且必主选项目.


                在openstack 数据库中的 kyesstone.user 记录用户信息
                MariaDB [keystone]>  select * from user;

                在master主机上 查看
                 ~]# source keystonerc_admin //加载认证信息
                ~(keystone_admin)]# openstack user list //显示用户
                    +----------------------------------+---------+
                    | ID                               | Name    |
                    +----------------------------------+---------+

                 ~(keystone_admin)]# openstack user set --password aa uu   //修改普通用户的密码, 先写新密码 再写用户名

            修改管理员密码

                 ~]# source keystonerc_admin //加载认证信息
                 ~(keystone_admin)]# openstack user set --password aa admin

            破解openstack管理员密码
                 ~]# vim token
                        export OS_TOKEN=262b214a14ac4bdeb72999f1d824b1c9 ### 在/etc/keystone/keystone.conf 中找到 18 行 的数据 将这里的替换
                        export OS_URL=http://127.0.0.1:35357/v2.0
                        export OS_INDETITY_API_VERSION=2

                 ~]# source token
                 ~]# source  keystonerc_admin
                ~(keystone_admin)]# openstack user set --password gaoyuan admin



            云主机类型

                也叫作资源模板

            计算节点扩容
                删除已经创建的虚拟主机(openstack中),原因内存不够

                修改 answer.ini 98/102 添加 nova_02的ip地址

                安装
                    packstack --answer-file=answer.ini



                修改httpd 下的 15-horizon_vhost.conf
                    vim /etc/httpd/conf.d/15-horizon_vhost.conf

                    内容参考,第一次安装
                    WSGIProcessGroup apache
                    WSGIApplicationGroup %{GLOBAL}
                重启httpd
                    apachectl graceful/systemctl restarthttpd


            主机迁移

                迁移必须使用 openstack的管理账号迁移,迁移过程中不影响业务.

                迁移条件
                        -nova节点与openstack管理节点都能互相ping通 主机名也要可以ping通
                        所有计算节点安装 qemu-img-rhev,qemu-kvm-rhev
                        若位安装,在安装后需要重启libvirtd服务


    DAY04
        一.docker
            docker 是使用go语言编写
            Go 编译生成的是一个静态可执行文件,除了 glibc 外没有其他外部依赖,这让部署变得异常方便.
            参考:
            https://www.cnblogs.com/bethal/p/5942369.html
            镜像在没有运行起来之前只是镜像,运行起来后就可以称为 容器.
            要点：容器 = 镜像 + 可读层。并且容器的定义并没有提及是否要运行容器。
            docker 是 一个容器管理工具
            1.1什么是容器

                容器技术已经成为应用分装和交付的核心技术
                容器的核心组成需要一下三个内核技术组成
                    Cgroups (control Groups) 资源管理
                    NameSpace 进程隔离
                        (依靠内核的进程隔离机制,
                         主机名隔离,网络隔离,
                         文件系统隔离,
                         用户隔离,
                         信号向量隔离(kiall)-杀进程只能杀docker里面的进程对本机无影响)

                    selinux 安全

                    docker需要隔离 的资源 叫做 名称空间(namespaces)
                    UTS(主机名和域名) Mount(文件系统/挂载树) IPC (进程间通信)  PID (进程ID)   User，NetWork

                我们在虚拟机上查看网卡实际上查看的是真机上虚拟出来的虚拟交换机的端口,虚拟机之间通信都是通过虚拟交换机转发.
                由于是在物理机器上实施隔离,所以启动一个容器会非常快(如同启动进程).
            1.2 docker

                docker是一套完整的容器管理系统
                docker提供了一组完整的命令,用户方便的直接使用容器,不需要过多的关系内核

                docker 优点
                    容器更加简介高效,相比传统的虚拟化
                    传统虚拟机需要给每个vm安装os,容器直接使用本机的系统
                    容器使用的共享库和程序(与真机共享)
                docker 缺点
                    容器的隔离性没有虚拟化强
                    共用 linux内核,先天性安全缺点
                    selinux难以控制
                    监控容器和容器排除是挑战

                    需要内核支持
            1.3准备

                需要64为系统

                rhel6.5以上,推荐rhel7 (内核3.x以上;;;2.6.32-431)

                关闭防火墙(不必要)

                YUM 源使用openstack 即可

                yum -y install docker
            1.4 docker镜像
                    由于qcow2的 特性 我们创建的的qcow2 是可以堆叠的.
                    我们教学环境中最基础的是.node_base.qcow2

                    牛老师.node_tedu.qcow2 后端盘指向 base
                先systemctl restart docker
                docker容器基于镜像启动
                镜像是启动容器的核心
                镜像采用分层设计
                使用快照的cow技术,确保底层数据不丢失

                docker hub 镜像仓库
                    镜像由 name和tag确定唯一的
                由docker 官方提供 镜像仓库
                ~]# docker images //查看docker 镜像,管理不要手动管理,使用命令
                ~]# docker search busybox  //查找镜像
                ~]# docker pull            //下载
                    docker pull [OPTIONS] NAME[:TAG|@DIGEST]
                    下载位置 /var/lib/docker/image/devicemapper/layerdb/sha256

                ~]# docker push            //上传
                    docker push [OPTIONS] NAME[:TAG]
                ~]# docker save                          //导出镜像
                    docker save [OPTIONS] IMAGE [IMAGE...]                         //导出镜像
                ~]# docker save docker.io/busybox:latest -o busybox.tar  //:lasts 是tag,-o outpu  t

                ~]# docker  load   //导入镜像
                    Usage:	docker load [OPTIONS]
                    eg:
                        docker load < gitlab_zh.tar

                ~]# docker load  -i busybox.tar/  -i input
                导入失败:停止docker 删除下/var/lib/docker/的所有,重启服务,重新导入

            1.5开启容器

                 ~]# docker run -it docker.io/centos:latest  /bin/bash

                    /bin/bash 指需要启动的命令,不指定表示按照默认启动(只在容器中有效)
                    对于服务镜像的启动(交互),放置在前台,非交互(数据库,nginx)放置后台.
                    i 交互式界面 t terminal(终端) d 后台执行   v 指定 后端磁盘
                    p 指定端口
            1.6查看容器

                ~]# docker ps -a //查看所有的容器 -a显示所有 -q只显示容器id,
                ~]# docker ps  //查看运行的容器
                ~]# docker ps  -qa//查看所有容器的id

            1.7镜像常用命令

                docker images  //查看当前镜像
                docker pull    // 下载
                docker push     //上传
                docker history  //查看镜像制作历史
                    docker history docker.io/busybox:latest

                docker inspect   //查看镜像底层信息,注意 PATH和cmd部分就好
                    docker inspect docker.io/nginx //查看镜像底层信息
                    docker inspect a49918ac2a02 //查看容器信息
                    docker inspect -f "{{.NetworkSettings.IPAddress}}" a49918ac2a02(容器id) // -f  格式化输出


                    docker tag docker.io/nginx:latest nsd:nsd  //修改镜像的名称和tag
                docker tag docker.io/oldname:oldtag newname:newtag
                docker rmi 镜像名称   // 删除镜像,启动过容器的镜像不能删除
                    docker rmi docker.io/nginx:latest

                docker save 镜像名称 -o 保存文件名称  //导出镜像 (保存为tar包)
                    docker save docker.io/redis:latest -o redis.tar

                docker  load  -i 导入文件名称  //导入镜像
                    docker load  -i busybox.tar/

                docker search 镜像名称  //查找镜像

            1.8docker 管理命令
                docker run -itd docker.io/redis:latest  // 运行容器(创建新容器) i 交互式界面 t terminal(终端) d 后台执行
                docker ps  //查看启动的容器列表 -a 显示所有 -q 只显示容器数字id CONTAINER ID
                docker ps -a
                docker stop 9752526130d0    //关闭容器
                docker start 9752526130d0   //开启容器
                docker restart 9752526130d0 //重启容器
                docker inspect a49918ac2a02 //查看容器信息
                docker rm 5613aa11e610      //删除容器
                    docker rm -f 5876b2b46e6c   -f 强制删除真正运行的容器
                docker top 容器ID             //查看容器进程列表
                    docker top 9752526130d0
                docker exec -it 容器id 指定解释器(容器中存在的解释器) //进入容器  i 交互式界面  t 终端
                    docker exec -it daa87f3bb /bin/bash
                    docker attach  容器id     // 直接链接上帝进程systemd 退出后systemd 关闭 整个容器,排错时使用,平时不推荐

                docker rm $(docker stop $(docker ps -qa)) //删除所有的容器包括 关闭的 //命令中可以传递参数

            1.9 制作镜像
                    手动创建
                        docker run -it docker.io/centos:latest          //新建容器

                            安装需要的软件

                        docker commit CONTAINER ID docker.io/name:tag   //导出镜像

                    自动创建

                        Dockerfile

                        FROM 基础镜像
                        RUM  在容器中执行  //RUM是在容器bash中执行的,也就是说每个RUN的父进程是一个bash进程                        ADD  复制文件到镜像
                        MAINTAINER 镜像创建者信息
                        EXPOSE 开放端口
                        ENV  设置环境变量
                        WORKDIR 定义容器工作目录  //设置当前目录
                        CMD  容器启动时执行的命令,仅只能有一条  所有参数和命令之间用','分割并用""将每一部分引起来 CMD ["/bin/ls","-a"]

                        docker build  // -t  Name and optionally a tag in the 'name:tag' format (default [])


                    eg: 配置yum源
                        [root@docker1 ~]# ls base/
                        cp  /etc/yum.repos.d/local.repo .
                        Dockerfile  local.repo  //创建文件如下

                        FROM docker.io/centos:latest
                        RUN rm -rf  /etc/yum.repos.d/*.repo
                        ADD local.repo  /etc/yum.repos.d/    ### 需要复制到docker的文件必须和 Dockerfile 在一个文件夹下
                        RUN yum -y install vim net-tools iproute psmisc tree lftp rsync

                        [root@docker1 base]# docker build -t test:test .

                    eg:配置httpd服务


                        vim Dockerfile

                            FROM docker.io/myos1:latest
                            RUN yum -y install httpd
                            RUN echo "hello world" > /var/www/html/index.html
                            EXPOSE 80
                            ENV EnvironmentFile=/etc/sysconfig/httpd
                            CMD ["/usr/sbin/httpd","-DFOREGROUND"]

                        docker build -t myapach:test .

                        docker run -it myapach:test .
                        curl 172.17.0.2
                            hello world

            1.10自定义私有仓库
                      1.31
                      yum -y install docker-distribution
                      systemctl restart docker-distribution.service
                      systemctl enable docker-distribution.service
                      vim /etc/sysconfig/docker  //修改如下
                        13 ADD_REGISTRY='--add-registry 192.168.1.31:5000'  //docker1 定义在/etc/hosts 中也可以填 ip:port
                                                                        但是需要注意的是  这两行要么填hosts 要么填 ip:port
                                                                        并且之后上传/启动镜像也要使用相对应的

                        24 INSECURE_REGISTRY='--insecure-registry 192.168.1.31:5000'

                      systemctl restart docker-distribution.service

                      docker tag docker.io/myos1:latest 192.168.1.31:5000/myos:latest

                      docker push 192.168.1.31:5000/myos:latest

                      1.32
                        vim /etc/sysconfig/docker
                            //依然是13/24 行和31 填写的相同
                        systemctl restart docker-distribution.service
                            //启动
                        docker run -it 192.168.1.31:5000/apache:httpd /bin/bash

                查看共享的image
                     查看私有镜像仓库全部镜像
                     curl http://192.168.1.31:5000/v2/_catalog

                     私有库存储位置   /var/lib/registry/


            1.11 主机卷的共享

                docker 数据持久化
                        -v 数据传递
                    docker run -it -v/真机目录:/docker目录 192.168.1.31:5000/apache:httpd /bin/bash

                    docker run -v/webroot:/usr/share/nginx/html/ -itd 192.168.1.31:5000/nginx:latest

                        真机/webroot 可以使用nfs 等磁盘共享
                        docker 直接挂载使用




            1.12 docker 网络拓扑

                docker network list  //查看网络信息

                docker network create --subnet=10.10.10.0/24 docker1 //创建虚拟交换机 --subnet指定子网

                docker run --network=docker1 -itd docker.io/busybox:latest




                客户端访问容器内资源
                    默认容器可以访问外网
                    但是外部主机不可以不可以变成对应的服务
                    容器的特性是可以把宿主机器变成对应服务
                        -p 将容器端口和宿主机端口绑定

                        -p 宿主机端口:容器端口
                文件系统的挂载
                    eg:
                        docker run -v/webroot:/var/www/html -itd -p 80:80 192.168.1.31:5000/apache:httpd
                          -v 挂载磁盘,数据持久化

                宿主机复制文件到docker容器(也可以将docker容器的文件复制到宿主机)

                    docker cp 要拷贝的文件路径 容器名：要拷贝到容器里面对应的路径
                    eg:
                        docker cp /opt/test.js testtomcat：/usr/local/tomcat/webapps/test/js
                    docker cp 容器名：要拷贝的文件在容器里面的路径       要拷贝到宿主机的相应路径
                    eg:
                        docker cp testtomcat：/usr/local/tomcat/webapps/test/js/test.js /opt

                1.13 docker 网络模式
                    参考: https://www.cnblogs.com/zuxing/articles/8780661.html
                    查看docker网络
                    docker network ls
                    用--net选项指定容器的网络模式

                        · host模式，使用--net=host指定。

                        · container模式，使用--net=container:NAME_or_ID指定。

                        · none模式，使用--net=none指定。

                        · bridge模式，使用--net=bridge指定，默认设置


                    host模式:
                        Docker使用的网络实际上和宿主机一样，在容器内看到的网卡ip是宿主机上的ip

                        由于docker使用了 基于内核的 name space 技术来进行资源隔离
                        (隔离主要分为 PID Namespace隔离进程，Mount Namespace隔离文件系统，Network Namespace隔离网络),
                        若docker 创建 容器 时使用了 -net=host 指定网络模式,则容器将不会进行网络隔离,容器不会虚拟出自己的网卡和配置自己的ip
                        而直接使用宿主机的 ip

                    container (容器) 模式:
                        多个容器使用共同的网络看到的ip是一样的。

                        该模式将指定一个已经存在的容器的 network name space 供 新创建的容器使用
                        而不是和宿主机共享.新创建的容器不会创建自己的网卡，配置自己的IP，
                        而是和一个指定的容器共享IP、端口范围等。同样，两个容器除了网络方面，其他的如文件系统、
                        进程列表等还是隔离的。两个容器的进程可以通过lo网卡设备通信。



                    none模式:
                        该模式不会配置任何网络

                        这个模式下docker拥有自己的network namespace ,但是不会对容器配置任何网络,需要我们根据实际情况 对容器配置网络

                    bridge模式:

                        bridge 模式是 docker默认的网络设置,该模式会为每一个容器分配network namespace,设置ip,
                        并将一个主机上的docker容器链接到同一个网段之下,docker之间是可以通信的.

                    eg:
                        在宿主机上启动一个含有nginx的docker容器,监听tcp80 端口
                        docker run --name=nginx_host --net=host -p 80:80 -d nginx

                        我们可以直接使用  宿主机的80 端口进行访问,不需要使用nat转换

                docker 网络配置过程:
                        1.宿主机上创建一对虚拟网卡veth pair 设备,veth 设备必须成对出现,不然怎么通信,之间组成一个数据通道,
                          数据从一个设备进入,从另一个设备出来, veth 设备则是用来链接这两个网络设备
                        2.docker 将veth pair的设备的一端放在新创建的的容器中,并命名为eth0.另一端放在宿主机中vethxxx命名,
                        并将这个网络设备加入到docker0网桥中,通过brctl show  查看

                        3.从docker0子网中分配一个ip给容器使用,并将docker0的ip地址为默认网关