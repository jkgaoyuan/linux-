  k8s 是容器的集群管理系统,一个开源的平台,实现容器集群的自动化部署,升级,管理
    k8s 是可以为自己提供服务
  master-node 架构
  为了高可用来说 需要三个master节点
  pod
    需要有标签
    原子单元, 一旦我们把某一pod 调度到 某一node上,那么这个pod中的所有容器 都会在同一个node上运行.
    k8s上的最小控制单元叫做 pod(逻辑上划分) 由多个 docker 组成, k8s 并不直接调度 容器.
        pod 对外可以看成一个整体,而内部则是多个docker 共用 网络,存储,
        一般来说一个pod中只有一个容器,而当容器间有非常紧密联系的东西时可以将多个 docker放在一个 pod中,
        而pod中的docker则以一个为主,其他容器(边车)则是为了辅助主容器来完成工作 (pod 中 有 一个 nginx和logstash(只是负责日志收集), ).
    分类:
        自助式pod
        控制器管理的pod replication controler
  select
    标签选择器, 所有资源都可以打上标签,通过
    k8s 特点:

        自动装箱(基于资源依赖,自动完成容器部署且不影响 容器可用性) 自我修复 水平扩展 服务发现和负载均衡  自动发布 自动回滚
        秘钥和配置管理 存储编排(需要多少,创建多少) 批量处理执行

    k8s的工作模式 :
        master 接受到 请求 由scheduler(通过docker所需资源的上限和下限来确定)
        决定 那个 node 更适合 执行docker

        k8s 支持多种 控制器

    master 节点  (主节点)
        API-server  scheduer  controler-manager etcd
            API-server 提供系统对外的接口, 供客户端和其他组件调用, 接受并处理请求.
            scheduler 负责对集群内部的资源进行调度, 调度容器创建请求
            controller-manager 负责管理控制器,监控控制器管理器是否健康, 控制器才是负责监控 容器是否处于健康状态
    node 节点
        docker kubelet kube-proxy fluentd kube-dns pod


        pod 是 kubenetes 最基本的操作单元
            pod 代表集群中运行的一个进程 内部封装了一个或多个紧密相关的容器
        service 可以看做一组提供相同服务的pod对外访问接口
        docker
        kubelet (集群代理)负责监控指派到他所在node上的pod,
                 包括创建 修改 监控 删除 对docker进行健康检查,也就说接受scheduler分发的请求,在本地控制docker启动.
        kube-proxy 主要为pod提供代理
        fluentd 日志收集 存储 查询

        k8s 网络

            node
            pod
            server

    k8s 安装
        配置 yum 源 为 华为云的

                wget -O /etc/yum.repos.d/CentOS-Base.repo https://mirrors.huaweicloud.com/repository/conf/CentOS-7-anon.repo
        需要注意的是  华为云 默认提供的  kubernetes 版本 过低  我们需要手动指定 版本 //使用下面的 yum源
            安装 1.10.版本的 kubernets
                [kubernets-110]
                name=110
                #baseurl=http://mirror.centos.org/centos/$releasever/os/$basearch/
                gpgcheck=0
                enabled=1
                baseurl=https://mirrors.huaweicloud.com/centos/7/virt/x86_64/kubernetes110/


        master
        node1
        node2

        master节点
         安装
            docker etcd kubernetes-master kubernetes-client
            修改 docker 配置文件

            vim  /etc/sysconfig/docker
                添加如下 两行
                ADD_REGISTRY='--add-registry 192.168.1.242:5000'
                NSECURE_REGISTRY='--insecure-registry 192.168.1.242:5000'

         设置 开机自启
                kube-apiserver.service kube-controller-manager.service kube-scheduler.service etcd.service

                vim /etc/etcd/etcd.conf
                    ETCD_LISTEN_CLIENT_URLS="http://192.168.1.242:2379"



                vim /etc/kubernetes/config
                    KUBE_MASTER="--master=http://192.168.1.242:8080"


                vim /etc/kubernetes/apiserver
                    8: KUBE_API_ADDRESS="--insecure-bind-address=0.0.0.0"
                   17: KUBE_ETCD_SERVERS="--etcd-servers=http://192.168.1.242:2379"  /// 这里可以填写多个 etcd 服务器 防止单点故障 但是这里只有一个所以 只写一个
                   23: 删除 server account 这是用来认证产生 秘钥来进行认证的 当 node 加入 集群是需要 秘钥来认证
                /etc/kubernetes/controller-manager
                /etc/kubernetes/scheduler
                这两个文件使用默认值 即可
         启动服务 查看状态
                systemctl start etcd kube-apiserver.service kube-controller-manager.service kube-scheduler.service
                systemctl status etcd kube-apiserver.service kube-controller-manager.service kube-scheduler.service
         查看端口
                ss -antulp
                    2379 2380 8080
         检查状态
                [root@ecs-5287 ~]# kubectl get cs
                NAME                 STATUS    MESSAGE             ERROR
                scheduler            Healthy   ok
                controller-manager   Healthy   ok
                etcd-0               Healthy   {"health":"true"}
        node节点
            安装 docker  kubernetes-node

            修改配置文件
               将master 的 docker /etc/sysconfig/docker 复制到 node: /etc/sysconfig/

               vim /etc/kubernetes/config
                   ETCD_LISTEN_CLIENT_URLS="http://192.168.1.242:2379"

               vim /etc/kubernetes/kubelet

                    KUBELET_ADDRESS="--address=0.0.0.0"
                    KUBELET_HOSTNAME="--hostname-override=YOU-HOST-NAME"  这里写的主机名需要你能ping同
                 14 添加如下
                    KUBELET_ARGS
                    --kubeconfig=/etc/kubernetes/kubelet.kubeconfig
                    --pod-infra-container-image=pod-infrastructure:latest   // 通过这个 镜像 来启动 容器

                    curl http://192.168.1.242:5000/v2/_catalog
                    {"repositories":["centos","kubernetes-dashboard-amd64","pod-infrastructure"]}

               vim /etc/kubernetes/kubelet.kubeconfig
                YML 格式文件
                    apiVersion: v1
                    kind: Config
                    clusters:
                      - cluster:
                          server: http://192.168.1.242:8080   ##MASTER 自身IP
                        name: local
                    contexts:
                      - context:
                          cluster: local
                        name: local
                    current-context: local
                启动服务 检查 状态
                systemctl enable docker kubelet.service kube-proxy.service
                systemctl restart docker kubelet.service kube-proxy.service
                systemctl status docker kubelet.service kube-proxy.service

            master
                查看集群
                [root@ecs-5287 ~]# kubectl get node
                NAME      STATUS    ROLES     AGE       VERSION
                node1     Ready     <none>    9m        v1.10.3
                node2     Ready     <none>    20s       v1.10.3


        修改网络
            master
                vim /etc/etcd/etcd.conf

                    8 ETCD_LISTEN_CLIENT_URLS="http://0.0.0.0:2379"   ///// 监听所有地址

                systemctl restart etcd.service  重启服务

                创建子网
                etcdctl mk /atmoic.io/network/config '{"Network": "10.254.0.0/16", "Backend": {"Type": "vxlan"}}'
                etcdctl ls /atmoic.io/network/config
                etcdctl get /atmoic.io/network/config  查看
                    {"Network": "10.254.0.0/16", "Backend": {"Type": "vxlan"}}

            在所有 节点上 安装 flannel
                yum -y install flannel
            vim /etc/sysconfig/flanneld

                FLANNEL_ETCD_ENDPOINTS="http://192.168.1.242:2379"     /// master ip

            systemctl restart docker flanneld

                启动时 先启动 flanneld 然后是docker
                关闭时 docker 然后 flanneld

        node 节点
        ##########我的 服务有问题  flanneld 重启失败
        ip 不变化
        重启成功 ip 会变成 10.254.0.0/16 网段  明天检查 视频  LINUX第四阶段-PROJECT3-Day04  早上201.6
        同步 配置文件 重启服务

        rsync -av 192.168.1.242:/etc/sysconfig/flanneld /etc/sysconfig/flanneld

        systemctl restart docker flanneld